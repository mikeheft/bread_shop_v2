# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stream_rails` gem.
# Please instead update this file by running `bin/tapioca gem stream_rails`.

class ActionView::Base
  include ::ERB::Escape
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::StreamRails::ViewHelpers
end

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

# Provides a shortcut from views to the rendering method.
#
# source://stream_rails//lib/stream_rails/enrich.rb#3
module StreamRails
  extend ::ActiveSupport::Autoload

  class << self
    # source://stream_rails//lib/stream_rails.rb#16
    def client; end

    # Returns StreamRails's configuration object.
    #
    # source://stream_rails//lib/stream_rails.rb#28
    def config; end

    # Lets you set global configuration options.
    #
    # All available options and their defaults are in the example below:
    #
    # @example Initializer for Rails
    #   StreamRails.configure do |config|
    #   config.api_key      = "key"
    #   config.api_secret   = "secret"
    #   config.api_site_id  = "42"
    #   config.location     = "us-east"
    #   config.api_hostname = "stream-io-api.com"
    #   config.enabled      = true
    #   end
    # @yield [config]
    #
    # source://stream_rails//lib/stream_rails.rb#62
    def configure(&_block); end

    # source://stream_rails//lib/stream_rails/activity.rb#6
    def create_reference(record); end

    # Switches StreamRails on or off.
    #
    # @param value [Boolean]
    #
    # source://stream_rails//lib/stream_rails.rb#34
    def enabled=(value); end

    # Returns `true` if StreamRails is on, `false` otherwise.
    # Enabled by default.
    #
    # @return [Boolean]
    #
    # source://stream_rails//lib/stream_rails.rb#41
    def enabled?; end

    # Returns StreamRails's configuration object.
    #
    # source://stream_rails//lib/stream_rails.rb#46
    def feed_manager; end

    # Returns the value of attribute logger.
    #
    # source://stream_rails//lib/stream_rails/logger.rb#5
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://stream_rails//lib/stream_rails/logger.rb#5
    def logger=(_arg0); end
  end
end

# source://stream_rails//lib/stream_rails/activity.rb#28
module StreamRails::Activity
  mixes_in_class_methods ::StreamRails::ClassMethods

  # source://stream_rails//lib/stream_rails/activity.rb#37
  def activity_actor; end

  # source://stream_rails//lib/stream_rails/activity.rb#45
  def activity_actor_id; end

  # source://stream_rails//lib/stream_rails/activity.rb#75
  def activity_extra_data; end

  # source://stream_rails//lib/stream_rails/activity.rb#65
  def activity_foreign_id; end

  # source://stream_rails//lib/stream_rails/activity.rb#73
  def activity_notify; end

  # @raise [NotImplementedError]
  #
  # source://stream_rails//lib/stream_rails/activity.rb#49
  def activity_object; end

  # source://stream_rails//lib/stream_rails/activity.rb#61
  def activity_object_id; end

  # source://stream_rails//lib/stream_rails/activity.rb#41
  def activity_owner_feed; end

  # source://stream_rails//lib/stream_rails/activity.rb#33
  def activity_owner_id; end

  # @return [Boolean]
  #
  # source://stream_rails//lib/stream_rails/activity.rb#83
  def activity_should_sync?; end

  # source://stream_rails//lib/stream_rails/activity.rb#53
  def activity_target; end

  # source://stream_rails//lib/stream_rails/activity.rb#69
  def activity_target_id; end

  # source://stream_rails//lib/stream_rails/activity.rb#79
  def activity_time; end

  # source://stream_rails//lib/stream_rails/activity.rb#57
  def activity_verb; end

  # source://stream_rails//lib/stream_rails/activity.rb#87
  def create_activity; end

  class << self
    # @private
    #
    # source://stream_rails//lib/stream_rails/activity.rb#29
    def included(base); end
  end
end

# source://stream_rails//lib/stream_rails/enrich.rb#4
class StreamRails::ActivityResult < ::Hash
  # @return [ActivityResult] a new instance of ActivityResult
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#8
  def initialize; end

  # Returns the value of attribute enriched.
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#5
  def enriched; end

  # Sets the attribute enriched
  #
  # @param value the value to set the attribute enriched to.
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#5
  def enriched=(_arg0); end

  # @return [Boolean]
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#17
  def enriched?; end

  # Returns the value of attribute failed_to_enrich.
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#6
  def failed_to_enrich; end

  # source://stream_rails//lib/stream_rails/enrich.rb#13
  def from_activity(from); end

  # source://stream_rails//lib/stream_rails/enrich.rb#21
  def not_enriched_fields; end

  # source://stream_rails//lib/stream_rails/enrich.rb#25
  def track_not_enriched_field(field, value = T.unsafe(nil)); end
end

# source://stream_rails//lib/stream_rails/activity.rb#15
module StreamRails::ClassMethods
  # source://stream_rails//lib/stream_rails/activity.rb#16
  def as_activity(opts = T.unsafe(nil)); end
end

# Class used to initialize configuration object.
#
# source://stream_rails//lib/stream_rails/config.rb#3
class StreamRails::Config
  # @return [Config] a new instance of Config
  #
  # source://stream_rails//lib/stream_rails/config.rb#16
  def initialize; end

  # Returns the value of attribute api_hostname.
  #
  # source://stream_rails//lib/stream_rails/config.rb#7
  def api_hostname; end

  # Sets the attribute api_hostname
  #
  # @param value the value to set the attribute api_hostname to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#7
  def api_hostname=(_arg0); end

  # Returns the value of attribute api_key.
  #
  # source://stream_rails//lib/stream_rails/config.rb#4
  def api_key; end

  # Sets the attribute api_key
  #
  # @param value the value to set the attribute api_key to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#4
  def api_key=(_arg0); end

  # Returns the value of attribute api_secret.
  #
  # source://stream_rails//lib/stream_rails/config.rb#5
  def api_secret; end

  # Sets the attribute api_secret
  #
  # @param value the value to set the attribute api_secret to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#5
  def api_secret=(_arg0); end

  # Returns the value of attribute api_site_id.
  #
  # source://stream_rails//lib/stream_rails/config.rb#8
  def api_site_id; end

  # Sets the attribute api_site_id
  #
  # @param value the value to set the attribute api_site_id to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#8
  def api_site_id=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://stream_rails//lib/stream_rails/config.rb#9
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#9
  def enabled=(_arg0); end

  # source://stream_rails//lib/stream_rails/config.rb#24
  def feed_configs; end

  # Returns the value of attribute location.
  #
  # source://stream_rails//lib/stream_rails/config.rb#6
  def location; end

  # Sets the attribute location
  #
  # @param value the value to set the attribute location to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#6
  def location=(_arg0); end

  # Returns the value of attribute news_feeds.
  #
  # source://stream_rails//lib/stream_rails/config.rb#12
  def news_feeds; end

  # Sets the attribute news_feeds
  #
  # @param value the value to set the attribute news_feeds to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#12
  def news_feeds=(_arg0); end

  # Returns the value of attribute notification_feed.
  #
  # source://stream_rails//lib/stream_rails/config.rb#13
  def notification_feed; end

  # Sets the attribute notification_feed
  #
  # @param value the value to set the attribute notification_feed to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#13
  def notification_feed=(_arg0); end

  # Returns the value of attribute timeout.
  #
  # source://stream_rails//lib/stream_rails/config.rb#10
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#10
  def timeout=(_arg0); end

  # Returns the value of attribute user_feed.
  #
  # source://stream_rails//lib/stream_rails/config.rb#14
  def user_feed; end

  # Sets the attribute user_feed
  #
  # @param value the value to set the attribute user_feed to.
  #
  # source://stream_rails//lib/stream_rails/config.rb#14
  def user_feed=(_arg0); end
end

# source://stream_rails//lib/stream_rails/enrich.rb#30
class StreamRails::Enrich
  # @return [Enrich] a new instance of Enrich
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#33
  def initialize(fields = T.unsafe(nil)); end

  # source://stream_rails//lib/stream_rails/enrich.rb#37
  def add_fields(new_fields); end

  # source://stream_rails//lib/stream_rails/enrich.rb#75
  def collect_references(activities); end

  # source://stream_rails//lib/stream_rails/enrich.rb#56
  def enrich_activities(activities); end

  # source://stream_rails//lib/stream_rails/enrich.rb#62
  def enrich_aggregated_activities(aggregated_activities); end

  # Returns the value of attribute fields.
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#31
  def fields; end

  # source://stream_rails//lib/stream_rails/enrich.rb#96
  def inject_objects(activities, objects); end

  # @return [Boolean]
  #
  # source://stream_rails//lib/stream_rails/enrich.rb#41
  def model_field?(field_value); end

  # source://stream_rails//lib/stream_rails/enrich.rb#88
  def retrieve_objects(references); end

  private

  # source://stream_rails//lib/stream_rails/enrich.rb#110
  def create_activity_results(activities); end
end

# Class used to manage feeds
#
# source://stream_rails//lib/stream_rails/feed_manager.rb#3
class StreamRails::FeedManager
  # @return [FeedManager] a new instance of FeedManager
  #
  # source://stream_rails//lib/stream_rails/feed_manager.rb#6
  def initialize(client, opts = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://stream_rails//lib/stream_rails/feed_manager.rb#4
  def client; end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#53
  def created_activity(instance); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#61
  def destroyed_activity(instance); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#29
  def follow_user(user_id, target_id); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#25
  def get_feed(feed_type, user_id); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#17
  def get_news_feeds(user_id); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#21
  def get_notification_feed(user_id); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#49
  def get_owner_feed(instance); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#13
  def get_user_feed(user_id); end

  # source://stream_rails//lib/stream_rails/feed_manager.rb#39
  def unfollow_user(user_id, target_id); end
end

# source://stream_rails//lib/stream_rails/railtie.rb#4
class StreamRails::Railtie < ::Rails::Railtie; end

# Provides logic for rendering activities. (different templates per activity verb).
#
# source://stream_rails//lib/stream_rails/renderable.rb#3
module StreamRails::Renderable
  class << self
    # source://stream_rails//lib/stream_rails/renderable.rb#37
    def layout_path(path = T.unsafe(nil), root = T.unsafe(nil)); end

    # source://stream_rails//lib/stream_rails/renderable.rb#43
    def partial_path(activity, aggregated, prefix = T.unsafe(nil), path = T.unsafe(nil), root = T.unsafe(nil)); end

    # source://stream_rails//lib/stream_rails/renderable.rb#50
    def prepare_locals(activity, params); end

    # source://stream_rails//lib/stream_rails/renderable.rb#5
    def render(activity, context, params = T.unsafe(nil)); end

    # source://stream_rails//lib/stream_rails/renderable.rb#27
    def render_aggregated(activity, context, params); end

    # source://stream_rails//lib/stream_rails/renderable.rb#18
    def render_simple(activity, context, params); end

    private

    # source://stream_rails//lib/stream_rails/renderable.rb#59
    def select_path(path, root); end
  end
end

# source://stream_rails//lib/stream_rails/sync_policies.rb#2
module StreamRails::SyncPolicy; end

# source://stream_rails//lib/stream_rails/sync_policies.rb#3
module StreamRails::SyncPolicy::SyncCreate
  private

  # source://stream_rails//lib/stream_rails/sync_policies.rb#21
  def add_to_feed; end

  class << self
    # @private
    #
    # source://stream_rails//lib/stream_rails/sync_policies.rb#4
    def included(base); end
  end
end

# source://stream_rails//lib/stream_rails/sync_policies.rb#29
module StreamRails::SyncPolicy::SyncDestroy
  private

  # source://stream_rails//lib/stream_rails/sync_policies.rb#47
  def remove_from_feed; end

  class << self
    # @private
    #
    # source://stream_rails//lib/stream_rails/sync_policies.rb#30
    def included(base); end
  end
end

# source://stream_rails//lib/stream_rails/version.rb#2
StreamRails::VERSION = T.let(T.unsafe(nil), String)

# Module extending ActionView::Base and adding `render_activity` helper.
#
# source://stream_rails//lib/stream_rails/utils/view_helpers.rb#4
module StreamRails::ViewHelpers
  # View helper for rendering many activities
  #
  # source://stream_rails//lib/stream_rails/utils/view_helpers.rb#11
  def render_activities(activities, options = T.unsafe(nil)); end

  # View helper for rendering an activity
  #
  # source://stream_rails//lib/stream_rails/utils/view_helpers.rb#6
  def render_activity(activity, options = T.unsafe(nil)); end
end
