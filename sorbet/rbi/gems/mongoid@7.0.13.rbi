# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mongoid` gem.
# Please instead update this file by running `bin/tapioca gem mongoid`.

class ActiveSupport::TimeWithZone
  include ::Mongoid::Extensions::TimeWithZone
  include ::Mongoid::Criteria::Queryable::Extensions::TimeWithZone
  extend ::Mongoid::Extensions::TimeWithZone::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::TimeWithZone::ClassMethods
end

class Array
  include ::Enumerable
  include ::Mongoid::Extensions::Array
  include ::Mongoid::Criteria::Queryable::Extensions::Array
  extend ::Mongoid::Extensions::Array::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Array::ClassMethods
end

class BSON::Decimal128
  include ::Mongoid::Extensions::Decimal128
  extend ::Mongoid::Extensions::Decimal128::ClassMethods
end

# source://mongoid//lib/mongoid/extensions.rb#8
class BSON::Document < ::Hash
  # source://bson/5.0.0/lib/bson/document.rb#213
  def initialize(elements = T.unsafe(nil)); end

  # source://bson/5.0.0/lib/bson/document.rb#89
  def [](key); end

  # source://bson/5.0.0/lib/bson/document.rb#146
  def []=(key, value); end

  # source://bson/5.0.0/lib/bson/document.rb#200
  def delete(key, &block); end

  # source://bson/5.0.0/lib/bson/document.rb#269
  def dig(*keys); end

  # source://bson/5.0.0/lib/bson/document.rb#314
  def except(*keys); end

  # source://bson/5.0.0/lib/bson/document.rb#70
  def fetch(key, *args, &block); end

  # source://bson/5.0.0/lib/bson/document.rb#161
  def has_key?(key); end

  # source://bson/5.0.0/lib/bson/document.rb#180
  def has_value?(value); end

  # source://bson/5.0.0/lib/bson/document.rb#161
  def include?(key); end

  # source://bson/5.0.0/lib/bson/document.rb#161
  def key?(key); end

  # source://bson/5.0.0/lib/bson/document.rb#161
  def member?(key); end

  # source://bson/5.0.0/lib/bson/document.rb#229
  def merge(other, &block); end

  # source://bson/5.0.0/lib/bson/document.rb#244
  def merge!(other); end

  # source://bson/5.0.0/lib/bson/document.rb#289
  def slice(*keys); end

  # source://bson/5.0.0/lib/bson/document.rb#320
  def symbolize_keys!; end

  # source://bson/5.0.0/lib/bson/document.rb#333
  def to_bson_normalized_value; end

  # We need to override this as ActiveSupport creates a new Object, instead of a new Hash
  # see https://github.com/rails/rails/commit/f1bad130d0c9bd77c94e43b696adca56c46a66aa
  #
  # source://mongoid//lib/mongoid/extensions.rb#11
  def transform_keys; end

  # source://bson/5.0.0/lib/bson/document.rb#244
  def update(other); end

  # source://bson/5.0.0/lib/bson/document.rb#180
  def value(value); end

  private

  # source://bson/5.0.0/lib/bson/document.rb#339
  def convert_key(key); end

  # source://bson/5.0.0/lib/bson/document.rb#343
  def convert_value(value); end
end

# source://mongoid//lib/mongoid/extensions.rb#2
class BSON::ObjectId
  include ::Mongoid::Extensions::ObjectId
  extend ::Mongoid::Extensions::ObjectId::ClassMethods

  # source://bson/5.0.0/lib/bson/object_id.rb#95
  def <=>(other); end

  # source://bson/5.0.0/lib/bson/object_id.rb#42
  def ==(other); end

  # source://bson/5.0.0/lib/bson/object_id.rb#59
  def ===(other); end

  # source://bson/5.0.0/lib/bson/object_id.rb#212
  def _counter_part; end

  # source://bson/5.0.0/lib/bson/object_id.rb#202
  def _process_part; end

  # source://bson/5.0.0/lib/bson/object_id.rb#81
  def as_extended_json(**_); end

  # source://mongoid//lib/mongoid/extensions.rb#3
  def as_json(options = T.unsafe(nil)); end

  def bson_type; end

  # source://bson/5.0.0/lib/bson/object_id.rb#42
  def eql?(other); end

  # source://bson/5.0.0/lib/bson/object_id.rb#109
  def generation_time; end

  # source://bson/5.0.0/lib/bson/object_id.rb#122
  def hash; end

  # source://bson/5.0.0/lib/bson/object_id.rb#134
  def inspect; end

  # source://bson/5.0.0/lib/bson/object_id.rb#146
  def marshal_dump; end

  # source://bson/5.0.0/lib/bson/object_id.rb#160
  def marshal_load(data); end

  # source://bson/5.0.0/lib/bson/object_id.rb#179
  def to_bson(buffer = T.unsafe(nil)); end

  # source://bson/5.0.0/lib/bson/object_id.rb#191
  def to_s; end

  # source://bson/5.0.0/lib/bson/object_id.rb#191
  def to_str; end

  # source://bson/5.0.0/lib/bson/object_id.rb#109
  def to_time; end

  private

  # source://bson/5.0.0/lib/bson/object_id.rb#242
  def generate_data; end

  # source://bson/5.0.0/lib/bson/object_id.rb#237
  def initialize_copy(other); end

  # source://bson/5.0.0/lib/bson/object_id.rb#250
  def repair; end

  class << self
    # source://bson/5.0.0/lib/bson/object_id.rb#231
    def _generator; end

    # source://bson/5.0.0/lib/bson/object_id.rb#267
    def from_bson(buffer, **_); end

    # source://bson/5.0.0/lib/bson/object_id.rb#281
    def from_data(data); end

    # source://bson/5.0.0/lib/bson/object_id.rb#299
    def from_string(string); end

    # source://bson/5.0.0/lib/bson/object_id.rb#322
    def from_time(time, options = T.unsafe(nil)); end

    # source://bson/5.0.0/lib/bson/object_id.rb#336
    def legal?(string); end

    # source://bson/5.0.0/lib/bson/object_id.rb#353
    def repair(object); end

    # source://bson/5.0.0/lib/bson/object_id.rb#363
    def timestamp; end
  end
end

class BSON::Regexp::Raw
  include ::Mongoid::Criteria::Queryable::Extensions::Regexp::Raw
  extend ::Mongoid::Criteria::Queryable::Extensions::Regexp::Raw::ClassMethods
end

class BigDecimal < ::Numeric
  include ::Mongoid::Extensions::BigDecimal
  extend ::Mongoid::Extensions::BigDecimal::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::BigDecimal::ClassMethods
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions.rb#3
class Boolean
  extend ::Mongoid::Criteria::Queryable::Extensions::Boolean::ClassMethods
end

class Date
  include ::Comparable
  include ::Mongoid::Extensions::Date
  include ::Mongoid::Criteria::Queryable::Extensions::Date
  extend ::Mongoid::Extensions::Date::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Date::ClassMethods
end

class DateTime < ::Date
  include ::Mongoid::Extensions::DateTime
  include ::Mongoid::Criteria::Queryable::Extensions::DateTime
  extend ::Mongoid::Extensions::DateTime::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::DateTime::ClassMethods
end

class FalseClass
  include ::Mongoid::Extensions::FalseClass
end

class Float < ::Numeric
  include ::Mongoid::Extensions::Float
  include ::Mongoid::Criteria::Queryable::Extensions::Numeric
  extend ::Mongoid::Extensions::Float::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Numeric::ClassMethods
end

class Hash
  include ::Enumerable
  include ::Mongoid::Extensions::Hash
  include ::Mongoid::Criteria::Queryable::Extensions::Hash
  extend ::Mongoid::Extensions::Hash::ClassMethods
end

class Integer < ::Numeric
  include ::Mongoid::Extensions::Integer
  include ::Mongoid::Criteria::Queryable::Extensions::Numeric
  extend ::Mongoid::Extensions::Integer::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Numeric::ClassMethods
end

class Module
  include ::Mongoid::Extensions::Module
end

class Mongo::Collection
  include ::Mongoid::QueryCache::Collection
  extend ::Mongoid::QueryCache::Base
end

class Mongo::Collection::View
  include ::Mongoid::QueryCache::View
  extend ::Mongoid::QueryCache::Base
end

# source://mongoid//lib/mongoid/version.rb#3
module Mongoid
  extend ::Mongoid::Loggable
  extend ::Mongoid

  # source://mongoid//lib/mongoid.rb#105
  def app_name(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def app_name=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def app_name?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def background_indexing(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def background_indexing=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def background_indexing?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def belongs_to_required_by_default(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def belongs_to_required_by_default=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def belongs_to_required_by_default?(*_arg0, **_arg1, &_arg2); end

  # Convenience method for getting a named client.
  #
  # @example Get a named client.
  #   Mongoid.client(:default)
  # @return [Mongo::Client] The named client.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid.rb#94
  def client(name); end

  # source://mongoid//lib/mongoid.rb#105
  def clients(*_arg0, **_arg1, &_arg2); end

  # Sets the Mongoid configuration options. Best used by passing a block.
  #
  # @example Set up configuration options.
  #   Mongoid.configure do |config|
  #   config.connect_to("mongoid_test")
  #   end
  # @return [Config] The configuration object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid.rb#58
  def configure; end

  # source://mongoid//lib/mongoid.rb#105
  def configured?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def connect_to(*_arg0, **_arg1, &_arg2); end

  # Convenience method for getting the default client.
  #
  # @example Get the default client.
  #   Mongoid.default_client
  # @return [Mongo::Client] The default client.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid.rb#70
  def default_client; end

  # source://mongoid//lib/mongoid.rb#105
  def destructive_fields(*_arg0, **_arg1, &_arg2); end

  # Disconnect all active clients.
  #
  # @example Disconnect all active clients.
  #   Mongoid.disconnect_clients
  # @return [true] True.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid.rb#82
  def disconnect_clients; end

  # source://mongoid//lib/mongoid.rb#105
  def duplicate_fields_exception(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def duplicate_fields_exception=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def duplicate_fields_exception?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def include_root_in_json(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def include_root_in_json=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def include_root_in_json?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def include_type_for_serialization(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def include_type_for_serialization=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def include_type_for_serialization?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def load!(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def load_configuration(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def log_level(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def log_level=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def log_level?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def models(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def options=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def override_client(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def override_database(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def preload_models(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def preload_models=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def preload_models?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def purge!(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def raise_not_found_error(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def raise_not_found_error=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def raise_not_found_error?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def register_model(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def running_with_passenger?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def scope_overwrite_exception(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def scope_overwrite_exception=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def scope_overwrite_exception?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def time_zone(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def truncate!(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def use_activesupport_time_zone(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def use_activesupport_time_zone=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def use_activesupport_time_zone?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def use_utc(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid.rb#105
  def use_utc=(arg); end

  # source://mongoid//lib/mongoid.rb#105
  def use_utc?(*_arg0, **_arg1, &_arg2); end
end

# source://mongoid//lib/mongoid/association/referenced/eager.rb#3
module Mongoid::Association
  include ::Mongoid::Association::Referenced::Syncable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::Mongoid::Association::Embedded::Cyclic
  include ::Mongoid::Association::Referenced::AutoSave
  include ::Mongoid::Association::Referenced::CounterCache
  include ::Mongoid::Association::Accessors
  include ::Mongoid::Association::Depending
  include ::Mongoid::Association::Builders
  include ::Mongoid::Association::Macros
  include ::Mongoid::Association::Reflections

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::Syncable::ClassMethods

  # Returns the value of attribute _association.
  #
  # source://mongoid//lib/mongoid/association.rb#46
  def _association; end

  # Sets the attribute _association
  #
  # @param value the value to set the attribute _association to.
  #
  # source://mongoid//lib/mongoid/association.rb#46
  def _association=(_arg0); end

  # Get the association name for this document. If no association was defined
  #   an error will be raised.
  #
  # @example Get the association name.
  #   document.association_name
  # @raise [Errors::NoMetadata] If no association metadata is present.
  # @return [Symbol] The association name.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association.rb#101
  def association_name; end

  # Determine if the document itself is embedded in another document via the
  # proper channels. (If it has a parent document.)
  #
  # @example Is the document embedded?
  #   address.embedded?
  # @return [true, false] True if the document has a parent document.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association.rb#62
  def embedded?; end

  # Determine if the document is part of an embeds_many relation.
  #
  # @example Is the document in an embeds many?
  #   address.embedded_many?
  # @return [true, false] True if in an embeds many.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association.rb#74
  def embedded_many?; end

  # Determine if the document is part of an embeds_one relation.
  #
  # @example Is the document in an embeds one?
  #   address.embedded_one?
  # @return [true, false] True if in an embeds one.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association.rb#86
  def embedded_one?; end

  # Determine if the document is part of an references_many relation.
  #
  # @example Is the document in a references many?
  #   post.referenced_many?
  # @return [true, false] True if in a references many.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association.rb#114
  def referenced_many?; end

  # Determine if the document is part of an references_one relation.
  #
  # @example Is the document in a references one?
  #   address.referenced_one?
  # @return [true, false] True if in a references one.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association.rb#126
  def referenced_one?; end

  # Convenience method for iterating through the loaded relations and
  # reloading them.
  #
  # @example Reload the relations.
  #   document.reload_relations
  # @return [Hash] The association metadata.
  # @since 2.1.6
  #
  # source://mongoid//lib/mongoid/association.rb#139
  def reload_relations; end

  module GeneratedClassMethods
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end

  module GeneratedInstanceMethods
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end
end

# This module contains all the behaviour related to accessing relations
# through the getters and setters, and how to delegate to builders to
# create new ones.
#
# source://mongoid//lib/mongoid/association/accessors.rb#8
module Mongoid::Association::Accessors
  extend ::ActiveSupport::Concern

  # Builds the related document and creates the relation unless the
  # document is nil, then sets the relation on this document.
  #
  # @example Build the relation.
  #   person.__build__(:addresses, { :_id => 1 }, association)
  # @param name [String, Symbol] The name of the relation.
  # @param object [Hash, BSON::ObjectId] The id or attributes to use.
  # @param association [Association] The association metadata.
  # @return [Proxy] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#24
  def __build__(name, object, association); end

  # Create a relation from an object and association.
  #
  # @example Create the relation.
  #   person.create_relation(document, association)
  # @param object [Document, Array<Document>] The relation target.
  # @param association [Association] The association metadata.
  # @return [Proxy] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#40
  def create_relation(object, association); end

  # Resets the criteria inside the relation proxy. Used by many-to-many
  # relations to keep the underlying ids array in sync.
  #
  # @example Reset the relation criteria.
  #   person.reset_relation_criteria(:preferences)
  # @param name [Symbol] The name of the relation.
  # @since 3.0.14
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#55
  def reset_relation_criteria(name); end

  # Set the supplied relation to an instance variable on the class with the
  # provided name. Used as a helper just for code cleanliness.
  #
  # @example Set the proxy on the document.
  #   person.set(:addresses, addresses)
  # @param name [String, Symbol] The name of the relation.
  # @param relation [Proxy] The relation to set.
  # @return [Proxy] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#73
  def set_relation(name, relation); end

  private

  # Get the relation. Extracted out from the getter method to avoid
  # infinite recursion when overriding the getter.
  #
  # @api private
  # @example Get the relation.
  #   document.get_relation(:name, association)
  # @param association [Association] The association metadata.
  # @param reload [true, false] If the relation is to be reloaded.
  # @param object [Object] The object used to build the relation.
  # @param name [Symbol] The name of the relation.
  # @return [Proxy] The relation.
  # @since 3.0.16
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#95
  def get_relation(name, association, object, reload = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#111
  def needs_no_database_query?(object, association); end

  # Parse out the attributes and the options from the args passed to a
  # build_ or create_ methods.
  #
  # @example Parse the args.
  #   doc.parse_args(:name => "Joe")
  # @param args [Array] The arguments.
  # @return [Array<Hash>] The attributes and options.
  # @since 2.3.4
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#156
  def parse_args(*args); end

  # Yield to the block with autobuild functionality turned off.
  #
  # @example Execute without autobuild.
  #   document.without_autobuild do
  #   document.name
  #   end
  # @return [Object] The result of the yield.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#138
  def without_autobuild; end

  # Is the current code executing without autobuild functionality?
  #
  # @example Is autobuild disabled?
  #   document.without_autobuild?
  # @return [true, false] If autobuild is disabled.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/accessors.rb#124
  def without_autobuild?; end

  class << self
    # Defines a builder method for an embeds_one relation. This is
    # defined as #build_name.
    #
    # @example
    #   Person.define_builder!(association)
    # @param association [Association] The association for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#295
    def define_builder!(association); end

    # Defines a creator method for an embeds_one relation. This is
    # defined as #create_name. After the object is built it will
    # immediately save.
    #
    # @example
    #   Person.define_creator!(association)
    # @param association [Association] The association for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#322
    def define_creator!(association); end

    # Adds the existence check for relations.
    #
    # @example Add the existence check.
    #   Person.define_existence_check!(association)
    # @example Check if a relation exists.
    #   person = Person.new
    #   person.has_game?
    #   person.game?
    # @param association [Association] The association.
    # @return [Class] The model being set up.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#175
    def define_existence_check!(association); end

    # Defines the getter for the relation. Nothing too special here: just
    # return the instance variable for the relation if it exists or build
    # the thing.
    #
    # @example Set up the getter for the relation.
    #   Person.define_getter!(association)
    # @param association [Association] The association metadata for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#199
    def define_getter!(association); end

    # Defines the getter for the ids of documents in the relation. Should
    # be specify only for referenced many relations.
    #
    # @example Set up the ids getter for the relation.
    #   Person.define_ids_getter!(association)
    # @param association [Association] The association metadata for the relation.
    # @return [Class] The class being set up.
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#221
    def define_ids_getter!(association); end

    # Defines the setter method that allows you to set documents
    # in this relation by their ids. The defined setter, finds
    # documents with given ids and invokes regular relation setter
    # with found documents. Ids setters should be defined only for
    # referenced many relations.
    #
    #  @param [ Association ] association The association for the relation.
    #
    #  @return [ Class ] The class being set up.
    #
    # @example Set up the id_setter for the relation.
    #   Person.define_ids_setter!(association)
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#275
    def define_ids_setter!(association); end

    # Defines the setter for the relation. This does a few things based on
    # some conditions. If there is an existing association, a target
    # substitution will take place, otherwise a new relation will be
    # created with the supplied target.
    #
    # @example Set up the setter for the relation.
    #   Person.define_setter!(association)
    # @param association [Association] The association metadata for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/accessors.rb#243
    def define_setter!(association); end
  end
end

# Superclass for all objects that bind relations together.
#
# source://mongoid//lib/mongoid/association/bindable.rb#6
module Mongoid::Association::Bindable
  include ::Mongoid::Threaded::Lifecycle
  extend ::Mongoid::Threaded::Lifecycle::ClassMethods

  # Create the new binding.
  #
  # @example Initialize a binding.
  #   Binding.new(base, target, association)
  # @param base [Document] The base of the binding.
  # @param target [Document, Array<Document>] The target of the binding.
  # @param association [Association] The association metadata.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#21
  def initialize(base, target, association); end

  # Returns the value of attribute _association.
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#9
  def _association; end

  # Returns the value of attribute _base.
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#9
  def _base; end

  # Returns the value of attribute _target.
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#9
  def _target; end

  # Execute the provided block inside a binding.
  #
  # @example Execute the binding block.
  #   binding.binding do
  #   base.foreign_key = 1
  #   end
  # @return [Object] The result of the yield.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#35
  def binding; end

  private

  # Set the id of the related document in the foreign key field on the
  # keyed document.
  #
  # @api private
  # @example Bind the foreign key.
  #   binding.bind_foreign_key(post, person._id)
  # @param keyed [Document] The document that stores the foreign key.
  # @param id [Object] The id of the bound document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#80
  def bind_foreign_key(keyed, id); end

  # Bind the provided document with the base from the parent relation.
  #
  # @api private
  # @example Bind the document with the base.
  #   binding.bind_from_relational_parent(doc)
  # @param doc [Document] The document to bind.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#150
  def bind_from_relational_parent(doc); end

  # Bind the inverse document to the child document so that the in memory
  # instances are the same.
  #
  # @api private
  # @example Bind the inverse.
  #   binding.bind_inverse(post, person)
  # @param doc [Document] The base document.
  # @param inverse [Document] The inverse document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#134
  def bind_inverse(doc, inverse); end

  # Set the type of the related document on the foreign type field, used
  # when relations are polymorphic.
  #
  # @api private
  # @example Bind the polymorphic type.
  #   binding.bind_polymorphic_inverse_type(post, "Person")
  # @param typed [Document] The document that stores the type field.
  # @param name [String] The name of the model.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#116
  def bind_polymorphic_inverse_type(typed, name); end

  # Set the type of the related document on the foreign type field, used
  # when relations are polymorphic.
  #
  # @api private
  # @example Bind the polymorphic type.
  #   binding.bind_polymorphic_type(post, "Person")
  # @param typed [Document] The document that stores the type field.
  # @param name [String] The name of the model.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#98
  def bind_polymorphic_type(typed, name); end

  # Check if the inverse is properly defined.
  #
  # @api private
  # @example Check the inverse definition.
  #   binding.check_inverse!(doc)
  # @param doc [Document] The document getting bound.
  # @raise [Errors::InverseNotFound] If no inverse found.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#57
  def check_inverse!(doc); end

  # source://mongoid//lib/mongoid/association/bindable.rb#157
  def record_id(_base); end

  # Ensure that the association on the base is correct, for the cases
  # where we have multiple belongs to definitions and were are setting
  # different parents in memory in order.
  #
  # @api private
  # @example Set the base association.
  #   binding.set_base_association
  # @return [true, false] If the association changed.
  # @since 2.4.4
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#173
  def set_base_association; end

  # Bind the provided document with the base from the parent relation.
  #
  # @api private
  # @example Bind the document with the base.
  #   unbinding.unbind_from_relational_parent(doc)
  # @param doc [Document] The document to unbind.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/bindable.rb#190
  def unbind_from_relational_parent(doc); end
end

# This module is responsible for defining the build and create methods used
# in one to one relations.
#
# @example Methods that get created.
#
#   class Person
#   include Mongoid::Document
#   embeds_one :name
#   end
#
#   # The following methods get created:
#   person.build_name({ :first_name => "Durran" })
#   person.create_name({ :first_name => "Durran" })
# @since 2.0.0.rc.1
#
# source://mongoid//lib/mongoid/association/builders.rb#21
module Mongoid::Association::Builders
  extend ::ActiveSupport::Concern

  private

  # Parse out the attributes and the options from the args passed to a
  # build_ or create_ methods.
  #
  # @example Parse the args.
  #   doc.parse_args(:name => "Joe")
  # @param args [Array] The arguments.
  # @return [Array<Hash>] The attributes and options.
  # @since 2.3.4
  #
  # source://mongoid//lib/mongoid/association/builders.rb#37
  def parse_args(*args); end

  class << self
    # Defines a builder method. This is defined as #build_name.
    #
    # @example
    #   Person.define_builder!(association)
    # @param association [Association] The association metadata for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/builders.rb#51
    def define_builder!(association); end

    # Defines a creator method. This is defined as #create_name.
    # After the object is built it will immediately save.
    #
    # @example
    #   Person.define_creator!(association)
    # @param association [Association] The association metadata for the relation.
    # @return [Class] The class being set up.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/builders.rb#76
    def define_creator!(association); end
  end
end

# Used for converting foreign key values to the correct type based on the
# types of ids that the document stores.
#
# source://mongoid//lib/mongoid/association/constrainable.rb#8
module Mongoid::Association::Constrainable
  # Convert the supplied object to the appropriate type to set as the
  # foreign key for a relation.
  #
  # @example Convert the object.
  #   constraint.convert("12345")
  # @param object [Object] The object to convert.
  # @return [Object] The object cast to the correct type.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/association/constrainable.rb#21
  def convert_to_foreign_key(object); end

  private

  # source://mongoid//lib/mongoid/association/constrainable.rb#35
  def convert_polymorphic(object); end
end

# This module defines the behaviour for setting up cascading deletes and
# nullifies for relations, and how to delegate to the appropriate strategy.
#
# source://mongoid//lib/mongoid/association/depending.rb#6
module Mongoid::Association::Depending
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods

  # Perform all cascading deletes, destroys, or nullifies. Will delegate to
  # the appropriate strategy to perform the operation.
  #
  # @example Execute cascades.
  #   document.apply_delete_dependencies!
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/depending.rb#86
  def apply_delete_dependencies!; end

  private

  # source://mongoid//lib/mongoid/association/depending.rb#96
  def _dependent_delete_all!(association); end

  # source://mongoid//lib/mongoid/association/depending.rb#106
  def _dependent_destroy!(association); end

  # source://mongoid//lib/mongoid/association/depending.rb#117
  def _dependent_nullify!(association); end

  # source://mongoid//lib/mongoid/association/depending.rb#129
  def _dependent_restrict_with_error!(association); end

  # source://mongoid//lib/mongoid/association/depending.rb#123
  def _dependent_restrict_with_exception!(association); end

  class << self
    # Attempt to add the cascading information for the document to know how
    # to handle associated documents on a removal.
    #
    # @example Set up cascading information
    #   Mongoid::Association::Depending.define_dependency!(association)
    # @param association [Association] The association metadata.
    # @return [Class] The class of the document.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/depending.rb#57
    def define_dependency!(association); end

    # source://mongoid//lib/mongoid/association/depending.rb#71
    def validate!(association); end
  end

  module GeneratedClassMethods
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
  end

  module GeneratedInstanceMethods
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
  end
end

# source://mongoid//lib/mongoid/association/depending.rb#0
module Mongoid::Association::Depending::ClassMethods
  # source://mongoid//lib/mongoid/association/depending.rb#21
  def _all_dependents; end
end

# The error message when a strategy cannot delete objects because there are associated objects.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/depending.rb#44
Mongoid::Association::Depending::RESTRICT_ERROR_MSG = T.let(T.unsafe(nil), String)

# The valid dependent strategies.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/depending.rb#33
Mongoid::Association::Depending::STRATEGIES = T.let(T.unsafe(nil), Array)

# This module defines the eager loading behavior for criteria.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/eager_loadable.rb#10
module Mongoid::Association::EagerLoadable
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/eager_loadable.rb#16
  def eager_load(docs); end

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/eager_loadable.rb#12
  def eager_loadable?; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/eager_loadable.rb#24
  def preload(relations, docs); end
end

# source://mongoid//lib/mongoid/association/embedded/cyclic.rb#4
module Mongoid::Association::Embedded; end

# Contains behaviour for executing operations in batch on embedded
# documents.
#
# source://mongoid//lib/mongoid/association/embedded/batchable.rb#8
module Mongoid::Association::Embedded::Batchable
  include ::Mongoid::Positional

  # Clear all of the docs out of the relation in a single swipe.
  #
  # @example Clear all docs.
  #   batchable.batch_clear(docs)
  # @param docs [Array<Document>] The docs to clear.
  # @return [Array] The empty array.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#37
  def batch_clear(docs); end

  # Insert new documents as a batch push ($push with $each). This ensures that
  # all callbacks are run at the appropriate time and only 1 request is
  # made to the database.
  #
  # @example Execute the batch push.
  #   batchable.batch_insert([ doc_one, doc_two ])
  # @param docs [Array<Document>] The docs to add.
  # @return [Array<Hash>] The inserts.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#23
  def batch_insert(docs); end

  # Batch remove the provided documents as a $pullAll.
  #
  # @example Batch remove the documents.
  #   batchable.batch_remove([ doc_one, doc_two ])
  # @param docs [Array<Document>] The docs to remove.
  # @param method [Symbol] Delete or destroy.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#58
  def batch_remove(docs, method = T.unsafe(nil)); end

  # Batch replace the provided documents as a $set.
  #
  # @example Batch replace the documents.
  #   batchable.batch_replace([ doc_one, doc_two ])
  # @param docs [Array<Document>] The docs to replace with.
  # @return [Array<Hash>] The inserts.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#80
  def batch_replace(docs); end

  private

  # Add the atomic sets to the base document.
  #
  # @api private
  # @example Add the atomic sets.
  #   batchable.add_atomic_sets([{ field: value }])
  # @param sets [Array<Hash>] The atomic sets.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#111
  def add_atomic_sets(sets); end

  # Perform a batch persist of the provided documents with $push and $each.
  #
  # @api private
  # @example Perform a batch push.
  #   batchable.execute_batch_push(docs)
  # @param docs [Array<Document>] The docs to persist.
  # @return [Array<Hash>] The inserts.
  # @since 7.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#158
  def execute_batch_push(docs); end

  # Perform a batch persist of the provided documents with a $set.
  #
  # @api private
  # @example Perform a batch $set.
  #   batchable.execute_batch_set(docs)
  # @param docs [Array<Document>] The docs to persist.
  # @return [Array<Hash>] The inserts.
  # @since 7.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#133
  def execute_batch_set(docs); end

  # Are we in a state to be able to batch insert?
  #
  # @api private
  # @example Can inserts be performed?
  #   batchable.insertable?
  # @return [true, false] If inserts can be performed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#181
  def insertable?; end

  # Are the inserts currently valid?
  #
  # @api private
  # @example Are the inserts currently valid.
  #   batchable.inserts_valid
  # @return [true, false] If inserts are currently valid.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#195
  def inserts_valid; end

  # Set the inserts valid flag.
  #
  # @api private
  # @example Set the flag.
  #   batchable.inserts_valid = true
  # @param value [true, false] The flag.
  # @return [true, false] The flag.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#211
  def inserts_valid=(value); end

  # Normalize the documents, in case they were provided as an array of
  # hashes.
  #
  # @api private
  # @example Normalize the docs.
  #   batchable.normalize_docs(docs)
  # @param docs [Array<Hash, Document>] The docs to normalize.
  # @return [Array<Document>] The docs.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#228
  def normalize_docs(docs); end

  # Get the atomic path.
  #
  # @api private
  # @example Get the atomic path.
  #   batchable.path
  # @return [String] The atomic path.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#250
  def path; end

  # Set the atomic path.
  #
  # @api private
  # @example Set the atomic path.
  #   batchable.path = "addresses"
  # @param value [String] The path.
  # @return [String] The path.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#266
  def path=(value); end

  # Post process the documents after batch insert.
  #
  # @api private
  # @example Post process the documents.
  #   batchable.post_process_batch_insert(docs)
  # @param docs [Array<Documents>] The inserted docs.
  # @return [Enumerable] The document enum.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#353
  def post_process_batch_insert(docs); end

  # Post process the batch removal.
  #
  # @api private
  # @example Post process the documents.
  #   batchable.post_process_batch_remove(docs, :delete)
  # @param docs [Array<Document>] The documents.
  # @param method [Symbol] Delete or destroy.
  # @return [Array<Document>] The documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#374
  def post_process_batch_remove(docs, method); end

  # Pre processes the batch insert for the provided documents.
  #
  # @api private
  # @example Pre process the documents.
  #   batchable.pre_process_batch_insert(docs)
  # @param docs [Array<Document>] The documents.
  # @return [Array<Hash>] The documents as an array of hashes.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#296
  def pre_process_batch_insert(docs); end

  # Pre process the batch removal.
  #
  # @api private
  # @example Pre process the documents.
  #   batchable.pre_process_batch_remove(docs, :delete)
  # @param docs [Array<Document>] The documents.
  # @param method [Symbol] Delete or destroy.
  # @return [Array<Hash>] The documents as hashes.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#325
  def pre_process_batch_remove(docs, method); end

  # Get the selector for executing atomic operations on the collection.
  #
  # @api private
  # @example Get the selector.
  #   batchable.selector
  # @return [Hash] The atomic selector.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/batchable.rb#280
  def selector; end
end

# This module provides convenience macros for using cyclic embedded
# relations.
#
# source://mongoid//lib/mongoid/association/embedded/cyclic.rb#8
module Mongoid::Association::Embedded::Cyclic
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods

  module GeneratedClassMethods
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
  end

  module GeneratedInstanceMethods
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
  end
end

# source://mongoid//lib/mongoid/association/embedded/cyclic.rb#15
module Mongoid::Association::Embedded::Cyclic::ClassMethods
  # Create a cyclic embedded relation that creates a tree hierarchy for
  # the document and many embedded child documents.
  #
  # This provides the default nomenclature for accessing a parent document
  # or its children.
  #
  # @example Set up a recursive embeds many.
  #
  #   class Role
  #   include Mongoid::Document
  #   recursively_embeds_many
  #   end
  # @example The previous example is a shorcut for this.
  #
  #   class Role
  #   include Mongoid::Document
  #   embeds_many :child_roles, :class_name => "Role", :cyclic => true
  #   embedded_in :parent_role, :class_name => "Role", :cyclic => true
  #   end
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/cyclic.rb#39
  def recursively_embeds_many(options = T.unsafe(nil)); end

  # Create a cyclic embedded relation that creates a single self
  # referencing relationship for a parent and a single child.
  #
  # This provides the default nomenclature for accessing a parent document
  # or its children.
  #
  # @example Set up a recursive embeds one.
  #
  #   class Role
  #   include Mongoid::Document
  #   recursively_embeds_one
  #   end
  # @example The previous example is a shorcut for this.
  #
  #   class Role
  #   include Mongoid::Document
  #   embeds_one :child_role, :class_name => "Role", :cyclic => true
  #   embedded_in :parent_role, :class_name => "Role", :cyclic => true
  #   end
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/cyclic.rb#69
  def recursively_embeds_one(options = T.unsafe(nil)); end

  private

  # Determines the child name given the class.
  #
  # @example Determine the child name.
  #   Role.cyclic_child_name
  # @param many [true, false] Is the a many relation?
  # @return [String] "child_" plus the class name underscored in
  #   singular or plural form.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/cyclic.rb#102
  def cyclic_child_name(many = T.unsafe(nil)); end

  # Determines the parent name given the class.
  #
  # @example Determine the parent name.
  #   Role.cyclic_parent_name
  # @return [String] "parent_" plus the class name underscored.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/cyclic.rb#87
  def cyclic_parent_name; end
end

# The EmbeddedIn type association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embedded_in/binding.rb#4
class Mongoid::Association::Embedded::EmbeddedIn
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Embedded::EmbeddedIn::Buildable

  # Is this association type embedded?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#53
  def embedded?; end

  # The key that is used to get the attributes for the associated object.
  #
  # @return [String] The name of the relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#79
  def key; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::One] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#109
  def nested_builder(attributes, options); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#97
  def polymorphic?; end

  # The primary key
  #
  # @return [nil] Not relevant for this relation
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#58
  def primary_key; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::Embedded::EmbeddedIn::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#88
  def relation; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#42
  def setup!; end

  # Does this association type store the foreign key?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#65
  def stores_foreign_key?; end

  # The default for validating the association object.
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#72
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#141
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#130
  def polymorphic_inverses(other = T.unsafe(nil)); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#125
  def relation_complements; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#115
  def setup_instance_methods!; end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#22
Mongoid::Association::Embedded::EmbeddedIn::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# The Binding object for embedded_in associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embedded_in/binding.rb#9
class Mongoid::Association::Embedded::EmbeddedIn::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds the base object to the inverse of the relation. This is so we
  # are referenced to the actual objects themselves on both sides.
  #
  # This case sets the association metadata on the inverse object as well as the
  # document itself.
  #
  # @example Bind the documents.
  #   name.person.bind(:continue => true)
  #   name.person = Person.new
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/binding.rb#23
  def bind_one; end

  # Unbinds the base object and the inverse, caused by setting the
  # reference to nil.
  #
  # @example Unbind the document.
  #   name.person.unbind(:continue => true)
  #   name.person = nil
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/binding.rb#43
  def unbind_one; end
end

# The Builder behavior for embedded_in associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embedded_in/buildable.rb#9
module Mongoid::Association::Embedded::EmbeddedIn::Buildable
  include ::Mongoid::Threaded::Lifecycle
  extend ::Mongoid::Threaded::Lifecycle::ClassMethods

  # This builder doesn't actually build anything, just returns the
  # parent since it should already be instantiated.
  #
  # @example Build the document.
  #   Builder.new(meta, attrs).build
  # @param base [Object] The object.
  # @param object [Object] The parent hash or document.
  # @param type [String] Not used in this context.
  # @return [Document] A single document.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/buildable.rb#23
  def build(base, object, type = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#6
class Mongoid::Association::Embedded::EmbeddedIn::Proxy < ::Mongoid::Association::One
  # Instantiate a new embedded_in relation.
  #
  # @example Create the new relation.
  #   Association::Embedded::EmbeddedIn.new(person, address, association)
  # @param base [Document] The document the relation hangs off of.
  # @param target [Document] The target (parent) of the relation.
  # @param association [Association] The association metadata.
  # @return [In] The proxy.
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#18
  def initialize(base, target, association); end

  # Substitutes the supplied target documents for the existing document
  # in the relation.
  #
  # @example Substitute the new document.
  #   person.name.substitute(new_name)
  # @param replacement [Document] A document to replace the target.
  # @return [Document, nil] The relation or nil.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#36
  def substitute(replacement); end

  private

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding.
  #   binding([ address ])
  # @return [Binding] A binding object.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#58
  def binding; end

  # Characterize the document.
  #
  # @example Set the base association.
  #   object.characterize_one(document)
  # @param document [Document] The document to set the association metadata on.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#70
  def characterize_one(document); end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#84
  def persistable?; end

  class << self
    # Returns true if the relation is an embedded one. In this case
    # always true.
    #
    # @example Is this relation embedded?
    #   Association::Embedded::EmbeddedIn.embedded?
    # @return [true] true.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#99
    def embedded?; end

    # Get the path calculator for the supplied document.
    #
    # @example Get the path calculator.
    #   Proxy.path(document)
    # @param document [Document] The document to calculate on.
    # @return [Root] The root atomic path calculator.
    # @since 2.1.0
    #
    # source://mongoid//lib/mongoid/association/embedded/embedded_in/proxy.rb#113
    def path(document); end
  end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embedded_in.rb#35
Mongoid::Association::Embedded::EmbeddedIn::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The EmbedsMany type association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_many/binding.rb#4
class Mongoid::Association::Embedded::EmbedsMany
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Embedded::EmbedsMany::Buildable

  # Get a criteria object for searching given a parent and children documents.
  #
  # @param base [Document] The base document.
  # @param target [Document] The children documents.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#164
  def criteria(base, target); end

  # Is this association type embedded?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#77
  def embedded?; end

  # The key that is used to get the attributes for the associated object.
  #
  # @return [String] The name of the field used to store the relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#68
  def key; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::Many] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#139
  def nested_builder(attributes, options); end

  # Get the path calculator for the supplied document.
  #
  # @example Get the path calculator.
  #   Proxy.path(document)
  # @param document [Document] The document to calculate on.
  # @return [Mongoid::Atomic::Paths::Embedded::Many] The embedded many atomic path calculator.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#154
  def path(document); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#116
  def polymorphic?; end

  # The primary key
  #
  # @return [nil] Not relevant for this relation
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#100
  def primary_key; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::Embedded::EmbedsMany::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#107
  def relation; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#47
  def setup!; end

  # The field key used to store the list of association objects.
  #
  # @return [String] The field name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#59
  def store_as; end

  # Does this association type store the foreign key?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#95
  def stores_foreign_key?; end

  # The field used to store the type of the related object.
  #
  # @note Only relevant if the association is polymorphic.
  # @return [String, nil] The field for storing the associated object's type.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#127
  def type; end

  # Get the default validation setting for the relation. Determines if
  # by default a validates associated will occur.
  #
  # @example Get the validation default.
  #   Proxy.validation_default
  # @return [true] Always true.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#88
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#175
  def apply_ordering(criteria); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#197
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#193
  def polymorphic_inverses(other = T.unsafe(nil)); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#189
  def relation_complements; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#179
  def setup_instance_methods!; end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#22
Mongoid::Association::Embedded::EmbedsMany::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for all embeds_many relations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_many/binding.rb#9
class Mongoid::Association::Embedded::EmbedsMany::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds a single document with the inverse relation. Used
  # specifically when appending to the proxy.
  #
  # @example Bind one document.
  #   person.addresses.bind_one(address)
  # @param doc [Document] The single document to bind.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/binding.rb#21
  def bind_one(doc); end

  # Unbind a single document.
  #
  # @example Unbind the document.
  #   person.addresses.unbind_one(document)
  # @param doc [Document] The single document to unbind.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/binding.rb#36
  def unbind_one(doc); end
end

# Builder class for embeds_many associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_many/buildable.rb#9
module Mongoid::Association::Embedded::EmbedsMany::Buildable
  include ::Mongoid::Threaded::Lifecycle
  extend ::Mongoid::Threaded::Lifecycle::ClassMethods

  # Builds the document out of the attributes using the provided
  # association metadata. Instantiates through the factory in order
  # to make sure subclasses and allocation are used if fitting. This
  # case will return many documents.
  #
  # @example Build the documents.
  #   Builder.new(meta, attrs).build
  # @param base [Object] The base object.
  # @param object [Object] The object to use to build the relation.
  # @param type [String] Not used in this context.
  # @return [Array<Document ] The documents.] Array<Document ] The documents.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/buildable.rb#25
  def build(base, object, type = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#8
class Mongoid::Association::Embedded::EmbedsMany::Proxy < ::Mongoid::Association::Many
  include ::Mongoid::Positional
  include ::Mongoid::Association::Embedded::Batchable

  # Instantiate a new embeds_many relation.
  #
  # @example Create the new relation.
  #   Many.new(person, addresses, association)
  # @param base [Document] The document this relation hangs off of.
  # @param target [Array<Document>] The child documents of the relation.
  # @param association [Association] The association metadata
  # @return [Many] The proxy.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#226
  def initialize(base, target, association); end

  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.addresses << address
  # @example Push a document.
  #   person.addresses.push(address)
  # @param args [Document, Array<Document>] Any number of documents.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#21
  def <<(*args); end

  # Get this relation as as its representation in the database.
  #
  # @example Convert the relation to an attributes hash.
  #   person.addresses.as_document
  # @return [Array<Hash>] The relation as stored in the db.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#41
  def as_document; end

  # Builds a new document in the relation and appends it to the target.
  # Takes an optional type if you want to specify a subclass.
  #
  # @example Build a new document on the relation.
  #   person.people.build(:name => "Bozo")
  # @param attributes [Hash] The attributes to build the document with.
  # @param type [Class] Optional class to build the document with.
  # @return [Document] The new document.
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#71
  def build(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Clear the relation. Will delete the documents from the db if they are
  # already persisted.
  #
  # @example Clear the relation.
  #   person.addresses.clear
  # @return [self] The empty relation.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#90
  def clear; end

  # Appends an array of documents to the relation. Performs a batch
  # insert of the documents instead of persisting one at a time.
  #
  # @example Concat with other documents.
  #   person.addresses.concat([ address_one, address_two ])
  # @param docs [Array<Document>] The docs to add.
  # @return [Array<Document>] The documents.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#56
  def concat(docs); end

  # Returns a count of the number of documents in the association that have
  # actually been persisted to the database.
  #
  # Use #size if you want the total number of documents.
  #
  # @example Get the count of persisted documents.
  #   person.addresses.count
  # @return [Integer] The total number of persisted embedded docs, as
  #   flagged by the #persisted? method.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#105
  def count; end

  # Delete the supplied document from the target. This method is proxied
  # in order to reindex the array after the operation occurs.
  #
  # @example Delete the document from the relation.
  #   person.addresses.delete(address)
  # @param document [Document] The document to be deleted.
  # @return [Document, nil] The deleted document or nil if nothing deleted.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#120
  def delete(document); end

  # Delete all the documents in the association without running callbacks.
  #
  # @example Delete all documents from the relation.
  #   person.addresses.delete_all
  # @example Conditionally delete documents from the relation.
  #   person.addresses.delete_all({ :street => "Bond" })
  # @param conditions [Hash] Conditions on which documents to delete.
  # @return [Integer] The number of documents deleted.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#148
  def delete_all(conditions = T.unsafe(nil)); end

  # Delete all the documents for which the provided block returns true.
  #
  # @example Delete the matching documents.
  #   person.addresses.delete_if do |doc|
  #   doc.state == "GA"
  #   end
  # @return [Many, Enumerator] The relation or an enumerator if no
  #   block was provided.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#163
  def delete_if; end

  # Destroy all the documents in the association whilst running callbacks.
  #
  # @example Destroy all documents from the relation.
  #   person.addresses.destroy_all
  # @example Conditionally destroy documents from the relation.
  #   person.addresses.destroy_all({ :street => "Bond" })
  # @param conditions [Hash] Conditions on which documents to destroy.
  # @return [Integer] The number of documents destroyed.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#186
  def destroy_all(conditions = T.unsafe(nil)); end

  # Determine if any documents in this relation exist in the database.
  #
  # @example Are there persisted documents?
  #   person.posts.exists?
  # @return [true, false] True is persisted documents exist, false if not.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#196
  def exists?; end

  # Finds a document in this association through several different
  # methods.
  #
  # @example Find a document by its id.
  #   person.addresses.find(BSON::ObjectId.new)
  # @example Find documents for multiple ids.
  #   person.addresses.find([ BSON::ObjectId.new, BSON::ObjectId.new ])
  # @param args [Array<Object>] Various arguments.
  # @return [Array<Document>, Document] A single or multiple documents.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#212
  def find(*args); end

  # Get all the documents in the relation that are loaded into memory.
  #
  # @example Get the in memory documents.
  #   relation.in_memory
  # @return [Array<Document>] The documents in memory.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#245
  def in_memory; end

  # Builds a new document in the relation and appends it to the target.
  # Takes an optional type if you want to specify a subclass.
  #
  # @example Build a new document on the relation.
  #   person.people.build(:name => "Bozo")
  # @param attributes [Hash] The attributes to build the document with.
  # @param type [Class] Optional class to build the document with.
  # @return [Document] The new document.
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#71
  def new(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Pop documents off the relation. This can be a single document or
  # multiples, and will automatically persist the changes.
  #
  # @example Pop a single document.
  #   relation.pop
  # @example Pop multiple documents.
  #   relation.pop(3)
  # @param count [Integer] The number of documents to pop, or 1 if not
  #   provided.
  # @return [Document, Array<Document>] The popped document(s).
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#264
  def pop(count = T.unsafe(nil)); end

  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.addresses << address
  # @example Push a document.
  #   person.addresses.push(address)
  # @param args [Document, Array<Document>] Any number of documents.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#21
  def push(*args); end

  # Shift documents off the relation. This can be a single document or
  # multiples, and will automatically persist the changes.
  #
  # @example Shift a single document.
  #   relation.shift
  # @example Shift multiple documents.
  #   relation.shift(3)
  # @param count [Integer] The number of documents to shift, or 1 if not
  #   provided.
  # @return [Document, Array<Document>] The shifted document(s).
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#287
  def shift(count = T.unsafe(nil)); end

  # Substitutes the supplied target documents for the existing documents
  # in the relation.
  #
  # @example Substitute the relation's target.
  #   person.addresses.substitute([ address ])
  # @param docs [Array<Document>] The replacement docs.
  # @return [Many] The proxied relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#308
  def substitute(docs); end

  # Return the relation with all previous scoping removed. This is the
  # exact representation of the docs in the database.
  #
  # @example Get the unscoped documents.
  #   person.addresses.unscoped
  # @return [Criteria] The unscoped relation.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#322
  def unscoped; end

  private

  # Get the internal unscoped documents.
  #
  # @example Get the unscoped documents.
  #   relation._unscoped
  # @return [Array<Document>] The unscoped documents.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#495
  def _unscoped; end

  # Set the internal unscoped documents.
  #
  # @example Set the unscoped documents.
  #   relation._unscoped = docs
  # @param docs [Array<Document>] The documents.
  # @return [Array<Document ] The unscoped docs.] Array<Document ] The unscoped docs.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#509
  def _unscoped=(docs); end

  # Appends the document to the target array, updating the index on the
  # document at the same time.
  #
  # @example Append to the document.
  #   relation.append(document)
  # @param document [Document] The document to append to the target.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#344
  def append(document); end

  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#513
  def as_attributes; end

  # Instantiate the binding associated with this relation.
  #
  # @example Create the binding.
  #   relation.binding([ address ])
  # @return [Binding] The many binding.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#363
  def binding; end

  # Returns the +Criteria+ object for the target class with its
  # documents set to the list of target documents in the association.
  #
  # @return [Criteria] A new criteria.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#371
  def criteria; end

  # Deletes one document from the target and unscoped.
  #
  # @api private
  # @example Delete one document.
  #   relation.delete_one(doc)
  # @param document [Document] The document to delete.
  # @since 2.4.7
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#385
  def delete_one(document); end

  # Integrate the document into the relation. will set its metadata and
  # attempt to bind the inverse.
  #
  # @example Integrate the document.
  #   relation.integrate(document)
  # @param document [Document] The document to integrate.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#400
  def integrate(document); end

  # If the target array does not respond to the supplied method then try to
  # find a named scope or criteria on the class and send the call there.
  #
  # If the method exists on the array, use the default proxy behavior.
  #
  # @param name [Symbol, String] The name of the method.
  # @param args [Array] The method args
  # @param block [Proc] Optional block to pass.
  # @return [Criteria, Object] A Criteria or return value from the target.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#415
  def method_missing(name, *args, &block); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#331
  def object_already_related?(document); end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#430
  def persistable?; end

  # Reindex all the target elements. This is useful when performing
  # operations on the proxied target directly and the indices need to
  # match that on the database side.
  #
  # @example Reindex the relation.
  #   person.addresses.reindex
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#442
  def reindex; end

  # Remove all documents from the relation, either with a delete or a
  # destroy depending on what this was called through.
  #
  # @example Destroy documents from the relation.
  #   relation.remove_all({ :num => 1 }, true)
  # @param conditions [Hash] Conditions to filter by.
  # @param method [true, false] :delete or :destroy.
  # @return [Integer] The number of documents removed.
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#480
  def remove_all(conditions = T.unsafe(nil), method = T.unsafe(nil)); end

  # Apply the association ordering and default scoping (defined on
  # association's target class) to the provided documents.
  #
  # @example Apply scoping.
  #   person.addresses.scope(target)
  # @param docs [Array<Document>] The documents to scope.
  # @return [Array<Document>] The scoped docs.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#459
  def scope(docs); end

  class << self
    # Returns true if the relation is an embedded one. In this case
    # always true.
    #
    # @example Is the relation embedded?
    #   Association::Embedded::EmbedsMany.embedded?
    # @return [true] true.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#532
    def embedded?; end

    # Returns the suffix of the foreign key field, either "_id" or "_ids".
    #
    # @example Get the suffix for the foreign key.
    #   Association::Embedded::EmbedsMany.foreign_key_suffix
    # @return [nil] nil.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/association/embedded/embeds_many/proxy.rb#544
    def foreign_key_suffix; end
  end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_many.rb#40
Mongoid::Association::Embedded::EmbedsMany::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The EmbedsOne type association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one/binding.rb#4
class Mongoid::Association::Embedded::EmbedsOne
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Embedded::EmbedsOne::Buildable

  # Is this association type embedded?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#73
  def embedded?; end

  # The key that is used to get the attributes for the associated object.
  #
  # @return [String] The name of the field used to store the relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#64
  def key; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::One] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#135
  def nested_builder(attributes, options); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#112
  def polymorphic?; end

  # The primary key
  #
  # @return [nil] Not relevant for this relation
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#96
  def primary_key; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::Embedded::EmbedsMany::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#103
  def relation; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#43
  def setup!; end

  # The field key used to store the association object.
  #
  # @return [String] The field name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#55
  def store_as; end

  # Does this association type store the foreign key?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#91
  def stores_foreign_key?; end

  # The field used to store the type of the related object.
  #
  # @note Only relevant if the association is polymorphic.
  # @return [String, nil] The field for storing the associated object's type.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#123
  def type; end

  # Get the default validation setting for the relation. Determines if
  # by default a validates associated will occur.
  #
  # @example Get the validation default.
  #   Proxy.validation_default
  # @return [true, false] The validation default.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#84
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#159
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#155
  def polymorphic_inverses(other = T.unsafe(nil)); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#151
  def relation_complements; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#141
  def setup_instance_methods!; end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#22
Mongoid::Association::Embedded::EmbedsOne::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for all embeds_one relations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one/binding.rb#9
class Mongoid::Association::Embedded::EmbedsOne::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds the base object to the inverse of the relation. This is so we
  # are referenced to the actual objects themselves on both sides.
  #
  # This case sets the association metadata on the inverse object as well as the
  # document itself.
  #
  # @example Bind the document.
  #   person.name.bind(:continue => true)
  #   person.name = Name.new
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/binding.rb#23
  def bind_one; end

  # Unbinds the base object and the inverse, caused by setting the
  # reference to nil.
  #
  # @example Unbind the document.
  #   person.name.unbind(:continue => true)
  #   person.name = nil
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/binding.rb#38
  def unbind_one; end
end

# Builder class for embeds_one associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one/buildable.rb#9
module Mongoid::Association::Embedded::EmbedsOne::Buildable
  include ::Mongoid::Threaded::Lifecycle
  extend ::Mongoid::Threaded::Lifecycle::ClassMethods

  # Builds the document out of the attributes using the provided
  # association metadata on the relation. Instantiates through the factory in order
  # to make sure subclasses and allocation are used if fitting.
  #
  # @example Build the document.
  #   Builder.new(meta, attrs).build
  # @param base [Document] The document this relation hangs off of.
  # @param object [Document] The related document.
  # @param _type [String] Not used in this context.
  # @return [Document] A single document.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/buildable.rb#24
  def build(base, object, _type = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#6
class Mongoid::Association::Embedded::EmbedsOne::Proxy < ::Mongoid::Association::One
  # Instantiate a new embeds_one relation.
  #
  # @example Create the new proxy.
  #   One.new(person, name, association)
  # @param base [Document] The document this relation hangs off of.
  # @param target [Document] The child document in the relation.
  # @param association [Association] The association metadata.
  # @return [Proxy] a new instance of Proxy
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#29
  def initialize(base, target, association); end

  # Substitutes the supplied target documents for the existing document
  # in the relation.
  #
  # @example Substitute the new document.
  #   person.name.substitute(new_name)
  # @param replacement [Document] A document to replace the target.
  # @return [Document, nil] The relation or nil.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#50
  def substitute(replacement); end

  private

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding.
  #   relation.binding([ address ])
  # @return [Binding] The relation's binding.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#80
  def binding; end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#92
  def persistable?; end

  class << self
    # Returns true if the relation is an embedded one. In this case
    # always true.
    #
    # @example Is this relation embedded?
    #   Association::Embedded::EmbedsOne.embedded?
    # @return [true] true.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#107
    def embedded?; end

    # Get the path calculator for the supplied document.
    #
    # @example Get the path calculator.
    #   Proxy.path(document)
    # @param document [Document] The document to calculate on.
    # @return [Mongoid::Atomic::Paths::Embedded::One] The embedded one atomic path calculator.
    # @since 2.1.0
    #
    # source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#122
    def path(document); end
  end
end

# The valid options when defining this relation.
#
# @return [Array<Symbol>] The allowed options when defining this relation.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one/proxy.rb#13
Mongoid::Association::Embedded::EmbedsOne::Proxy::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/embedded/embeds_one.rb#36
Mongoid::Association::Embedded::EmbedsOne::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# Map the macros to their corresponding Association classes.
#
# @return [Hash] The mapping from macros to their Association class.
# @since 7.0
#
# source://mongoid//lib/mongoid/association.rb#36
Mongoid::Association::MACRO_MAPPING = T.let(T.unsafe(nil), Hash)

# This module contains the core macros for defining relations between
# documents. They can be either embedded or referenced (relational).
#
# source://mongoid//lib/mongoid/association/macros.rb#7
module Mongoid::Association::Macros
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods

  # This is convenience for libraries still on the old API.
  #
  # @example Get the associations.
  #   person.associations
  # @return [Hash] The relations.
  # @since 2.3.1
  #
  # source://mongoid//lib/mongoid/association/macros.rb#27
  def associations; end

  module GeneratedClassMethods
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end

  module GeneratedInstanceMethods
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end
end

# source://mongoid//lib/mongoid/association/macros.rb#31
module Mongoid::Association::Macros::ClassMethods
  # Adds a relational association from the child Document to a Document in
  # another database or collection.
  #
  # @example Define the relation.
  #
  #   class Game
  #   include Mongoid::Document
  #   belongs_to :person
  #   end
  #
  #   class Person
  #   include Mongoid::Document
  #   has_one :game
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#121
  def belongs_to(name, options = T.unsafe(nil), &block); end

  # Adds the relation back to the parent document. This macro is
  # necessary to set the references from the child back to the parent
  # document. If a child does not define this relation calling
  # persistence methods on the child object will cause a save to fail.
  #
  # @example Define the relation.
  #
  #   class Person
  #   include Mongoid::Document
  #   embeds_many :addresses
  #   end
  #
  #   class Address
  #   include Mongoid::Document
  #   embedded_in :person
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#53
  def embedded_in(name, options = T.unsafe(nil), &block); end

  # Adds the relation from a parent document to its children. The name
  # of the relation needs to be a pluralized form of the child class
  # name.
  #
  # @example Define the relation.
  #
  #   class Person
  #   include Mongoid::Document
  #   embeds_many :addresses
  #   end
  #
  #   class Address
  #   include Mongoid::Document
  #   embedded_in :person
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#76
  def embeds_many(name, options = T.unsafe(nil), &block); end

  # Adds the relation from a parent document to its child. The name
  # of the relation needs to be a singular form of the child class
  # name.
  #
  # @example Define the relation.
  #
  #   class Person
  #   include Mongoid::Document
  #   embeds_one :name
  #   end
  #
  #   class Name
  #   include Mongoid::Document
  #   embedded_in :person
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#99
  def embeds_one(name, options = T.unsafe(nil), &block); end

  # Adds a relational many-to-many association between many of this
  # Document and many of another Document.
  #
  # @example Define the relation.
  #
  #   class Person
  #   include Mongoid::Document
  #   has_and_belongs_to_many :preferences
  #   end
  #
  #   class Preference
  #   include Mongoid::Document
  #   has_and_belongs_to_many :people
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/macros.rb#167
  def has_and_belongs_to_many(name, options = T.unsafe(nil), &block); end

  # Adds a relational association from a parent Document to many
  # Documents in another database or collection.
  #
  # @example Define the relation.
  #
  #   class Person
  #   include Mongoid::Document
  #   has_many :posts
  #   end
  #
  #   class Game
  #   include Mongoid::Document
  #   belongs_to :person
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#143
  def has_many(name, options = T.unsafe(nil), &block); end

  # Adds a relational association from the child Document to a Document in
  # another database or collection.
  #
  # @example Define the relation.
  #
  #   class Game
  #   include Mongoid::Document
  #   belongs_to :person
  #   end
  #
  #   class Person
  #   include Mongoid::Document
  #   has_one :game
  #   end
  # @param name [Symbol] The name of the relation.
  # @param options [Hash] The relation options.
  # @param block [Proc] Optional block for defining extensions.
  #
  # source://mongoid//lib/mongoid/association/macros.rb#189
  def has_one(name, options = T.unsafe(nil), &block); end

  private

  # source://mongoid//lib/mongoid/association/macros.rb#195
  def define_association!(macro_name, name, options = T.unsafe(nil), &block); end
end

# This is the superclass for all many to one and many to many relation
# proxies.
#
# source://mongoid//lib/mongoid/association/many.rb#7
class Mongoid::Association::Many < ::Mongoid::Association::Proxy
  include ::Enumerable

  # source://mongoid//lib/mongoid/association/many.rb#10
  def avg(*_arg0, **_arg1, &_arg2); end

  # Is the relation empty?
  #
  # @example Is the relation empty??
  #   person.addresses.blank?
  # @return [true, false] If the relation is empty or not.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/many.rb#21
  def blank?; end

  # Creates a new document on the references many relation. This will
  # save the document if the parent has been persisted.
  #
  # @example Create and save the new document.
  #   person.posts.create(:text => "Testing")
  # @param attributes [Hash] The attributes to create with.
  # @param type [Class] The optional type of document to create.
  # @return [Document] The newly created document.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/many.rb#38
  def create(attributes = T.unsafe(nil), type = T.unsafe(nil), &block); end

  # Creates a new document on the references many relation. This will
  # save the document if the parent has been persisted and will raise an
  # error if validation fails.
  #
  # @example Create and save the new document.
  #   person.posts.create!(:text => "Testing")
  # @param attributes [Hash] The attributes to create with.
  # @param type [Class] The optional type of document to create.
  # @raise [Errors::Validations] If validation failed.
  # @return [Document] The newly created document.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/many.rb#63
  def create!(attributes = T.unsafe(nil), type = T.unsafe(nil), &block); end

  # Find the first document given the conditions, or creates a new document
  # with the conditions that were supplied.
  #
  #  @param [ Hash ] attrs The attributes to search or create with.
  #  @param [ Class ] type The optional type of document to create.
  #
  # @example Find or create.
  #   person.posts.find_or_create_by(:title => "Testing")
  # @return [Document] An existing document or newly created one.
  #
  # source://mongoid//lib/mongoid/association/many.rb#83
  def find_or_create_by(attrs = T.unsafe(nil), type = T.unsafe(nil), &block); end

  # Find the first document given the conditions, or creates a new document
  # with the conditions that were supplied. This will raise an error if validation fails.
  #
  # @example Find or create.
  #   person.posts.find_or_create_by!(:title => "Testing")
  # @param attrs [Hash] The attributes to search or create with.
  # @param type [Class] The optional type of document to create.
  # @raise [Errors::Validations] If validation failed.
  # @return [Document] An existing document or newly created one.
  #
  # source://mongoid//lib/mongoid/association/many.rb#99
  def find_or_create_by!(attrs = T.unsafe(nil), type = T.unsafe(nil), &block); end

  # Find the first +Document+ given the conditions, or instantiates a new document
  # with the conditions that were supplied
  #
  # @example Find or initialize.
  #   person.posts.find_or_initialize_by(:title => "Test")
  # @param attrs [Hash] The attributes to search or initialize with.
  # @param type [Class] The optional subclass to build.
  # @return [Document] An existing document or newly instantiated one.
  #
  # source://mongoid//lib/mongoid/association/many.rb#113
  def find_or_initialize_by(attrs = T.unsafe(nil), type = T.unsafe(nil), &block); end

  # source://mongoid//lib/mongoid/association/many.rb#11
  def length(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/many.rb#10
  def max(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/many.rb#10
  def min(*_arg0, **_arg1, &_arg2); end

  # This proxy can never be nil.
  #
  # @example Is the proxy nil?
  #   relation.nil?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/many.rb#125
  def nil?; end

  # Since method_missing is overridden we should override this as well.
  #
  # @example Does the proxy respond to the method?
  #   relation.respond_to?(:name)
  # @param name [Symbol] The method name.
  # @param include_private [true, false] Whether to include private methods.
  # @return [true, false] If the proxy responds to the method.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/many.rb#140
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # This is public access to the relation's criteria.
  #
  # @example Get the scoped relation.
  #   relation.scoped
  # @return [Criteria] The scoped criteria.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/many.rb#153
  def scoped; end

  # Gets the document as a serializable hash, used by ActiveModel's JSON and
  # XML serializers. This override is just to be able to pass the :include
  # and :except options to get associations in the hash.
  #
  # @example Get the serializable hash.
  #   relation.serializable_hash
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options to pass.
  # @return [Hash] The documents, ready to be serialized.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/association/many.rb#173
  def serializable_hash(options = T.unsafe(nil)); end

  # source://mongoid//lib/mongoid/association/many.rb#11
  def size(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/many.rb#10
  def sum(*_arg0, **_arg1, &_arg2); end

  # Get a criteria for the embedded documents without the default scoping
  # applied.
  #
  # @example Get the unscoped criteria.
  #   person.addresses.unscoped
  # @return [Criteria] The unscoped criteria.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/many.rb#186
  def unscoped; end

  private

  # source://mongoid//lib/mongoid/association/many.rb#192
  def _session; end

  # Find the first object given the supplied attributes or create/initialize it.
  #
  # @example Find or create|initialize.
  #   person.addresses.find_or(:create, :street => "Bond")
  #
  #   @param [ Symbol ] method The method name, create or new.
  #   @param [ Hash ] attrs The attributes to search or build with.
  #   @param [ Class ] type The optional subclass to build.
  # @return [Document] A matching document or a new/created one.
  #
  # source://mongoid//lib/mongoid/association/many.rb#206
  def find_or(method, attrs = T.unsafe(nil), type = T.unsafe(nil), &block); end
end

# source://mongoid//lib/mongoid/association/marshalable.rb#4
module Mongoid::Association::Marshalable
  # Provides the data needed to Marshal.dump a relation proxy.
  #
  # @example Dump the proxy.
  #   Marshal.dump(proxy)
  # @return [Array<Object>] The dumped data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/association/marshalable.rb#14
  def marshal_dump; end

  # Takes the provided data and sets it back on the proxy.
  #
  # @example Load the proxy.
  #   Marshal.load(proxy)
  # @param data [Array<Object>] The data to set on the proxy.
  # @return [Array<Object>] The loaded data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/association/marshalable.rb#28
  def marshal_load(data); end
end

# source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#3
module Mongoid::Association::Nested; end

# source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#4
module Mongoid::Association::Nested::Buildable
  # Determines if destroys are allowed for this document.
  #
  # @example Do we allow a destroy?
  #   builder.allow_destroy?
  # @return [true, false] True if the allow destroy option was set.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#16
  def allow_destroy?; end

  # Returns the value of attribute association.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def association; end

  # Sets the attribute association
  #
  # @param value the value to set the attribute association to.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def association=(_arg0); end

  # Returns the value of attribute attributes.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def attributes=(_arg0); end

  # Convert an id to its appropriate type.
  #
  # @example Convert the id.
  #   builder.convert_id(Person, "4d371b444835d98b8b000010")
  # @param klass [Class] The class we're trying to convert for.
  # @param id [String] The id, usually coming from the form.
  # @return [BSON::ObjectId, String, Object] The converted id.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#66
  def convert_id(klass, id); end

  # Returns the value of attribute existing.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def existing; end

  # Sets the attribute existing
  #
  # @param value the value to set the attribute existing to.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def existing=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#6
  def options=(_arg0); end

  # Returns the reject if option defined with the macro.
  #
  # @example Is there a reject proc?
  #   builder.reject?
  # @param document [Document] The parent document of the relation
  # @param attrs [Hash] The attributes to check for rejection.
  # @return [true, false] True and call proc or method if rejectable, false if not.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#31
  def reject?(document, attrs); end

  # Determines if only updates can occur. Only valid for one-to-one
  # relations.
  #
  # @example Is this update only?
  #   builder.update_only?
  # @return [true, false] True if the update_only option was set.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/nested/nested_buildable.rb#51
  def update_only?; end
end

# The flags indicating that a relation can be destroyed.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/nested.rb#12
Mongoid::Association::Nested::DESTROY_FLAGS = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/association/nested/many.rb#5
class Mongoid::Association::Nested::Many
  include ::Mongoid::Association::Nested::Buildable

  # Create the new builder for nested attributes on one-to-many
  # relations.
  #
  # @example Initialize the builder.
  #   Many.new(association, attributes, options)
  # @param association [Association] The association metadata.
  # @param attributes [Hash] The attributes hash to attempt to set.
  # @param options [Hash] The options defined.
  # @return [Many] a new instance of Many
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#45
  def initialize(association, attributes, options = T.unsafe(nil)); end

  # Builds the relation depending on the attributes and the options
  # passed to the macro.
  #
  # This attempts to perform 3 operations, either one of an update of
  # the existing relation, a replacement of the relation with a new
  # document, or a removal of the relation.
  #
  # @example Build the nested attrs.
  #   many.build(person)
  # @param parent [Document] The parent document of the relation.
  # @param options [Hash] The options.
  # @return [Array] The attributes.
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#22
  def build(parent, options = T.unsafe(nil)); end

  private

  # Destroy the child document, needs to do some checking for embedded
  # relations and delay the destroy in case parent validation fails.
  #
  # @api private
  # @example Destroy the child.
  #   builder.destroy(parent, relation, doc)
  # @param parent [Document] The parent document.
  # @param relation [Proxy] The relation proxy.
  # @param doc [Document] The doc to destroy.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#121
  def destroy(parent, relation, doc); end

  # Destroy the document.
  #
  # @api private
  # @example Destroy the document.
  #   builder.destroy_document(relation, doc)
  # @param relation [Proxy] The relation proxy.
  # @param doc [Document] The document to delete.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#141
  def destroy_document(relation, doc); end

  # Can the existing relation potentially be deleted?
  #
  # @example Is the document destroyable?
  #   destroyable?({ :_destroy => "1" })
  # @param attributes [Hash] The attributes to pull the flag from.
  # @return [true, false] If the relation can potentially be deleted.
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#68
  def destroyable?(attributes); end

  # Are the supplied attributes of greater number than the supplied
  # limit?
  #
  # @example Are we over the set limit?
  #   builder.over_limit?({ "street" => "Bond" })
  # @param attributes [Hash] The attributes being set.
  # @return [true, false] If the attributes exceed the limit.
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#82
  def over_limit?(attributes); end

  # Process each set of attributes one at a time for each potential
  # new, existing, or ignored document.
  #
  # @api private
  # @example Process the attributes
  #   builder.process_attributes({ "id" => 1, "street" => "Bond" })
  # @param parent [Document] The parent document.
  # @param attrs [Hash] The single document attributes to process.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#99
  def process_attributes(parent, attrs); end

  # Update the document.
  #
  # @api private
  # @example Update the document.
  #   builder.update_document(doc, {}, options)
  # @param doc [Document] The document to update.
  # @param attrs [Hash] The attributes.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#157
  def update_document(doc, attrs); end

  # Update nested relation.
  #
  # @api private
  # @example Update nested relation.
  #   builder.update_nested_relation(parent, id, attrs)
  # @param parent [Document] The parent document.
  # @param id [String, BSON::ObjectId] of the related document.
  # @param attrs [Hash] The single document attributes to process.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/many.rb#178
  def update_nested_relation(parent, id, attrs); end
end

# source://mongoid//lib/mongoid/association/nested/one.rb#5
class Mongoid::Association::Nested::One
  include ::Mongoid::Association::Nested::Buildable

  # Create the new builder for nested attributes on one-to-one
  # relations.
  #
  # @example Instantiate the builder.
  #   One.new(association, attributes)
  # @param association [Association] The association metadata.
  # @param attributes [Hash] The attributes hash to attempt to set.
  # @param options [Hash] The options defined.
  # @return [One] a new instance of One
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#50
  def initialize(association, attributes, options); end

  # Builds the relation depending on the attributes and the options
  # passed to the macro.
  #
  # @example Build a 1-1 nested document.
  #   one.build(person, as: :admin)
  # @note This attempts to perform 3 operations, either one of an update of
  #   the existing relation, a replacement of the relation with a new
  #   document, or a removal of the relation.
  # @param parent [Document] The parent document.
  # @return [Document] The built document.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#26
  def build(parent); end

  # Returns the value of attribute destroy.
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#8
  def destroy; end

  # Sets the attribute destroy
  #
  # @param value the value to set the attribute destroy to.
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#8
  def destroy=(_arg0); end

  private

  # Is the id in the attribtues acceptable for allowing an update to
  # the existing relation?
  #
  # @api private
  # @example Is the id acceptable?
  #   one.acceptable_id?
  # @return [true, false] If the id part of the logic will allow an update.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#71
  def acceptable_id?; end

  # Can the existing relation be deleted?
  #
  # @example Can the existing object be deleted?
  #   one.delete?
  # @return [true, false] If the relation should be deleted.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#84
  def delete?; end

  # Can the existing relation potentially be destroyed?
  #
  # @example Is the object destroyable?
  #   one.destroyable?({ :_destroy => "1" })
  # @return [true, false] If the relation can potentially be
  #   destroyed.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#97
  def destroyable?; end

  # Is the document to be replaced?
  #
  # @example Is the document to be replaced?
  #   one.replace?
  # @return [true, false] If the document should be replaced.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#109
  def replace?; end

  # Should the document be updated?
  #
  # @example Should the document be updated?
  #   one.update?
  # @return [true, false] If the object should have its attributes updated.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/nested/one.rb#121
  def update?; end
end

# This is the superclass for one to one relations and defines the common
# behaviour or those proxies.
#
# source://mongoid//lib/mongoid/association/one.rb#7
class Mongoid::Association::One < ::Mongoid::Association::Proxy
  # Evolve the proxy document into an object id.
  #
  # @example Evolve the proxy document.
  #   proxy.__evolve_object_id__
  # @return [Object] The proxy document's id.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/one.rb#55
  def __evolve_object_id__; end

  # Clear this relation - same as calling #delete on the document.
  #
  # @example Clear the relation.
  #   relation.clear
  # @return [true, false] If the delete suceeded.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/one.rb#17
  def clear; end

  # Get all the documents in the relation that are loaded into memory.
  #
  # @example Get the in memory documents.
  #   relation.in_memory
  # @return [Array<Document>] The documents in memory.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/one.rb#29
  def in_memory; end

  # Since method_missing is overridden we should override this as well.
  #
  # @example Does the proxy respond to the method?
  #   relation.respond_to?(:name)
  # @param name [Symbol] The method name.
  # @return [true, false] If the proxy responds to the method.
  # @since 2.1.8
  #
  # source://mongoid//lib/mongoid/association/one.rb#43
  def respond_to?(name, include_private = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/association/options.rb#4
module Mongoid::Association::Options
  # Returns the name of the parent to a polymorphic child.
  #
  # @return [String, Symbol] The name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#11
  def as; end

  # Whether the association is autobuilding.
  #
  # @return [true, false]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#47
  def autobuilding?; end

  # Options to save any loaded members and destroy members that are marked for destruction
  # when the parent object is saved.
  #
  # @return [true, false] The autosave option.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#85
  def autosave; end

  # Options to save any loaded members and destroy members that are marked for destruction
  # when the parent object is saved.
  #
  # @return [true, false] The autosave option.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#85
  def autosave?; end

  # Whether the relation has callbacks cascaded down from the parent.
  #
  # @return [true, false] Whether callbacks are cascaded.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#111
  def cascading_callbacks?; end

  # Whether the association is counter-cached.
  #
  # @return [true, false]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#95
  def counter_cached?; end

  # Is the relation cyclic.
  #
  # @return [true, false] Whether the relation is cyclic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#56
  def cyclic?; end

  # Specify what happens to the associated object when the owner is destroyed.
  #
  # @return [String] The dependent option.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#20
  def dependent; end

  # Whether the association has forced nil inverse (So no foreign keys are saved).
  #
  # @return [false] Default is false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#127
  def forced_nil_inverse?; end

  # Whether to index the primary or foreign key field.
  #
  # @return [true, false]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#38
  def indexed?; end

  # The name the owning object uses to refer to this relation.
  #
  # @return [String] The inverse_of option.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#65
  def inverse_of; end

  # The custom sorting options on the relation.
  #
  # @return [Criteria::Queryable::Key] The custom sorting options.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#29
  def order; end

  # Whether this association is polymorphic.
  #
  # @return [true, false] Whether the association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#104
  def polymorphic?; end

  # Mongoid assumes that the field used to hold the primary key of the association is id.
  # You can override this and explicitly specify the primary key with the :primary_key option.
  #
  # @return [Symbol, String] The primary key.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#75
  def primary_key; end

  # The store_as option.
  #
  # @return [nil] Default is nil.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#120
  def store_as; end

  # The field for saving the associated object's type.
  #
  # @return [nil] Default is nil.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#141
  def touch_field; end

  # The field for saving the associated object's type.
  #
  # @return [nil] Default is nil.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/options.rb#134
  def type; end

  private

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/association/options.rb#147
  def touchable?; end
end

# This class is the superclass for all relation proxy objects, and contains
# common behaviour for all of them.
#
# source://mongoid//lib/mongoid/association/proxy.rb#9
class Mongoid::Association::Proxy
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Marshalable
  extend ::Mongoid::Threaded::Lifecycle::ClassMethods

  # Returns the value of attribute _association.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#27
  def _association; end

  # Sets the attribute _association
  #
  # @param value the value to set the attribute _association to.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#27
  def _association=(_arg0); end

  # Model instance for the base of the association.
  #
  # For example, if a Post embeds_many Comments, _base is a particular
  # instance of the Post model.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#25
  def _base; end

  # Model instance for the base of the association.
  #
  # For example, if a Post embeds_many Comments, _base is a particular
  # instance of the Post model.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#25
  def _base=(_arg0); end

  # Model instance for one to one associations, or array of model instances
  # for one to many associations, for the target of the association.
  #
  # For example, if a Post embeds_many Comments, _target is an array of
  # Comment models embedded in a particular Post.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#34
  def _target; end

  # Model instance for one to one associations, or array of model instances
  # for one to many associations, for the target of the association.
  #
  # For example, if a Post embeds_many Comments, _target is an array of
  # Comment models embedded in a particular Post.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#34
  def _target=(_arg0); end

  # source://mongoid//lib/mongoid/association/proxy.rb#38
  def bind_one(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/proxy.rb#39
  def collection_name(*_arg0, **_arg1, &_arg2); end

  # Allow extension to be an array and extend each module
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#59
  def extend_proxies(*extension); end

  def extend_proxy(*_arg0); end

  # source://mongoid//lib/mongoid/association/proxy.rb#37
  def foreign_key(*_arg0, **_arg1, &_arg2); end

  # Convenience for setting the target and the association metadata properties since
  # all proxies will need to do this.
  #
  # @example Initialize the proxy.
  #   proxy.init(person, name, association)
  # @param base [Document] The base document on the proxy.
  # @param target [Document, Array<Document>] The target of the proxy.
  # @param association [Association] The association metadata.
  # @since 2.0.0.rc.1
  # @yield [_self]
  # @yieldparam _self [Mongoid::Association::Proxy] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#52
  def init(base, target, association); end

  # source://mongoid//lib/mongoid/association/proxy.rb#37
  def inverse_foreign_key(*_arg0, **_arg1, &_arg2); end

  # Get the class from the association, or return nil if no association present.
  #
  # @example Get the class.
  #   proxy.klass
  # @return [Class] The relation class.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#71
  def klass; end

  # Resets the criteria inside the relation proxy. Used by many to many
  # relations to keep the underlying ids array in sync.
  #
  # @example Reset the relation criteria.
  #   person.preferences.reset_relation_criteria
  # @since 3.0.14
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#82
  def reset_unloaded; end

  # The default substitutable object for a relation proxy is the clone of
  # the target.
  #
  # @example Get the substitutable.
  #   proxy.substitutable
  # @return [Object] A clone of the target.
  # @since 2.1.6
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#95
  def substitutable; end

  # source://mongoid//lib/mongoid/association/proxy.rb#38
  def unbind_one(*_arg0, **_arg1, &_arg2); end

  protected

  # Takes the supplied document and sets the association on it.
  #
  # @example Set the association metadata.
  #   proxt.characterize_one(name)
  # @param document [Document] The document to set on.
  # @since 2.0.0.rc.4
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#122
  def characterize_one(document); end

  # Get the collection from the root of the hierarchy.
  #
  # @example Get the collection.
  #   relation.collection
  # @return [Collection] The root's collection.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#109
  def collection; end

  # Executes a callback method
  #
  # @example execute the before add callback
  #   execute_callback(:before_add)
  # @param callback [Symbol] to be executed
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#172
  def execute_callback(callback, doc); end

  # Default behavior of method missing should be to delegate all calls
  # to the target of the proxy. This can be overridden in special cases.
  #
  # @param name [String, Symbol] The name of the method.
  # @param args [Array] The arguments passed to the method.
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#132
  def method_missing(name, *args, &block); end

  # When the base document illegally references an embedded document this
  # error will get raised.
  #
  # @example Raise the error.
  #   relation.raise_mixed
  # @raise [Errors::MixedRelations] The error.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#145
  def raise_mixed; end

  # When the base is not yet saved and the user calls create or create!
  # on the relation, this error will get raised.
  #
  # @example Raise the error.
  #   relation.raise_unsaved(post)
  # @param doc [Document] The child document getting created.
  # @raise [Errors::UnsavedDocument] The error.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/association/proxy.rb#160
  def raise_unsaved(doc); end

  class << self
    # Apply ordering to the criteria if it was defined on the relation.
    #
    # @example Apply the ordering.
    #   Proxy.apply_ordering(criteria, association)
    # @param criteria [Criteria] The criteria to modify.
    # @param association [Association] The association metadata.
    # @return [Criteria] The ordered criteria.
    # @since 3.0.6
    #
    # source://mongoid//lib/mongoid/association/proxy.rb#195
    def apply_ordering(criteria, association); end
  end
end

# source://mongoid//lib/mongoid/association/referenced/eager.rb#4
module Mongoid::Association::Referenced; end

# source://mongoid//lib/mongoid/association/referenced/auto_save.rb#5
module Mongoid::Association::Referenced::AutoSave
  extend ::ActiveSupport::Concern

  # Begin the associated autosave.
  #
  # @example Begin autosave.
  #   document.__autosaving__
  # @since 3.1.3
  #
  # source://mongoid//lib/mongoid/association/referenced/auto_save.rb#26
  def __autosaving__; end

  # Used to prevent infinite loops in associated autosaves.
  #
  # @example Is the document autosaved?
  #   document.autosaved?
  # @return [true, false] Has the document already been autosaved?
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/auto_save.rb#16
  def autosaved?; end

  # Check if there is changes for auto-saving
  #
  #   document.changed_for_autosave?
  #
  # @example Return true if there is changes on self or in
  #   autosaved relations.
  # @return [Boolean]
  # @since 3.1.3
  #
  # source://mongoid//lib/mongoid/association/referenced/auto_save.rb#40
  def changed_for_autosave?(doc); end

  class << self
    # Define the autosave method on an association's owning class for
    # an associated object.
    #
    # @example Define the autosave method:
    #   Association::Referenced::Autosave.define_autosave!(association)
    # @param association [Association] The association for which autosaving is enabled.
    # @return [Class] The association's owner class.
    # @since 7.0
    #
    # source://mongoid//lib/mongoid/association/referenced/auto_save.rb#55
    def define_autosave!(association); end
  end
end

# The BelongsTo type association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to/binding.rb#5
class Mongoid::Association::Referenced::BelongsTo
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Association::Referenced::BelongsTo::Buildable

  # Is this association type embedded?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#91
  def embedded?; end

  # Get the foreign key field for saving the association reference.
  #
  # @return [String] The foreign key field for saving the association reference.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#105
  def foreign_key; end

  # The name of the field used to store the type of polymorphic relation.
  #
  # @return [String] The field used to store the type of polymorphic relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#133
  def inverse_type; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::One] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#145
  def nested_builder(attributes, options); end

  # Get the path calculator for the supplied document.
  #
  # @example Get the path calculator.
  #   association.path(document)
  # @param document [Document] The document to calculate on.
  # @return [Root] The root atomic path calculator.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#159
  def path(document); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#124
  def polymorphic?; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::BelongsTo::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#115
  def relation; end

  # The list of association complements.
  #
  # @return [Array<Association>] The association complements.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#64
  def relation_complements; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#73
  def setup!; end

  # Does this association type store the foreign key?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#84
  def stores_foreign_key?; end

  # The default for validation the association object.
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#98
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#235
  def create_foreign_key_field!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#194
  def default_foreign_key_field; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#190
  def default_primary_key; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#216
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#182
  def index_spec; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#198
  def polymorph!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#205
  def polymorphic_inverses(other = T.unsafe(nil)); end

  # If set to true, then the associated object will be validated when this object is saved
  #
  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#229
  def require_association?; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#165
  def setup_instance_methods!; end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#23
Mongoid::Association::Referenced::BelongsTo::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for belongs_to associations.
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to/binding.rb#8
class Mongoid::Association::Referenced::BelongsTo::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds the base object to the inverse of the relation. This is so we
  # are referenced to the actual objects themselves on both sides.
  #
  # This case sets the association on the inverse object as well as the
  # document itself.
  #
  # @example Bind the documents.
  #   game.person.bind(:continue => true)
  #   game.person = Person.new
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/binding.rb#22
  def bind_one; end

  # Unbinds the base object and the inverse, caused by setting the
  # reference to nil.
  #
  # @example Unbind the document.
  #   game.person.unbind(:continue => true)
  #   game.person = nil
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/binding.rb#47
  def unbind_one; end

  private

  # Check for problems with multiple inverse definitions.
  #
  # @api private
  # @example Check for inverses errors.
  #   binding.check_inverses!(doc)
  # @param doc [Document] The document to check.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/binding.rb#75
  def check_polymorphic_inverses!(doc); end
end

# The Builder behavior for belongs_to associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to/buildable.rb#10
module Mongoid::Association::Referenced::BelongsTo::Buildable
  # This method either takes an _id or an object and queries for the
  # inverse side using the id or sets the object.
  #
  # @example Build the document.
  #   relation.build(meta, attrs)
  # @param base [Object] The base object.
  # @param object [Object] The object to use to build the relation.
  # @param type [String] The type of the relation.
  # @return [Document] A single document.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/buildable.rb#23
  def build(base, object, type = T.unsafe(nil)); end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/buildable.rb#30
  def execute_query(object, type); end

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/buildable.rb#39
  def query?(object); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/buildable.rb#34
  def query_criteria(object, type); end
end

# Eager class for belongs_to associations.
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to/eager.rb#8
class Mongoid::Association::Referenced::BelongsTo::Eager < ::Mongoid::Association::Referenced::Eager::Base
  private

  # source://mongoid//lib/mongoid/association/referenced/belongs_to/eager.rb#25
  def group_by_key; end

  # source://mongoid//lib/mongoid/association/referenced/belongs_to/eager.rb#29
  def key; end

  # @raise [Errors::EagerLoad]
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/eager.rb#12
  def preload; end
end

# The type of the field holding the foreign key.
#
# @return [Object]
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#50
Mongoid::Association::Referenced::BelongsTo::FOREIGN_KEY_FIELD_TYPE = Object

# The default foreign key suffix.
#
# @return [String] '_id'
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#57
Mongoid::Association::Referenced::BelongsTo::FOREIGN_KEY_SUFFIX = T.let(T.unsafe(nil), String)

# This class handles all behaviour for relations that are either
# one-to-many or one-to-one, where the foreign key is stored on this side
# of the relation and the reference is to document(s) in another
# collection.
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#11
class Mongoid::Association::Referenced::BelongsTo::Proxy < ::Mongoid::Association::One
  include ::Mongoid::Evolvable

  # Instantiate a new belongs_to association proxy.
  #
  # @example Create the new proxy.
  #   Association::BelongsTo::Proxy.new(game, person, association)
  # @param base [Document] The document this relation hangs off of.
  # @param target [Document, Array<Document>] The target (parent) of the
  #   relation.
  # @param association [Association] The association object.
  # @return [Proxy] a new instance of Proxy
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#23
  def initialize(base, target, association); end

  # Removes the association between the base document and the target
  # document by deleting the foreign key and the reference, orphaning
  # the target document in the process.
  #
  # @example Nullify the relation.
  #   person.game.nullify
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#37
  def nullify; end

  # Substitutes the supplied target documents for the existing document
  # in the relation.
  #
  # @example Substitute the relation.
  #   name.substitute(new_name)
  # @param replacement [Document, Array<Document>] The replacement.
  # @return [self, nil] The relation or nil.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#53
  def substitute(replacement); end

  private

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding object.
  #   binding([ address ])
  # @return [Binding] The binding object.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#72
  def binding; end

  # Normalize the value provided as a replacement for substitution.
  #
  # @api private
  # @example Normalize the substitute.
  #   proxy.normalize(id)
  # @param replacement [Document, Object] The replacement object.
  # @return [Document] The document.
  # @since 3.1.5
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#88
  def normalize(replacement); end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#101
  def persistable?; end

  class << self
    # Get the Eager object for this type of association.
    #
    # @example Get the eager loader object
    # @param association [Association] The association object.
    # @param docs [Array<Document>] The array of documents.
    # @since 7.0
    #
    # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#115
    def eager_loader(association, docs); end

    # Returns true if the relation is an embedded one. In this case
    # always false.
    #
    # @example Is this relation embedded?
    #   Association::BelongsTo::Proxy.embedded?
    # @return [false] Always false.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/referenced/belongs_to/proxy.rb#128
    def embedded?; end
  end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/belongs_to.rb#43
Mongoid::Association::Referenced::BelongsTo::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#5
module Mongoid::Association::Referenced::CounterCache
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods

  # Reset the given counter using the .count() query from the
  # db. This method is usuful in case that a counter got
  # corrupted, or a new counter was added to the collection.
  #
  # @example Reset the given counter cache
  #   post.reset_counters(:comments)
  # @param counters [Symbol, Array] One or more counter caches to reset
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#18
  def reset_counters(*counters); end

  class << self
    # Add the callbacks responsible for update the counter cache field.
    #
    # @api private
    # @example Add the touchable.
    #   Mongoid::Association::Referenced::CounterCache.define_callbacks!(association)
    # @param association [Association] The association.
    # @return [Class] The association's owning class.
    # @since 7.0
    #
    # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#105
    def define_callbacks!(association); end
  end
end

# source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#24
module Mongoid::Association::Referenced::CounterCache::ClassMethods
  # Decrement the counter name from the entries that match the
  # id by one. This method is used on associations callbacks
  # when counter_cache is enabled
  #
  # @example Decrement comments counter
  #   Post.decrement_counter(:comments_count, '50e0edd97c71c17ea9000001')
  # @param counter_name [Symbol] Counter cache name
  # @param id [String] The id of the object that will have its counter decremented.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#88
  def decrement_counter(counter_name, id); end

  # Increment the counter name from the entries that match the
  # id by one. This method is used on associations callbacks
  # when counter_cache is enabled
  #
  # @example Increment comments counter
  #   Post.increment_counter(:comments_count, '50e0edd97c71c17ea9000001')
  # @param counter_name [Symbol] Counter cache name
  # @param id [String] The id of the object that will have its counter incremented.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#73
  def increment_counter(counter_name, id); end

  # Reset the given counter using the .count() query from the
  # db. This method is usuful in case that a counter got
  # corrupted, or a new counter was added to the collection.
  #
  # @example Reset the given counter cache
  #   Post.reset_counters('50e0edd97c71c17ea9000001', :comments)
  # @param id [String] The id of the object that will be reset.
  # @param counters [Symbol, Array] One or more counter caches to reset
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#37
  def reset_counters(id, *counters); end

  # Update the given counters by the value factor. It uses the
  # atomic $inc command.
  #
  # @example Add 5 to comments counter and remove 2 from likes
  #   counter.
  #   Post.update_counters('50e0edd97c71c17ea9000001',
  #   :comments_count => 5, :likes_count => -2)
  # @param id [String] The id of the object to update.
  # @param counters [Hash]
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/counter_cache.rb#58
  def update_counters(id, counters); end
end

# source://mongoid//lib/mongoid/association/referenced/eager.rb#5
module Mongoid::Association::Referenced::Eager; end

# Base class for eager load preload functions.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/association/referenced/eager.rb#10
class Mongoid::Association::Referenced::Eager::Base
  # Instantiate the eager load class.
  #
  # @example Create the new belongs to eager load preloader.
  #   BelongsTo.new(association, parent_docs)
  # @param associations [Array<Association>] Associations to eager load
  # @param docs [Array<Document>] Documents to preload the relations
  # @return [Base] The eager load preloader
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#23
  def initialize(associations, docs); end

  # Run the preloader.
  #
  # @example Preload the relations into the documents.
  #   loader.run
  # @return [Array] The list of documents given.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#37
  def run; end

  protected

  # Run the preloader.
  #
  # @example Iterate over the documents loaded for the current relation
  #   loader.each_loaded_document { |doc| }
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#66
  def each_loaded_document; end

  # Return the key to group the current documents.
  #
  # This method should be implemented in the subclass
  #
  # @example Return the key for group
  #   loader.group_by_key
  # @raise [NotImplementedError]
  # @return [Symbol] Key to group by the current documents.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#128
  def group_by_key; end

  # Return a hash with the current documents grouped by key.
  #
  # @example Return a hash with the current documents grouped by key.
  #   loader.grouped_docs
  # @return [Hash] hash with grouped documents.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#100
  def grouped_docs; end

  # Group the documents and return the keys
  #
  # @example
  #   loader.keys_from_docs
  # @return [Array] keys, ids
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#114
  def keys_from_docs; end

  # Preload the current relation.
  #
  # This method should be implemented in the subclass
  #
  # @example Preload the current relation into the documents.
  #   loader.preload
  # @raise [NotImplementedError]
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#56
  def preload; end

  # Set the pre-loaded document into its parent.
  #
  # @example Set docs into parent with pk = "foo"
  #   loader.set_on_parent("foo", docs)
  # @param id [ObjectId] parent`s id
  # @param element [Document, Array] to push into the parent
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#86
  def set_on_parent(id, element); end

  # Set the pre-loaded document into its parent.
  #
  # @example Set docs into parent using the current relation name.
  #   loader.set_relation(doc, docs)
  # @param doc [Document] The object to set the relation on
  # @param element [Document, Array] to set into the parent
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#141
  def set_relation(doc, element); end

  private

  # Shift the current association metadata
  #
  # @example Shift the current association.
  #   loader.shift_association
  # @return [Association] The association object.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/eager.rb#155
  def shift_association; end
end

# The HasAndBelongsToMany type association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#5
class Mongoid::Association::Referenced::HasAndBelongsToMany
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Association::Referenced::HasAndBelongsToMany::Buildable

  # Whether trying to bind an object using this association should raise
  # an error.
  #
  # @param doc [Document] The document to be bound.
  # @return [true, false] Whether the document can be bound.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#156
  def bindable?(doc); end

  # The criteria used for querying this relation.
  #
  # @return [Mongoid::Criteria] The criteria used for querying this relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#132
  def criteria(base, id_list = T.unsafe(nil)); end

  # Is this association type embedded?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#83
  def embedded?; end

  # Are ids only saved on this side of the relation?
  #
  # @return [true, false] Whether this association has a forced nil inverse.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#97
  def forced_nil_inverse?; end

  # Get the foreign key field for saving the association reference.
  #
  # @return [String] The foreign key field for saving the association reference.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#122
  def foreign_key; end

  # Get the foreign key field on the inverse.
  #
  # @return [String] The foreign key field for saving the association reference
  #   on the inverse side.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#142
  def inverse_foreign_key; end

  # Get the foreign key setter on the inverse.
  #
  # @return [String] The foreign key setter for saving the association reference
  #   on the inverse side.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#166
  def inverse_foreign_key_setter; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::One] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#178
  def nested_builder(attributes, options); end

  # Get the path calculator for the supplied document.
  #
  # @example Get the path calculator.
  #   association.path(document)
  # @param document [Document] The document to calculate on.
  # @return [Root] The root atomic path calculator.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#192
  def path(document); end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::HasAndBelongsToMany::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#113
  def relation; end

  # The list of association complements.
  #
  # @return [Array<Association>] The association complements.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#64
  def relation_complements; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#73
  def setup!; end

  # Does this association type store the foreign key?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#106
  def stores_foreign_key?; end

  # The default for validation the association object.
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#90
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#252
  def create_foreign_key_field!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#220
  def default_foreign_key_field; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#216
  def default_primary_key; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#263
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#212
  def index_spec; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#283
  def query_criteria(id_list); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#198
  def setup_instance_methods!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#224
  def setup_syncing!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#231
  def synced_destroy; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#241
  def synced_save; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#275
  def with_ordering(criteria); end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#23
Mongoid::Association::Referenced::HasAndBelongsToMany::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for all has_and_belongs_to_many relations.
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#8
class Mongoid::Association::Referenced::HasAndBelongsToMany::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds a single document with the inverse relation. Used
  # specifically when appending to the proxy.
  #
  # @example Bind one document.
  #   person.preferences.bind_one(preference)
  # @param doc [Document] The single document to bind.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#20
  def bind_one(doc); end

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#64
  def determine_inverse_association(doc); end

  # Find the inverse id referenced by inverse_keys
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#55
  def inverse_record_id(doc); end

  # Unbind a single document.
  #
  # @example Unbind the document.
  #   person.preferences.unbind_one(document)
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/binding.rb#41
  def unbind_one(doc); end
end

# The Builder behavior for has_and_belongs_to_many associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/buildable.rb#10
module Mongoid::Association::Referenced::HasAndBelongsToMany::Buildable
  # This builder either takes a hash and queries for the
  # object or an array of documents, where it will just return them.
  #
  # @example Build the documents.
  #   relation.build(association, attrs)
  # @param base [Object] The base object.
  # @param object [Object] The object to use to build the relation.
  # @param type [String] Not used in this context.
  # @return [Array<Document>] The documents.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/buildable.rb#23
  def build(base, object, type = T.unsafe(nil)); end

  private

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/buildable.rb#33
  def query?(object); end
end

# Eager class for has_and_belongs_to_many associations.
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#8
class Mongoid::Association::Referenced::HasAndBelongsToMany::Eager < ::Mongoid::Association::Referenced::Eager::Base
  private

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#41
  def group_by_key; end

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#45
  def key; end

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#29
  def keys_from_docs; end

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#12
  def preload; end

  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/eager.rb#37
  def set_relation(doc, element); end
end

# The type of the field holding the foreign key.
#
# @return [Array]
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#50
Mongoid::Association::Referenced::HasAndBelongsToMany::FOREIGN_KEY_FIELD_TYPE = Array

# The default foreign key suffix.
#
# @return [String] '_ids'
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#57
Mongoid::Association::Referenced::HasAndBelongsToMany::FOREIGN_KEY_SUFFIX = T.let(T.unsafe(nil), String)

# This class defines the behaviour for all relations that are a
# many-to-many between documents in different collections.
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#9
class Mongoid::Association::Referenced::HasAndBelongsToMany::Proxy < ::Mongoid::Association::Referenced::HasMany::Proxy
  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.posts << post
  # @example Push a document.
  #   person.posts.push(post)
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param args [Document, Array<Document>] Any number of documents.
  # @return [Array<Document>] The loaded docs.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#28
  def <<(*args); end

  # Build a new document from the attributes and append it to this
  # relation without saving.
  #
  # @example Build a new document on the relation.
  #   person.posts.build(:title => "A new post")
  # @param attributes [Hash] The attributes of the new document.
  # @param type [Class] The optional subclass to build.
  # @return [Document] The new document.
  # @since 2.0.0.beta.1
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#88
  def build(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.preferences.nullify
  # @param replacement [Array<Document>] The replacement documents.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#132
  def clear(replacement = T.unsafe(nil)); end

  # Appends an array of documents to the relation. Performs a batch
  # insert of the documents instead of persisting one at a time.
  #
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param documents [Array<Document>] The docs to add.
  # @return [Array<Document>] The documents.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#54
  def concat(documents); end

  # Delete the document from the relation. This will set the foreign key
  # on the document to nil. If the dependent options on the relation are
  # :delete or :destroy the appropriate removal will occur.
  #
  # @example Delete the document.
  #   person.posts.delete(post)
  # @param document [Document] The document to remove.
  # @return [Document] The matching document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#112
  def delete(document); end

  # Build a new document from the attributes and append it to this
  # relation without saving.
  #
  # @example Build a new document on the relation.
  #   person.posts.build(:title => "A new post")
  # @param attributes [Hash] The attributes of the new document.
  # @param type [Class] The optional subclass to build.
  # @return [Document] The new document.
  # @since 2.0.0.beta.1
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#88
  def new(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.preferences.nullify
  # @param replacement [Array<Document>] The replacement documents.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#132
  def nullify(replacement = T.unsafe(nil)); end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.preferences.nullify
  # @param replacement [Array<Document>] The replacement documents.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#132
  def nullify_all(replacement = T.unsafe(nil)); end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.preferences.nullify
  # @param replacement [Array<Document>] The replacement documents.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#132
  def purge(replacement = T.unsafe(nil)); end

  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.posts << post
  # @example Push a document.
  #   person.posts.push(post)
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param args [Document, Array<Document>] Any number of documents.
  # @return [Array<Document>] The loaded docs.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#28
  def push(*args); end

  # Substitutes the supplied target documents for the existing documents
  # in the relation. If the new target is nil, perform the necessary
  # deletion.
  #
  # person.preferences.substitute([ new_post ])
  #
  # @example Replace the relation.
  # @param replacement [Array<Document>] The replacement target.
  # @return [Many] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#181
  def substitute(replacement); end

  # Get a criteria for the documents without the default scoping
  # applied.
  #
  # @example Get the unscoped criteria.
  #   person.preferences.unscoped
  # @return [Criteria] The unscoped criteria.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#200
  def unscoped; end

  private

  # Appends the document to the target array, updating the index on the
  # document at the same time.
  #
  # @example Append the document to the relation.
  #   relation.append(document)
  # @param document [Document] The document to append to the target.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#215
  def append(document); end

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding.
  #   relation.binding([ address ])
  # @return [Binding] The binding.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#231
  def binding; end

  # Determine if the child document should be persisted.
  #
  # @api private
  # @example Is the child persistable?
  #   relation.child_persistable?(doc)
  # @param doc [Document] The document.
  # @return [true, false] If the document can be persisted.
  # @since 3.0.20
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#247
  def child_persistable?(doc); end

  # Returns the criteria object for the target class with its documents set
  # to target.
  #
  # @example Get a criteria for the relation.
  #   relation.criteria
  # @return [Criteria] A new criteria.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#259
  def criteria(id_list = T.unsafe(nil)); end

  # Flag the base as unsynced with respect to the foreign key.
  #
  # @api private
  # @example Flag as unsynced.
  #   relation.unsynced(doc, :preference_ids)
  # @param doc [Document] The document to flag.
  # @param key [Symbol] The key to flag on the document.
  # @return [true] true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#276
  def unsynced(doc, key); end

  class << self
    # Get the Eager object for this type of association.
    #
    # @example Get the eager loader object
    # @param association [Association] The association object.
    # @param docs [Array<Document>] The array of documents.
    # @since 7.0
    #
    # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#291
    def eager_loader(association, docs); end

    # Returns true if the relation is an embedded one. In this case
    # always false.
    #
    # @example Is this relation embedded?
    #   Referenced::ManyToMany.embedded?
    # @return [false] Always false.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many/proxy.rb#304
    def embedded?; end
  end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_and_belongs_to_many.rb#43
Mongoid::Association::Referenced::HasAndBelongsToMany::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The has_many association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_many/binding.rb#5
class Mongoid::Association::Referenced::HasMany
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Association::Referenced::HasMany::Buildable

  # Add polymorphic query criteria to a Criteria object, if this association is
  #  polymorphic.
  #
  # @param criteria [Mongoid::Criteria] The criteria object to add to.
  # @param object_class [Class] The object class.
  # @return [Mongoid::Criteria] The criteria object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#160
  def add_polymorphic_criterion(criteria, object_class); end

  # Whether trying to bind an object using this association should raise
  # an error.
  #
  # @param doc [Document] The document to be bound.
  # @return [true, false] Whether the document can be bound.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#183
  def bindable?(doc); end

  # The criteria used for querying this relation.
  #
  # @return [Mongoid::Criteria] The criteria used for querying this relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#136
  def criteria(base); end

  # Is this association type embedded?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#106
  def embedded?; end

  # Get the foreign key field on the inverse for saving the association reference.
  #
  # @return [String] The foreign key field on the inverse for saving the
  #   association reference.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#96
  def foreign_key; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::Many] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#195
  def nested_builder(attributes, options); end

  # Get the path calculator for the supplied document.
  #
  # @example Get the path calculator.
  #   Proxy.path(document)
  # @param document [Document] The document to calculate on.
  # @return [Root] The root atomic path calculator.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#209
  def path(document); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#173
  def polymorphic?; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::HasMany::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#127
  def relation; end

  # The list of association complements.
  #
  # @return [Array<Association>] The association complements.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#57
  def relation_complements; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#66
  def setup!; end

  # Setup the instance methods on the class having this association type.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#76
  def setup_instance_methods!; end

  # Does this association type store the foreign key?
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#120
  def stores_foreign_key?; end

  # The type of this association if it's polymorphic.
  #
  # @note Only relevant for polymorphic relations.
  # @return [String, nil] The type field.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#147
  def type; end

  # The default for validation the association object.
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#113
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#215
  def default_foreign_key_field; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#236
  def default_primary_key; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#223
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#219
  def polymorphic_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#240
  def query_criteria(object, base); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#264
  def with_inverse_field_criterion(criteria); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#256
  def with_ordering(criteria); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many.rb#248
  def with_polymorphic_criterion(criteria, base); end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_many.rb#24
Mongoid::Association::Referenced::HasMany::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for has_many associations.
#
# source://mongoid//lib/mongoid/association/referenced/has_many/binding.rb#8
class Mongoid::Association::Referenced::HasMany::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds a single document with the inverse relation. Used
  # specifically when appending to the proxy.
  #
  # @example Bind one document.
  #   person.posts.bind_one(post)
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/binding.rb#18
  def bind_one(doc); end

  # Unbind a single document.
  #
  # @example Unbind the document.
  #   person.posts.unbind_one(document)
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/binding.rb#30
  def unbind_one(doc); end
end

# The Builder behavior for has_many associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_many/buildable.rb#10
module Mongoid::Association::Referenced::HasMany::Buildable
  # This method either takes an _id or an object and queries for the
  # inverse side using the id or sets the object.
  #
  # @example Build the document.
  #   relation.build(meta, attrs)
  # @param base [Object] The base object.
  # @param object [Object] The object to use to build the relation.
  # @param type [String] The type of document to query for.
  # @return [Document] A single document.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/buildable.rb#23
  def build(base, object, type = T.unsafe(nil)); end

  private

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/buildable.rb#31
  def query?(object); end
end

# Eager class for has_many associations.
#
# source://mongoid//lib/mongoid/association/referenced/has_many/eager.rb#8
class Mongoid::Association::Referenced::HasMany::Eager < ::Mongoid::Association::Referenced::Eager::Base
  private

  # source://mongoid//lib/mongoid/association/referenced/has_many/eager.rb#32
  def group_by_key; end

  # source://mongoid//lib/mongoid/association/referenced/has_many/eager.rb#36
  def key; end

  # source://mongoid//lib/mongoid/association/referenced/has_many/eager.rb#12
  def preload; end

  # source://mongoid//lib/mongoid/association/referenced/has_many/eager.rb#28
  def set_relation(doc, element); end
end

# The default foreign key suffix.
#
# @return [String] '_id'
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_many.rb#50
Mongoid::Association::Referenced::HasMany::FOREIGN_KEY_SUFFIX = T.let(T.unsafe(nil), String)

# This class defines the behaviour for all relations that are a
# one-to-many between documents in different collections.
#
# source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#9
class Mongoid::Association::Referenced::HasMany::Proxy < ::Mongoid::Association::Many
  # Instantiate a new references_many relation. Will set the foreign key
  # and the base on the inverse object.
  #
  # @example Create the new relation.
  #   Referenced::Many.new(base, target, association)
  # @param base [Document] The document this relation hangs off of.
  # @param target [Array<Document>] The target of the relation.
  # @param association [Association] The association metadata.
  # @return [Proxy] a new instance of Proxy
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#212
  def initialize(base, target, association); end

  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.posts << post
  # @example Push a document.
  #   person.posts.push(post)
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param args [Document, Array<Document>] Any number of documents.
  # @return [Array<Document>] The loaded docs.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#31
  def <<(*args); end

  # Build a new document from the attributes and append it to this
  # relation without saving.
  #
  # @example Build a new document on the relation.
  #   person.posts.build(:title => "A new post")
  # @param attributes [Hash] The attributes of the new document.
  # @param type [Class] The optional subclass to build.
  # @return [Document] The new document.
  # @since 2.0.0.beta.1
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#77
  def build(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Clear the relation. Will delete the documents from the db if they are
  # already persisted.
  #
  # @example Clear the relation.
  #   person.posts.clear
  # @return [Many] The relation emptied.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#246
  def clear; end

  # Appends an array of documents to the relation. Performs a batch
  # insert of the documents instead of persisting one at a time.
  #
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param documents [Array<Document>] The docs to add.
  # @return [Array<Document>] The documents.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#54
  def concat(documents); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#11
  def count(*_arg0, **_arg1, &_arg2); end

  # Delete the document from the relation. This will set the foreign key
  # on the document to nil. If the dependent options on the relation are
  # :delete or :destroy the appropriate removal will occur.
  #
  # @example Delete the document.
  #   person.posts.delete(post)
  # @param document [Document] The document to remove.
  # @return [Document] The matching document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#100
  def delete(document); end

  # Deletes all related documents from the database given the supplied
  # conditions.
  #
  # @example Delete all documents in the relation.
  #   person.posts.delete_all
  # @example Conditonally delete all documents in the relation.
  #   person.posts.delete_all({ :title => "Testing" })
  # @param conditions [Hash] Optional conditions to delete with.
  # @return [Integer] The number of documents deleted.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#125
  def delete_all(conditions = T.unsafe(nil)); end

  # Destroys all related documents from the database given the supplied
  # conditions.
  #
  # @example Destroy all documents in the relation.
  #   person.posts.destroy_all
  # @example Conditonally destroy all documents in the relation.
  #   person.posts.destroy_all({ :title => "Testing" })
  # @param conditions [Hash] Optional conditions to destroy with.
  # @return [Integer] The number of documents destroyd.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#143
  def destroy_all(conditions = T.unsafe(nil)); end

  # Iterate over each document in the relation and yield to the provided
  # block.
  #
  # @example Iterate over the documents.
  #   person.posts.each do |post|
  #   post.save
  #   end
  # @note This will load the entire relation into memory.
  # @return [Array<Document>] The loaded docs.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#160
  def each; end

  # Determine if any documents in this relation exist in the database.
  #
  # @example Are there persisted documents?
  #   person.posts.exists?
  # @return [true, false] True is persisted documents exist, false if not.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#174
  def exists?; end

  # Find the matchind document on the association, either based on id or
  # conditions.
  #
  # @example Find by an id.
  #   person.posts.find(BSON::ObjectId.new)
  # @example Find by multiple ids.
  #   person.posts.find([ BSON::ObjectId.new, BSON::ObjectId.new ])
  # @note This will keep matching documents in memory for iteration
  #   later.
  # @param args [BSON::ObjectId, Array<BSON::ObjectId>] The ids.
  # @return [Document, Criteria] The matching document(s).
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#195
  def find(*args); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#12
  def first(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#12
  def in_memory(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#12
  def last(*_arg0, **_arg1, &_arg2); end

  # Build a new document from the attributes and append it to this
  # relation without saving.
  #
  # @example Build a new document on the relation.
  #   person.posts.build(:title => "A new post")
  # @param attributes [Hash] The attributes of the new document.
  # @param type [Class] The optional subclass to build.
  # @return [Document] The new document.
  # @since 2.0.0.beta.1
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#77
  def new(attributes = T.unsafe(nil), type = T.unsafe(nil)); end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.posts.nullify
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#227
  def nullify; end

  # Removes all associations between the base document and the target
  # documents by deleting the foreign keys and the references, orphaning
  # the target documents in the process.
  #
  # @example Nullify the relation.
  #   person.posts.nullify
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#227
  def nullify_all; end

  # Clear the relation. Will delete the documents from the db if they are
  # already persisted.
  #
  # @example Clear the relation.
  #   person.posts.clear
  # @return [Many] The relation emptied.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#246
  def purge; end

  # Appends a document or array of documents to the relation. Will set
  # the parent and update the index in the process.
  #
  # @example Append a document.
  #   person.posts << post
  # @example Push a document.
  #   person.posts.push(post)
  # @example Concat with other documents.
  #   person.posts.concat([ post_one, post_two ])
  # @param args [Document, Array<Document>] Any number of documents.
  # @return [Array<Document>] The loaded docs.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#31
  def push(*args); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#12
  def reset(*_arg0, **_arg1, &_arg2); end

  # Substitutes the supplied target documents for the existing documents
  # in the relation. If the new target is nil, perform the necessary
  # deletion.
  #
  # @example Replace the relation.
  #   person.posts.substitute([ new_post ])
  # @param replacement [Array<Document>] The replacement target.
  # @return [Many] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#281
  def substitute(replacement); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#12
  def uniq(*_arg0, **_arg1, &_arg2); end

  # Get a criteria for the documents without the default scoping
  # applied.
  #
  # @example Get the unscoped criteria.
  #   person.posts.unscoped
  # @return [Criteria] The unscoped criteria.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#305
  def unscoped; end

  private

  # Whether the document and the base already have a persisted relation.
  #
  # @example Is the document already related to the base.
  #   relation.already_related?(document)
  # @param document [Document] The document to possibly append to the target.
  # @return [true, false] Whether the document is already related to the base and the
  #   relation is persisted.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#356
  def already_related?(document); end

  # Appends the document to the target array, updating the index on the
  # document at the same time.
  #
  # @example Append the document to the relation.
  #   relation.append(document)
  # @param document [Document] The document to append to the target.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#320
  def append(document); end

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding.
  #   relation.binding([ address ])
  # @return [Binding] The binding.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#371
  def binding; end

  # Perform the necessary cascade operations for documents that just got
  # deleted or nullified.
  #
  # @example Cascade the change.
  #   relation.cascade!(document)
  # @param document [Document] The document to cascade on.
  # @return [true, false] If the association is destructive.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#411
  def cascade!(document); end

  # Get the collection of the relation in question.
  #
  # @example Get the collection of the relation.
  #   relation.collection
  # @return [Collection] The collection of the relation.
  # @since 2.0.2
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#383
  def collection; end

  # Returns the criteria object for the target class with its documents set
  # to target.
  #
  # @example Get a criteria for the relation.
  #   relation.criteria
  # @return [Criteria] A new criteria.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#396
  def criteria; end

  # If the target array does not respond to the supplied method then try to
  # find a named scope or criteria on the class and send the call there.
  #
  # If the method exists on the array, use the default proxy behavior.
  #
  # @param name [Symbol, String] The name of the method.
  # @param args [Array] The method args
  # @param block [Proc] Optional block to pass.
  # @return [Criteria, Object] A Criteria or return value from the target.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#436
  def method_missing(name, *args, &block); end

  # Persist all the delayed batch inserts.
  #
  # @api private
  # @example Persist the delayed batch inserts.
  #   relation.persist_delayed([ doc ])
  # @param docs [Array<Document>] The delayed inserts.
  # @param inserts [Array<Hash>] The raw insert document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#457
  def persist_delayed(docs, inserts); end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#476
  def persistable?; end

  # Deletes all related documents from the database given the supplied
  # conditions.
  #
  # @example Delete all documents in the relation.
  #   person.posts.delete_all
  # @example Conditonally delete all documents in the relation.
  #   person.posts.delete_all({ :title => "Testing" })
  # @param conditions [Hash] Optional conditions to delete with.
  # @param method [Symbol] The deletion method to call.
  # @return [Integer] The number of documents deleted.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#495
  def remove_all(conditions = T.unsafe(nil), method = T.unsafe(nil)); end

  # Remove all the documents in the proxy that do not have the provided
  # ids.
  #
  # @example Remove all documents without the ids.
  #   proxy.remove_not_in([ id ])
  # @param ids [Array<Object>] The ids.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#515
  def remove_not_in(ids); end

  # Save a persisted document immediately or delay a new document for
  # batch insert.
  #
  # @api private
  # @example Save or delay the document.
  #   relation.save_or_delay(doc, [])
  # @param doc [Document] The document.
  # @param inserts [Array<Document>] The inserts.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#545
  def save_or_delay(doc, docs, inserts); end

  # Execute before/after add callbacks around the block unless the objects
  # already have a persisted relation.
  #
  # @example Execute before/after add callbacks around the block.
  #   relation.with_add_callbacks(document, false)
  # @param document [Document] The document to append to the target.
  # @param already_related [true, false] Whether the document is already related
  #   to the target.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#339
  def with_add_callbacks(document, already_related); end

  class << self
    # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#557
    def eager_loader(association, docs); end

    # Returns true if the relation is an embedded one. In this case
    # always false.
    #
    # @example Is this relation embedded?
    #   Referenced::Many.embedded?
    # @return [false] Always false.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/referenced/has_many/proxy.rb#570
    def embedded?; end
  end
end

# source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#6
module Mongoid::Association::Referenced::HasMany::Targets; end

# This class is the wrapper for all relational associations that have a
# target that can be a criteria or array of _loaded documents. This
# handles both cases or a combination of the two.
#
# source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#11
class Mongoid::Association::Referenced::HasMany::Targets::Enumerable
  include ::Enumerable

  # Initialize the new enumerable either with a criteria or an array.
  #
  # @example Initialize the enumerable with a criteria.
  #   Enumberable.new(Post.where(:person_id => id))
  # @example Initialize the enumerable with an array.
  #   Enumerable.new([ post ])
  # @param target [Criteria, Array<Document>] The wrapped object.
  # @return [Enumerable] a new instance of Enumerable
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#253
  def initialize(target, base = T.unsafe(nil), association = T.unsafe(nil)); end

  # Append a document to the enumerable.
  #
  # @example Append the document.
  #   enumerable << document
  # @param document [Document] The document to append.
  # @return [Document] The document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#63
  def <<(document); end

  # Check if the enumerable is equal to the other object.
  #
  # @example Check equality.
  #   enumerable == []
  # @param other [Enumerable] The other enumerable.
  # @return [true, false] If the objects are equal.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#33
  def ==(other); end

  # Check equality of the enumerable against the provided object for case
  # statements.
  #
  # @example Check case equality.
  #   enumerable === Array
  # @param other [Object] The object to check.
  # @return [true, false] If the objects are equal in a case.
  # @since 3.1.4
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#49
  def ===(other); end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _added; end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _added=(_arg0); end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _loaded; end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _loaded=(_arg0); end

  # Has the enumerable been _loaded? This will be true if the criteria has
  # been executed or we manually load the entire thing.
  #
  # @example Is the enumerable _loaded?
  #   enumerable._loaded?
  # @return [true, false] If the enumerable has been _loaded.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#358
  def _loaded?; end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _unloaded; end

  # The three main instance variables are collections of documents.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#19
  def _unloaded=(_arg0); end

  # Send #as_json to the entries, without encoding.
  #
  # @example Get the enumerable as json.
  #   enumerable.as_json
  # @param options [Hash] Optional parameters.
  # @return [Hash] The entries all _loaded as a hash.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#472
  def as_json(options = T.unsafe(nil)); end

  # Clears out all the documents in this enumerable. If passed a block it
  # will yield to each document that is in memory.
  #
  # @example Clear out the enumerable.
  #   enumerable.clear
  # @example Clear out the enumerable with a block.
  #   enumerable.clear do |doc|
  #   doc.unbind
  #   end
  # @return [Array<Document>] The cleared out _added docs.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#84
  def clear; end

  # Clones each document in the enumerable.
  #
  # @example Clone the enumerable.
  #   enumerable.clone
  # @note This loads all documents into memory.
  # @return [Array<Document>] An array clone of the enumerable.
  # @since 2.1.6
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#101
  def clone; end

  # Delete the supplied document from the enumerable.
  #
  # @example Delete the document.
  #   enumerable.delete(document)
  # @param document [Document] The document to delete.
  # @return [Document] The deleted document.
  # @since 2.1.0
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#115
  def delete(document); end

  # Deletes every document in the enumerable for where the block returns
  # true.
  #
  # @example Delete all matching documents.
  #   enumerable.delete_if do |doc|
  #   dod._id == _id
  #   end
  # @note This operation loads all documents from the database.
  # @return [Array<Document>] The remaining docs.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#140
  def delete_if(&block); end

  # Iterating over this enumerable has to handle a few different
  # scenarios.
  #
  # If the enumerable has its criteria _loaded into memory then it yields
  # to all the _loaded docs and all the _added docs.
  #
  # If the enumerable has not _loaded the criteria then it iterates over
  # the cursor while loading the documents and then iterates over the
  # _added docs.
  #
  # If no block is passed then it returns an enumerator containing all
  # docs.
  #
  # @example Iterate over the enumerable.
  #   enumerable.each do |doc|
  #   puts doc
  #   end
  # @example return an enumerator containing all the docs
  #
  #   a = enumerable.each
  # @return [true] That the enumerable is now _loaded.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#175
  def each; end

  # Is the enumerable empty? Will determine if the count is zero based on
  # whether or not it is _loaded.
  #
  # @example Is the enumerable empty?
  #   enumerable.empty?
  # @return [true, false] If the enumerable is empty.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#208
  def empty?; end

  # Get the first document in the enumerable. Will check the persisted
  # documents first. Does not load the entire enumerable.
  #
  # @example Get the first document.
  #   enumerable.first
  # @note Automatically adding a sort on _id when no other sort is
  #   defined on the criteria has the potential to cause bad performance issues.
  #   If you experience unexpected poor performance when using #first or #last,
  #   use the option { id_sort: :none }.
  #   Be aware that #first/#last won't guarantee order in this case.
  # @option opts
  # @param opts [Hash] The options for the query returning the first document.
  # @return [Document] The first document found.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#235
  def first(opts = T.unsafe(nil)); end

  # Return all the documents in the enumerable that have been _loaded or
  # _added.
  #
  # @example Get the in memory docs.
  #   enumerable.in_memory
  # @note When passed a block it yields to each document.
  # @return [Array<Document>] The in memory docs.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#306
  def in_memory; end

  # Does the target include the provided document?
  #
  # @example Does the target include the document?
  #   enumerable.include?(document)
  # @param doc [Document] The document to check.
  # @return [true, false] If the document is in the target.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#277
  def include?(doc); end

  # Inspection will just inspect the entries for nice array-style
  # printing.
  #
  # @example Inspect the enumerable.
  #   enumerable.inspect
  # @return [String] The inspected enum.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#291
  def inspect; end

  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#21
  def is_a?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#21
  def kind_of?(*_arg0, **_arg1, &_arg2); end

  # Get the last document in the enumerable. Will check the new
  # documents first. Does not load the entire enumerable.
  #
  # @example Get the last document.
  #   enumerable.last
  # @note Automatically adding a sort on _id when no other sort is
  #   defined on the criteria has the potential to cause bad performance issues.
  #   If you experience unexpected poor performance when using #first or #last,
  #   use the option { id_sort: :none }.
  #   Be aware that #first/#last won't guarantee order in this case.
  # @option opts
  # @param opts [Hash] The options for the query returning the first document.
  # @return [Document] The last document found.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#332
  def last(opts = T.unsafe(nil)); end

  # Gets the total size of this enumerable. This is a combination of all
  # the persisted and unpersisted documents.
  #
  # @example Get the size.
  #   enumerable.size
  # @return [Integer] The size of the enumerable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#437
  def length; end

  # Loads all the documents in the enumerable from the database.
  #
  # @example Load all the documents.
  #   enumerable.load_all!
  # @return [true] That the enumerable is _loaded.
  # @since 2.1.0
  def load_all!(*_arg0); end

  # Provides the data needed to Marshal.dump an enumerable proxy.
  #
  # @example Dump the proxy.
  #   Marshal.dump(proxy)
  # @return [Array<Object>] The dumped data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#370
  def marshal_dump; end

  # Loads the data needed to Marshal.load an enumerable proxy.
  #
  # @example Load the proxy.
  #   Marshal.load(proxy)
  # @return [Array<Object>] The dumped data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#382
  def marshal_load(data); end

  # Append a document to the enumerable.
  #
  # @example Append the document.
  #   enumerable << document
  # @param document [Document] The document to append.
  # @return [Document] The document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#63
  def push(document); end

  # Reset the enumerable back to its persisted state.
  #
  # @example Reset the enumerable.
  #   enumerable.reset
  # @return [false] Always false.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#394
  def reset; end

  # Resets the underlying unloaded criteria object with a new one. Used
  # my HABTM relations to keep the underlying array in sync.
  #
  # @example Reset the unloaded documents.
  #   enumerable.reset_unloaded(criteria)
  # @param criteria [Criteria] The criteria to replace with.
  # @since 3.0.14
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#408
  def reset_unloaded(criteria); end

  # Does this enumerable respond to the provided method?
  #
  # @example Does the enumerable respond to the method?
  #   enumerable.respond_to?(:sum)
  # @param name [String, Symbol] The name of the method.
  # @param include_private [true, false] Whether to include private
  #   methods.
  # @return [true, false] Whether the enumerable responds.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#424
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # Gets the total size of this enumerable. This is a combination of all
  # the persisted and unpersisted documents.
  #
  # @example Get the size.
  #   enumerable.size
  # @return [Integer] The size of the enumerable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#437
  def size; end

  # Send #to_json to the entries.
  #
  # @example Get the enumerable as json.
  #   enumerable.to_json
  # @param options [Hash] Optional parameters.
  # @return [String] The entries all _loaded as a string.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#458
  def to_json(options = T.unsafe(nil)); end

  # Return all the unique documents in the enumerable.
  #
  # @example Get all the unique documents.
  #   enumerable.uniq
  # @note This operation loads all documents from the database.
  # @return [Array<Document>] The unique documents.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#486
  def uniq; end

  private

  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#498
  def method_missing(name, *args, &block); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#492
  def set_base(document); end

  # source://mongoid//lib/mongoid/association/referenced/has_many/enumerable.rb#502
  def unloaded_documents; end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_many.rb#43
Mongoid::Association::Referenced::HasMany::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The has_one association.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one/binding.rb#5
class Mongoid::Association::Referenced::HasOne
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options
  include ::Mongoid::Association::Relatable
  include ::Mongoid::Association::Referenced::HasOne::Buildable

  # Whether trying to bind an object using this association should raise
  # an error.
  #
  # @param doc [Document] The document to be bound.
  # @return [true, false] Whether the document can be bound.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#138
  def bindable?(doc); end

  # Is this association type embedded?
  #
  # @return [false] Always false.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#82
  def embedded?; end

  # Get the foreign key field for saving the association reference.
  #
  # @return [String] The foreign key field for saving the
  #   association reference.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#72
  def foreign_key; end

  # The nested builder object.
  #
  # @param attributes [Hash] The attributes to use to build the association object.
  # @param options [Hash] The options for the association.
  # @return [Association::Nested::Many] The Nested Builder object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#108
  def nested_builder(attributes, options); end

  # Get the path calculator for the supplied document.
  #
  # @example Get the path calculator.
  #   Proxy.path(document)
  # @param document [Document] The document to calculate on.
  # @return [Root] The root atomic path calculator.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#154
  def path(document); end

  # Is this association polymorphic?
  #
  # @return [true, false] Whether this association is polymorphic.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#117
  def polymorphic?; end

  # Get the relation proxy class for this association type.
  #
  # @return [Association::HasOne::Proxy] The proxy class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#96
  def relation; end

  # The list of association complements.
  #
  # @return [Array<Association>] The association complements.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#52
  def relation_complements; end

  # Setup the instance methods, fields, etc. on the association owning class.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#61
  def setup!; end

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#142
  def stores_foreign_key?; end

  # The type of this association if it's polymorphic.
  #
  # @note Only relevant for polymorphic relations.
  # @return [String, nil] The type field.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#128
  def type; end

  # The default for validation the association object.
  #
  # @return [true] Always true.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#89
  def validation_default; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#178
  def default_foreign_key_field; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#198
  def default_primary_key; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#186
  def determine_inverses(other); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#182
  def polymorphic_inverses(other); end

  # Setup the instance methods on the class having this association type.
  #
  # @return [self]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one.rb#165
  def setup_instance_methods!; end
end

# The options available for this type of association, in addition to the
# common ones.
#
# @return [Array<Symbol>] The extra valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one.rb#23
Mongoid::Association::Referenced::HasOne::ASSOCIATION_OPTIONS = T.let(T.unsafe(nil), Array)

# Binding class for has_one relations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one/binding.rb#10
class Mongoid::Association::Referenced::HasOne::Binding
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Association::Bindable

  # Binds the base object to the inverse of the relation. This is so we
  # are referenced to the actual objects themselves on both sides.
  #
  # This case sets the association metadata on the inverse object as well as the
  # document itself.
  #
  # @example Bind the document.
  #   person.game.bind(:continue => true)
  #   person.game = Game.new
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/binding.rb#24
  def bind_one; end

  # Unbinds the base object and the inverse, caused by setting the
  # reference to nil.
  #
  # @example Unbind the document.
  #   person.game.unbind(:continue => true)
  #   person.game = nil
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/binding.rb#38
  def unbind_one; end
end

# The Builder behavior for has_one associations.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#10
module Mongoid::Association::Referenced::HasOne::Buildable
  # This method either takes an _id or an object and queries for the
  # inverse side using the id or sets the object after clearing the
  # associated object.
  #
  # @return [Document] A single document.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#17
  def build(base, object, type = T.unsafe(nil)); end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#30
  def clear_associated(object); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#41
  def execute_query(object, base); end

  # @return [Boolean]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#53
  def query?(object); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#36
  def query_criteria(object, base); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/buildable.rb#45
  def with_polymorphic_criterion(criteria, base); end
end

# source://mongoid//lib/mongoid/association/referenced/has_one/eager.rb#8
class Mongoid::Association::Referenced::HasOne::Eager < ::Mongoid::Association::Referenced::Eager::Base
  private

  # source://mongoid//lib/mongoid/association/referenced/has_one/eager.rb#23
  def group_by_key; end

  # source://mongoid//lib/mongoid/association/referenced/has_one/eager.rb#27
  def key; end

  # source://mongoid//lib/mongoid/association/referenced/has_one/eager.rb#12
  def preload; end
end

# The default foreign key suffix.
#
# @return [String] '_id'
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one.rb#45
Mongoid::Association::Referenced::HasOne::FOREIGN_KEY_SUFFIX = T.let(T.unsafe(nil), String)

# This class defines the behaviour for all relations that are a
# one-to-one between documents in different collections.
#
# source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#9
class Mongoid::Association::Referenced::HasOne::Proxy < ::Mongoid::Association::One
  # Instantiate a new references_one relation. Will set the foreign key
  # and the base on the inverse object.
  #
  # @example Create the new relation.
  #   Referenced::One.new(base, target, association)
  # @param base [Document] The document this relation hangs off of.
  # @param target [Document] The target (child) of the relation.
  # @param association [Association] The association metadata.
  # @return [Proxy] a new instance of Proxy
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#20
  def initialize(base, target, association); end

  # Removes the association between the base document and the target
  # document by deleting the foreign key and the reference, orphaning
  # the target document in the process.
  #
  # @example Nullify the relation.
  #   person.game.nullify
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#37
  def nullify; end

  # Substitutes the supplied target document for the existing document
  # in the relation. If the new target is nil, perform the necessary
  # deletion.
  #
  # @example Replace the relation.
  #   person.game.substitute(new_game)
  # @param replacement [Array<Document>] The replacement target.
  # @return [One] The relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#54
  def substitute(replacement); end

  private

  # Instantiate the binding associated with this relation.
  #
  # @example Get the binding.
  #   relation.binding([ address ])
  # @return [Binding] The binding object.
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#74
  def binding; end

  # Are we able to persist this relation?
  #
  # @example Can we persist the relation?
  #   relation.persistable?
  # @return [true, false] If the relation is persistable.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#86
  def persistable?; end

  class << self
    # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#92
    def eager_loader(association, docs); end

    # Returns true if the relation is an embedded one. In this case
    # always false.
    #
    # @example Is this relation embedded?
    #   Referenced::One.embedded?
    # @return [false] Always false.
    # @since 2.0.0.rc.1
    #
    # source://mongoid//lib/mongoid/association/referenced/has_one/proxy.rb#105
    def embedded?; end
  end
end

# The complete list of valid options for this association, including
# the shared ones.
#
# @return [Array<Symbol>] The valid options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/referenced/has_one.rb#38
Mongoid::Association::Referenced::HasOne::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# This module handles the behaviour for synchronizing foreign keys between
# both sides of a many to many relations.
#
# source://mongoid//lib/mongoid/association/referenced/syncable.rb#8
module Mongoid::Association::Referenced::Syncable
  # Is the document able to be synced on the inverse side? This is only if
  # the key has changed and the relation bindings have not been run.
  #
  # @example Are the foreign keys syncable?
  #   document._syncable?(association)
  # @param association [Association] The association metadata.
  # @return [true, false] If we can sync.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#21
  def _syncable?(association); end

  # Get the synced foreign keys.
  #
  # @example Get the synced foreign keys.
  #   document._synced
  # @return [Hash] The synced foreign keys.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#33
  def _synced; end

  # Has the document been synced for the foreign key?
  #
  # @example Has the document been synced?
  #   document._synced?
  # @param foreign_key [String] The foreign key.
  # @return [true, false] If we can sync.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#47
  def _synced?(foreign_key); end

  # Update the inverse keys on destroy.
  #
  # @example Update the inverse keys.
  #   document.remove_inverse_keys(association)
  # @param association [Association] The association.
  # @return [Object] The updated values.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#61
  def remove_inverse_keys(association); end

  # Update the inverse keys for the relation.
  #
  # @example Update the inverse keys
  #   document.update_inverse_keys(association)
  # @param association [Association] The document association.
  # @return [Object] The updated values.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#78
  def update_inverse_keys(association); end
end

# source://mongoid//lib/mongoid/association/referenced/syncable.rb#103
module Mongoid::Association::Referenced::Syncable::ClassMethods
  # Set up the syncing of many to many foreign keys.
  #
  # @example Set up the syncing.
  #   Person._synced(association)
  # @param association [Association] The association metadata.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#113
  def _synced(association); end

  private

  # Set up the sync of inverse keys that needs to happen on a destroy.
  #
  # @example Set up the destroy syncing.
  #   Person.synced_destroy(association)
  # @param association [Association] The association metadata.
  # @return [Class] The class getting set up.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#157
  def synced_destroy(association); end

  # Set up the sync of inverse keys that needs to happen on a save.
  #
  # If the foreign key field has changed and the document is not
  # synced, $addToSet the new ids, $pull the ones no longer in the
  # array from the inverse side.
  #
  # @example Set up the save syncing.
  #   Person.synced_save(association)
  # @param association [Association] The relation association.
  # @return [Class] The class getting set up.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/association/referenced/syncable.rb#136
  def synced_save(association); end
end

# The reflections module provides convenience methods that can retrieve
# useful information about associations.
#
# source://mongoid//lib/mongoid/association/reflections.rb#7
module Mongoid::Association::Reflections
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods

  # Returns all association metadata for the supplied macros.
  #
  # @example Find multiple association metadata by macro.
  #   person.reflect_on_all_associations(:embeds_many)
  # @param macros [Array<Symbol>] The relation macros.
  # @return [Array<Association>] The matching association metadata.
  #
  # source://mongoid//lib/mongoid/association/reflections.rb#30
  def reflect_on_all_association(*macros); end

  # Returns the association metadata for the supplied name.
  #
  # @example Find relation association by name.
  #   person.reflect_on_association(:addresses)
  # @param name [String, Symbol] The name of the relation to find.
  # @return [Association] The matching association metadata.
  #
  # source://mongoid//lib/mongoid/association/reflections.rb#18
  def reflect_on_association(name); end
end

# source://mongoid//lib/mongoid/association/reflections.rb#34
module Mongoid::Association::Reflections::ClassMethods
  # Returns all association metadata for the supplied macros.
  #
  # @example Find multiple association metadata by macro.
  #   Person.reflect_on_all_associations(:embeds_many)
  # @param macros [Array<Symbol>] The relation macros.
  # @return [Array<Association>] The matching association metadata.
  #
  # source://mongoid//lib/mongoid/association/reflections.rb#56
  def reflect_on_all_associations(*macros); end

  # Returns the association metadata for the supplied name.
  #
  # @example Find association metadata by name.
  #   Person.reflect_on_association(:addresses)
  # @param name [String, Symbol] The name of the relation to find.
  # @return [Association] The matching association metadata.
  #
  # source://mongoid//lib/mongoid/association/reflections.rb#44
  def reflect_on_association(name); end
end

# This module provides behaviors shared between Association types.
#
# @since 7.0
#
# source://mongoid//lib/mongoid/association/relatable.rb#10
module Mongoid::Association::Relatable
  include ::Mongoid::Association::Constrainable
  include ::Mongoid::Association::Options

  # Initialize the Association.
  #
  # @param _class [Class] The class of the model who owns this relation.
  # @param name [Symbol] The name of the association.
  # @param opts [Hash] The relation options.
  # @param block [Block] The optional block.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#55
  def initialize(_class, name, opts = T.unsafe(nil), &block); end

  # Compare this association to another.
  #
  # @return [Object] The object to compare to this association.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#73
  def ==(other); end

  # Whether trying to bind an object using this association should raise
  # an error.
  #
  # @param doc [Document] The document to be bound.
  # @return [true, false] Whether the document can be bound.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#110
  def bindable?(doc); end

  # The class name, possibly unqualified or :: prefixed, of the association
  # object(s).
  #
  # This method returns the class name as it is used in the association
  # definition. If :class_name option is given in the association, the
  # exact value of that option is returned here. If :class_name option is
  # not given, the name of the class is calculated from association name
  # but is not resolved to the actual class.
  #
  # The class name returned by this method may not correspond to a defined
  # class, either because the corresponding class has not been loaded yet,
  # or because the association references a non-existent class altogether.
  # To obtain the association class, use +relation_class+ method.
  #
  # @note The return value of this method should not be used to determine
  #   whether two associations have the same target class, because the
  #   return value is not always a fully qualified class name. To compare
  #   classes, retrieve the class instance of the association target using
  #   the +relation_class+ method.
  # @return [String] The association objects' class name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#171
  def class_name; end

  # Get the counter cache column name.
  #
  # @return [String] The counter cache column name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#319
  def counter_cache_column_name; end

  # Create a relation proxy object using the owner and target.
  #
  # @param owner [Document] The document this relation hangs off of.
  # @param target [Document, Array<Document>] The target (parent) of the
  #   relation.
  # @return [Proxy]
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#301
  def create_relation(owner, target); end

  # Whether the dependent method is destructive.
  #
  # @return [true, false] If the dependent method is destructive.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#310
  def destructive?; end

  # Get the extension.
  #
  # @return [Module] The extension module, if one has been defined.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#330
  def extension; end

  # Get the name of the method to check if the foreign key has changed.
  #
  # @example Get the foreign key check method.
  #   association.foreign_key_check
  # @return [String] The foreign key check.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#288
  def foreign_key_check; end

  # The name of the foreign key setter method.
  #
  # @return [String] The name of the foreign key setter.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#252
  def foreign_key_setter; end

  # Get the callbacks for a given type.
  #
  # @param callback_type [Symbol] The type of callback type.
  # @return [Array<Proc, Symbol>] A list of the callbacks, either method
  #   names or Procs.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#88
  def get_callbacks(callback_type); end

  # Get the inverse name.
  #
  # @return [Symbol] The inverse name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#339
  def inverse(other = T.unsafe(nil)); end

  # Get the inverse's association metadata.
  #
  # @param other [Object] The other model class or model object to use when
  #   determining inverses.
  # @return [Association] The inverse's association metadata.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#137
  def inverse_association(other = T.unsafe(nil)); end

  # The class of the object owning this relation.
  #
  # @return [String] The owning objects' class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#214
  def inverse_class; end

  # The class name of the object owning this relation.
  #
  # @return [String] The owning objects' class name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#205
  def inverse_class_name; end

  # The class of the object owning this relation.
  #
  # @return [String] The owning objects' class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#214
  def inverse_klass; end

  # The name of the inverse setter method.
  #
  # @return [String] The name of the inverse setter.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#243
  def inverse_setter(other = T.unsafe(nil)); end

  # Get the inverse type.
  #
  # @return [nil] Default is nil for an association.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#146
  def inverse_type; end

  # Gets the setter for the field that sets the type of document on a
  # polymorphic relation.
  #
  # @example Get the inverse type setter.
  #   association.inverse_type_setter
  # @return [String] The name of the setter.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#276
  def inverse_type_setter; end

  # Get the inverse names.
  #
  # @param other [Object] The other model class or model object to use when
  #   determining inverses.
  # @return [Array<Symbol>] The list of inverse names.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#120
  def inverses(other = T.unsafe(nil)); end

  # The foreign key field if this relation stores a foreign key.
  # Otherwise, the primary key.
  #
  # @return [Symbol, String] The primary key.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#225
  def key; end

  # The class of the relation object(s).
  #
  # This method returns the class instance corresponding to
  # +relation_class_name+, resolved relative to the host document class.
  #
  # If the class does not exist, this method raises NameError. This can
  # happen because the target class has not yet been defined. Note that
  # polymorphic associations generally do not have a well defined target
  # class because the target class can change from one object to another,
  # and calling this method on a polymorphic association will generally
  # fail with a NameError or produce misleading results (if a class does
  # happen to be defined with the same name as the association name).
  #
  # @return [String] The association objects' class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#192
  def klass; end

  # The name of the association.
  #
  # @return [Symbol] The name of the relation.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#38
  def name; end

  # The options on this association.
  #
  # @return [Hash] The options.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#45
  def options; end

  # The atomic path for this relation.
  #
  # @return [Mongoid::Atomic::Paths::Root] The atomic path object.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#263
  def path(document); end

  # The class of the relation object(s).
  #
  # This method returns the class instance corresponding to
  # +relation_class_name+, resolved relative to the host document class.
  #
  # If the class does not exist, this method raises NameError. This can
  # happen because the target class has not yet been defined. Note that
  # polymorphic associations generally do not have a well defined target
  # class because the target class can change from one object to another,
  # and calling this method on a polymorphic association will generally
  # fail with a NameError or produce misleading results (if a class does
  # happen to be defined with the same name as the association name).
  #
  # @return [String] The association objects' class.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#192
  def relation_class; end

  # The class name, possibly unqualified or :: prefixed, of the association
  # object(s).
  #
  # This method returns the class name as it is used in the association
  # definition. If :class_name option is given in the association, the
  # exact value of that option is returned here. If :class_name option is
  # not given, the name of the class is calculated from association name
  # but is not resolved to the actual class.
  #
  # The class name returned by this method may not correspond to a defined
  # class, either because the corresponding class has not been loaded yet,
  # or because the association references a non-existent class altogether.
  # To obtain the association class, use +relation_class+ method.
  #
  # @note The return value of this method should not be used to determine
  #   whether two associations have the same target class, because the
  #   return value is not always a fully qualified class name. To compare
  #   classes, retrieve the class instance of the association target using
  #   the +relation_class+ method.
  # @return [String] The association objects' class name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#171
  def relation_class_name; end

  # The name of the setter on this object for assigning an associated object.
  #
  # @return [String] The setter name.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#234
  def setter; end

  # Get the type setter.
  #
  # @note Only relevant for polymorphic relations that take the :as option.
  # @return [String] The type setter method.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#98
  def type_setter; end

  # Whether the associated object(s) should be validated.
  #
  # @return [true, false] If the associated object(s)
  #   should be validated.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#350
  def validate?; end

  private

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#442
  def create_extension!(&block); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#452
  def default_inverse; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#376
  def define_autosaver!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#382
  def define_builder!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#410
  def define_counter_cache_callbacks!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#386
  def define_creator!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#416
  def define_dependency!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#398
  def define_existence_check!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#390
  def define_getter!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#402
  def define_ids_getter!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#406
  def define_ids_setter!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#394
  def define_setter!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#370
  def define_touchable!; end

  # Gets the model classes with inverse associations of this model. This is used to determine
  # the classes on the other end of polymorphic relations with models.
  #
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#362
  def inverse_association_classes; end

  # Returns an array of classes/modules forming the namespace hierarchy
  # where symbols referenced in the provided class/module would be looked
  # up by Ruby. For example, if mod is Foo::Bar, this method would return
  # [Foo::Bar, Foo, Object].
  #
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#460
  def namespace_hierarchy(mod); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#436
  def polymorph!; end

  # Resolves the given class/module name in the context of the specified
  # module, as Ruby would when a constant is referenced in the source.
  #
  # @note This method can swallow exceptions produced during class loading,
  #   because it rescues NameError internally. Since this method attempts
  #   to load classes, failure during the loading process may also lead to
  #   there being incomplete class definitions.
  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#477
  def resolve_name(mod, name); end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#366
  def setup_index!; end

  # @since 7.0
  #
  # source://mongoid//lib/mongoid/association/relatable.rb#422
  def validate!; end
end

# The primary key default.
#
# @return [String] The primary key field default.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/relatable.rb#31
Mongoid::Association::Relatable::PRIMARY_KEY_DEFAULT = T.let(T.unsafe(nil), String)

# The options shared between all association types.
#
# @return [Array<Symbol>] The shared options.
# @since 7.0
#
# source://mongoid//lib/mongoid/association/relatable.rb#19
Mongoid::Association::Relatable::SHARED_OPTIONS = T.let(T.unsafe(nil), Array)

# This module contains the logic for supporting atomic operations against the
# database.
#
# source://mongoid//lib/mongoid/atomic/modifiers.rb#3
module Mongoid::Atomic
  extend ::ActiveSupport::Concern

  # Get all the atomic updates that need to happen for the current
  # +Document+. This includes all changes that need to happen in the
  # entire hierarchy that exists below where the save call was made.
  #
  # @example Get the updates that need to occur.
  #   person.atomic_updates(children)
  # @note MongoDB does not allow "conflicting modifications" to be
  #   performed in a single operation. Conflicting modifications are
  #   detected by the 'haveConflictingMod' function in MongoDB.
  #   Examination of the code suggests that two modifications (a $set
  #   and a $push with $each, for example) conflict if:
  #   (1) the key paths being modified are equal.
  #   (2) one key path is a prefix of the other.
  #   So a $set of 'addresses.0.street' will conflict with a $push and $each
  #   to 'addresses', and we will need to split our update into two
  #   pieces. We do not, however, attempt to match MongoDB's logic
  #   exactly. Instead, we assume that two updates conflict if the
  #   first component of the two key paths matches.
  # @return [Hash] The updates and their modifiers.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#132
  def _updates(_use_indexes = T.unsafe(nil)); end

  # Add the document as an atomic pull.
  #
  # @example Add the atomic pull.
  #   person.add_atomic_pull(address)
  # @param document [Document] The embedded document to pull.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#37
  def add_atomic_pull(document); end

  # Add an atomic unset for the document.
  #
  # @example Add an atomic unset.
  #   document.add_atomic_unset(doc)
  # @param document [Document] The child document.
  # @return [Array<Document>] The children.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#54
  def add_atomic_unset(document); end

  # For array fields these are the unique adds that need to happen.
  #
  # @example Get the array unique adds.
  #   person.atomic_array_add_to_sets
  # @return [Hash] The array add_to_sets.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#105
  def atomic_array_add_to_sets; end

  # For array fields these are the pulls that need to happen.
  #
  # @example Get the array pulls.
  #   person.atomic_array_pulls
  # @return [Hash] The array pulls.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#93
  def atomic_array_pulls; end

  # For array fields these are the pushes that need to happen.
  #
  # @example Get the array pushes.
  #   person.atomic_array_pushes
  # @return [Hash] The array pushes.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#81
  def atomic_array_pushes; end

  # Returns path of the attribute for modification
  #
  # @example Get path of the attribute
  #   address.atomic_attribute_name(:city)
  # @return [String] The path to the document attribute in the database
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#69
  def atomic_attribute_name(name); end

  # Get the removal modifier for the document. Will be nil on root
  # documents, $unset on embeds_one, $set on embeds_many.
  #
  # @example Get the removal operator.
  #   name.atomic_delete_modifier
  # @return [String] The pull or unset operation.
  #
  # source://mongoid//lib/mongoid/atomic.rb#151
  def atomic_delete_modifier; end

  # Get the insertion modifier for the document. Will be nil on root
  # documents, $set on embeds_one, $push on embeds_many.
  #
  # @example Get the insert operation.
  #   name.atomic_insert_modifier
  # @return [String] The pull or set operator.
  #
  # source://mongoid//lib/mongoid/atomic.rb#162
  def atomic_insert_modifier; end

  # Return the path to this +Document+ in JSON notation, used for atomic
  # updates via $set in MongoDB.
  #
  # @example Get the path to this document.
  #   address.atomic_path
  # @return [String] The path to the document in the database.
  #
  # source://mongoid//lib/mongoid/atomic.rb#173
  def atomic_path; end

  # Get the atomic paths utility for this document.
  #
  # @example Get the atomic paths.
  #   document.atomic_paths
  # @return [Object] The associated path.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#195
  def atomic_paths; end

  # Returns the positional operator of this document for modification.
  #
  # @example Get the positional operator.
  #   address.atomic_position
  # @return [String] The positional operator with indexes.
  #
  # source://mongoid//lib/mongoid/atomic.rb#183
  def atomic_position; end

  # Get all the attributes that need to be pulled.
  #
  # @example Get the pulls.
  #   person.atomic_pulls
  # @return [Array<Hash>] The $pullAll operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#213
  def atomic_pulls; end

  # Get all the push attributes that need to occur.
  #
  # @example Get the pushes.
  #   person.atomic_pushes
  # @return [Hash] The $push and $each operations.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#234
  def atomic_pushes; end

  # Get all the attributes that need to be set.
  #
  # @example Get the sets.
  #   person.atomic_sets
  # @return [Hash] The $set operations.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#246
  def atomic_sets; end

  # Get all the attributes that need to be unset.
  #
  # @example Get the unsets.
  #   person.atomic_unsets
  # @return [Array<Hash>] The $unset operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#258
  def atomic_unsets; end

  # Get all the atomic updates that need to happen for the current
  # +Document+. This includes all changes that need to happen in the
  # entire hierarchy that exists below where the save call was made.
  #
  # @example Get the updates that need to occur.
  #   person.atomic_updates(children)
  # @note MongoDB does not allow "conflicting modifications" to be
  #   performed in a single operation. Conflicting modifications are
  #   detected by the 'haveConflictingMod' function in MongoDB.
  #   Examination of the code suggests that two modifications (a $set
  #   and a $push with $each, for example) conflict if:
  #   (1) the key paths being modified are equal.
  #   (2) one key path is a prefix of the other.
  #   So a $set of 'addresses.0.street' will conflict with a $push and $each
  #   to 'addresses', and we will need to split our update into two
  #   pieces. We do not, however, attempt to match MongoDB's logic
  #   exactly. Instead, we assume that two updates conflict if the
  #   first component of the two key paths matches.
  # @return [Hash] The updates and their modifiers.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#132
  def atomic_updates(_use_indexes = T.unsafe(nil)); end

  # Get a hash of atomic pulls that are pending.
  #
  # @example Get the atomic pulls.
  #   document.delayed_atomic_pulls
  # @return [Hash] name/document pairs.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/atomic.rb#290
  def delayed_atomic_pulls; end

  # Get all the atomic sets that have had their saves delayed.
  #
  # @example Get the delayed atomic sets.
  #   person.delayed_atomic_sets
  # @return [Hash] The delayed $sets.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#278
  def delayed_atomic_sets; end

  # Get the delayed atomic unsets.
  #
  # @example Get the delayed atomic unsets.
  #   document.delayed_atomic_unsets
  # @return [Hash] The atomic unsets
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#302
  def delayed_atomic_unsets; end

  # Flag the document as destroyed and return the atomic path.
  #
  # @example Flag destroyed and return path.
  #   document.flag_as_destroyed
  # @return [String] The atomic path.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#314
  def flag_as_destroyed; end

  # Get the flagged destroys.
  #
  # @example Get the flagged destroy.
  #   document.flagged_destroys
  # @return [Array<Proc>] The flagged destroys.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/atomic.rb#328
  def flagged_destroys; end

  # Process all the pending flagged destroys from nested attributes.
  #
  # @example Process all the pending flagged destroys.
  #   document.process_flagged_destroys
  # @return [Array] The cleared array.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/atomic.rb#340
  def process_flagged_destroys; end

  private

  # Generates the atomic updates in the correct order.
  #
  # @example Generate the updates.
  #   model.generate_atomic_updates(mods, doc)
  # @param mods [Modifiers] The atomic modifications.
  # @param doc [Document] The document to update for.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic.rb#358
  def generate_atomic_updates(mods, doc); end

  # Get the atomic updates for a touch operation. Should only include the
  # updated_at field and the optional extra field.
  #
  # @api private
  # @example Get the touch atomic updates.
  #   document.touch_atomic_updates
  # @param field [Symbol] The optional field.
  # @return [Hash] The atomic updates.
  # @since 3.0.6
  #
  # source://mongoid//lib/mongoid/atomic.rb#382
  def touch_atomic_updates(field = T.unsafe(nil)); end
end

# This class contains the logic for supporting atomic operations against the
# database.
#
# source://mongoid//lib/mongoid/atomic/modifiers.rb#7
class Mongoid::Atomic::Modifiers < ::Hash
  # Add the atomic $addToSet modifiers to the hash.
  #
  # @example Add the $addToSet modifiers.
  #   modifiers.add_to_set({ "preference_ids" => [ "one" ] })
  # @param modifications [Hash] The add to set modifiers.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#17
  def add_to_set(modifications); end

  # Adds pull all modifiers to the modifiers hash.
  #
  # @example Add pull all operations.
  #   modifiers.pull({ "addresses" => { "_id" => { "$in" => [ 1, 2, 3 ]}}})
  # @param modifications [Hash] The pull all modifiers.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#52
  def pull(modifications); end

  # Adds pull all modifiers to the modifiers hash.
  #
  # @example Add pull all operations.
  #   modifiers.pull_all({ "addresses" => { "street" => "Bond" }})
  # @param modifications [Hash] The pull all modifiers.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#37
  def pull_all(modifications); end

  # Adds push modifiers to the modifiers hash.
  #
  # @example Add push operations.
  #   modifiers.push({ "addresses" => { "street" => "Bond" }})
  # @param modifications [Hash] The push modifiers.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#67
  def push(modifications); end

  # Adds set operations to the modifiers hash.
  #
  # @example Add set operations.
  #   modifiers.set({ "title" => "sir" })
  # @param modifications [Hash] The set modifiers.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#83
  def set(modifications); end

  # Adds unset operations to the modifiers hash.
  #
  # @example Add unset operations.
  #   modifiers.unset([ "addresses" ])
  # @param modifications [Array<String>] The unset relation names.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#100
  def unset(modifications); end

  private

  # Add the operation to the modifications, either appending or creating a
  # new one.
  #
  # @example Add the operation.
  #   modifications.add_operation(mods, field, value)
  # @param mods [Hash] The modifications.
  # @param field [String] The field.
  # @param value [Hash] The atomic op.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#119
  def add_operation(mods, field, value); end

  # Get the $addToSet operations or intialize a new one.
  #
  # @example Get the $addToSet operations.
  #   modifiers.add_to_sets
  # @return [Hash] The $addToSet operations.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#141
  def add_to_sets; end

  # Get the conflicting pull modifications.
  #
  # @example Get the conflicting pulls.
  #   modifiers.conflicting_pulls
  # @return [Hash] The conflicting pull operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#184
  def conflicting_pulls; end

  # Get the conflicting push modifications.
  #
  # @example Get the conflicting pushs.
  #   modifiers.conflicting_pushs
  # @return [Hash] The conflicting push operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#196
  def conflicting_pushes; end

  # Get the conflicting set modifications.
  #
  # @example Get the conflicting sets.
  #   modifiers.conflicting_sets
  # @return [Hash] The conflicting set operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#208
  def conflicting_sets; end

  # Get the push operations that would have conflicted with the sets.
  #
  # @example Get the conflicts.
  #   modifiers.conflicts
  # @return [Hash] The conflicting modifications.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#220
  def conflicts; end

  # Get the $pullAll operations or intialize a new one.
  #
  # @example Get the $pullAll operations.
  #   modifiers.pull_alls
  # @return [Hash] The $pullAll operations.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#268
  def pull_alls; end

  # Get the names of the fields that need to be pulled.
  #
  # @example Get the pull fields.
  #   modifiers.pull_fields
  # @return [Array<String>] The pull fields.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#232
  def pull_fields; end

  # Get the $pull operations or intialize a new one.
  #
  # @example Get the $pull operations.
  #   modifiers.pulls
  # @return [Hash] The $pull operations.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#280
  def pulls; end

  # Is the operation going to be a conflict for a $push?
  #
  # @example Is this a conflict for a push?
  #   modifiers.push_conflict?(field)
  # @param field [String] The field.
  # @return [true, false] If this field is a conflict.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#170
  def push_conflict?(field); end

  # Get the names of the fields that need to be pushed.
  #
  # @example Get the push fields.
  #   modifiers.push_fields
  # @return [Array<String>] The push fields.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#244
  def push_fields; end

  # Get the $push/$each operations or initialize a new one.
  #
  # @example Get the $push/$each operations.
  #   modifiers.pushes
  # @return [Hash] The $push/$each operations.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#292
  def pushes; end

  # Is the operation going to be a conflict for a $set?
  #
  # @example Is this a conflict for a set?
  #   modifiers.set_conflict?(field)
  # @param field [String] The field.
  # @return [true, false] If this field is a conflict.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#155
  def set_conflict?(field); end

  # Get the names of the fields that need to be set.
  #
  # @example Get the set fields.
  #   modifiers.set_fields
  # @return [Array<String>] The set fields.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#256
  def set_fields; end

  # Get the $set operations or intialize a new one.
  #
  # @example Get the $set operations.
  #   modifiers.sets
  # @return [Hash] The $set operations.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#304
  def sets; end

  # Get the $unset operations or initialize a new one.
  #
  # @example Get the $unset operations.
  #   modifiers.unsets
  # @return [Hash] The $unset operations.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/atomic/modifiers.rb#316
  def unsets; end
end

# source://mongoid//lib/mongoid/atomic/paths/embedded/one.rb#4
module Mongoid::Atomic::Paths; end

# Common functionality between the two different embedded paths.
#
# source://mongoid//lib/mongoid/atomic/paths/embedded/one.rb#5
module Mongoid::Atomic::Paths::Embedded
  # Returns the value of attribute delete_modifier.
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded.rb#12
  def delete_modifier; end

  # Returns the value of attribute document.
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded.rb#12
  def document; end

  # Returns the value of attribute insert_modifier.
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded.rb#12
  def insert_modifier; end

  # Returns the value of attribute parent.
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded.rb#12
  def parent; end

  # Get the path to the document in the hierarchy.
  #
  # @example Get the path.
  #   many.path
  # @return [String] The path to the document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded.rb#22
  def path; end
end

# This class encapsulates behaviour for locating and updating
# documents that are defined as an embedded 1-n.
#
# source://mongoid//lib/mongoid/atomic/paths/embedded/many.rb#9
class Mongoid::Atomic::Paths::Embedded::Many
  include ::Mongoid::Atomic::Paths::Embedded

  # Create the new path utility.
  #
  # @example Create the path util.
  #   Many.new(document)
  # @param document [Document] The document to generate the paths for.
  # @return [Many] a new instance of Many
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded/many.rb#20
  def initialize(document); end

  # Get the position of the document in the hierarchy. This will
  # include indexes of 1-n embedded relations that may sit above the
  # embedded many.
  #
  # @example Get the position.
  #   many.position
  # @return [String] The position of the document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded/many.rb#35
  def position; end
end

# This class encapsulates behaviour for locating and updating
# documents that are defined as an embedded 1-1.
#
# source://mongoid//lib/mongoid/atomic/paths/embedded/one.rb#9
class Mongoid::Atomic::Paths::Embedded::One
  include ::Mongoid::Atomic::Paths::Embedded

  # Create the new path utility.
  #
  # @example Create the path util.
  #   One.new(document)
  # @param document [Document] The document to generate the paths for.
  # @return [One] a new instance of One
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded/one.rb#20
  def initialize(document); end

  # Get the position of the document in the hierarchy. This will
  # include indexes of 1-n embedded relations that may sit above the
  # embedded one.
  #
  # @example Get the position.
  #   one.position
  # @return [String] The position of the document.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/embedded/one.rb#35
  def position; end
end

# This class encapsulates behaviour for locating and updating root
# documents atomically.
#
# source://mongoid//lib/mongoid/atomic/paths/root.rb#8
class Mongoid::Atomic::Paths::Root
  # Create the new root path utility.
  #
  # @example Create the root path util.
  #   Root.new(document)
  # @param document [Document] The document to generate the paths for.
  # @return [Root] a new instance of Root
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/atomic/paths/root.rb#20
  def initialize(document); end

  # Returns the value of attribute document.
  #
  # source://mongoid//lib/mongoid/atomic/paths/root.rb#10
  def document; end

  # Asking for the insert modifier on a document with a root path
  # indicates a mixed relation most likely happened.
  #
  # @example Attempt to get the insert modifier.
  #   root.insert_modifier
  # @raise [Errors::InvalidPath] The error for the attempt.
  # @since 3.0.14
  #
  # source://mongoid//lib/mongoid/atomic/paths/root.rb#33
  def insert_modifier; end

  # Returns the value of attribute path.
  #
  # source://mongoid//lib/mongoid/atomic/paths/root.rb#10
  def path; end

  # Returns the value of attribute position.
  #
  # source://mongoid//lib/mongoid/atomic/paths/root.rb#10
  def position; end
end

# source://mongoid//lib/mongoid/atomic.rb#12
Mongoid::Atomic::UPDATES = T.let(T.unsafe(nil), Array)

# This module contains the logic for handling the internal attributes hash,
# and how to get and set values.
#
# source://mongoid//lib/mongoid/attributes/dynamic.rb#3
module Mongoid::Attributes
  include ::Mongoid::Attributes::Processing
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::Mongoid::Attributes::Nested
  include ::Mongoid::Attributes::Readonly

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Nested::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Readonly::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::ClassMethods

  # Read a value from the document attributes. If the value does not exist
  # it will return nil.
  #
  # @example Read an attribute.
  #   person.read_attribute(:title)
  # @example Read an attribute (alternate syntax.)
  #   person[:title]
  # @param name [String, Symbol] The name of the attribute to get.
  # @return [Object] The value of the attribute.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#94
  def [](name); end

  # Write a single attribute to the document attribute hash. This will
  # also fire the before and after update callbacks, and perform any
  # necessary typecasting.
  #
  # @example Write the attribute.
  #   person.write_attribute(:title, "Mr.")
  # @example Write the attribute (alternate syntax.)
  #   person[:title] = "Mr."
  # @param name [String, Symbol] The name of the attribute to update.
  # @param value [Object] The value to set for the attribute.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#159
  def []=(name, value); end

  # Allows you to set all the attributes for a particular mass-assignment security role
  # by passing in a hash of attributes with keys matching the attribute names
  # (which again matches the column names)  and the role name using the :as option.
  # To bypass mass-assignment security you can use the :without_protection => true option.
  #
  # @example Assign the attributes.
  #   person.assign_attributes(:title => "Mr.")
  # @example Assign the attributes (with a role).
  #   person.assign_attributes({ :title => "Mr." }, :as => :admin)
  # @param attrs [Hash] The new attributes to set.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/attributes.rb#203
  def assign_attributes(attrs = T.unsafe(nil)); end

  # Determine if the attribute is missing from the document, due to loading
  # it from the database with missing fields.
  #
  # @example Is the attribute missing?
  #   document.attribute_missing?("test")
  # @param name [String] The name of the attribute.
  # @return [true, false] If the attribute is missing.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#238
  def attribute_missing?(name); end

  # Determine if an attribute is present.
  #
  # @example Is the attribute present?
  #   person.attribute_present?("title")
  # @param name [String, Symbol] The name of the attribute.
  # @return [true, false] True if present, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#31
  def attribute_present?(name); end

  # Returns the value of attribute attributes.
  #
  # source://mongoid//lib/mongoid/attributes.rb#18
  def attributes; end

  # Writes the supplied attributes hash to the document. This will only
  # overwrite existing attributes if they are present in the new +Hash+, all
  # others will be preserved.
  #
  # @example Write the attributes.
  #   person.write_attributes(:title => "Mr.")
  # @example Write the attributes (alternate syntax.)
  #   person.attributes = { :title => "Mr." }
  # @param attrs [Hash] The new attributes to set.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#222
  def attributes=(attrs = T.unsafe(nil)); end

  # Get the attributes that have not been cast.
  #
  # @example Get the attributes before type cast.
  #   document.attributes_before_type_cast
  # @return [Hash] The uncast attributes.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#46
  def attributes_before_type_cast; end

  # Does the document have the provided attribute?
  #
  # @example Does the document have the attribute?
  #   model.has_attribute?(:name)
  # @param name [String, Symbol] The name of the attribute.
  # @return [true, false] If the key is present in the attributes.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#60
  def has_attribute?(name); end

  # Does the document have the provided attribute before it was assigned
  # and type cast?
  #
  # @example Does the document have the attribute before it was assigned?
  #   model.has_attribute_before_type_cast?(:name)
  # @param name [String, Symbol] The name of the attribute.
  # @return [true, false] If the key is present in the
  #   attributes_before_type_cast.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#76
  def has_attribute_before_type_cast?(name); end

  # Returns the value of attribute attributes.
  def raw_attributes; end

  # Read a value from the document attributes. If the value does not exist
  # it will return nil.
  #
  # @example Read an attribute.
  #   person.read_attribute(:title)
  # @example Read an attribute (alternate syntax.)
  #   person[:title]
  # @param name [String, Symbol] The name of the attribute to get.
  # @return [Object] The value of the attribute.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#94
  def read_attribute(name); end

  # Read a value from the attributes before type cast. If the value has not
  # yet been assigned then this will return the attribute's existing value
  # using read_raw_attribute.
  #
  # @example Read an attribute before type cast.
  #   person.read_attribute_before_type_cast(:price)
  # @param name [String, Symbol] The name of the attribute to get.
  # @return [Object] The value of the attribute before type cast, if
  #   available. Otherwise, the value of the attribute.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#114
  def read_attribute_before_type_cast(name); end

  # Remove a value from the +Document+ attributes. If the value does not exist
  # it will fail gracefully.
  #
  # @example Remove the attribute.
  #   person.remove_attribute(:title)
  # @param name [String, Symbol] The name of the attribute to remove.
  # @raise [Errors::ReadonlyAttribute] If the field cannot be removed due
  #   to being flagged as reaodnly.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#135
  def remove_attribute(name); end

  # Return type-casted attributes.
  #
  # @example Type-casted attributes.
  #   document.typed_attributes
  # @return [Object] The hash with keys and values of the type-casted attributes.
  # @since 6.1.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#254
  def typed_attributes; end

  # Write a single attribute to the document attribute hash. This will
  # also fire the before and after update callbacks, and perform any
  # necessary typecasting.
  #
  # @example Write the attribute.
  #   person.write_attribute(:title, "Mr.")
  # @example Write the attribute (alternate syntax.)
  #   person[:title] = "Mr."
  # @param name [String, Symbol] The name of the attribute to update.
  # @param value [Object] The value to set for the attribute.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#159
  def write_attribute(name, value); end

  # Writes the supplied attributes hash to the document. This will only
  # overwrite existing attributes if they are present in the new +Hash+, all
  # others will be preserved.
  #
  # @example Write the attributes.
  #   person.write_attributes(:title => "Mr.")
  # @example Write the attributes (alternate syntax.)
  #   person.attributes = { :title => "Mr." }
  # @param attrs [Hash] The new attributes to set.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#222
  def write_attributes(attrs = T.unsafe(nil)); end

  private

  # Does the string contain dot syntax for accessing hashes?
  #
  # @api private
  # @example Is the string in dot syntax.
  #   model.hash_dot_syntax?
  # @return [true, false] If the string contains a "."
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/attributes.rb#278
  def hash_dot_syntax?(string); end

  # source://mongoid//lib/mongoid/attributes.rb#373
  def lookup_attribute_presence(name, value); end

  # source://mongoid//lib/mongoid/attributes.rb#299
  def read_raw_attribute(name); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/attributes.rb#260
  def selection_excluded?(name, selection, field); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/attributes.rb#264
  def selection_included?(name, selection, field); end

  # Return the typecasted value for a field.
  #
  # @example Get the value typecasted.
  #   person.typed_value_for(:title, :sir)
  # @param key [String, Symbol] The field name.
  # @param value [Object] The uncast value.
  # @return [Object] The cast value.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#293
  def typed_value_for(key, value); end

  # Validates an attribute value as being assignable to the specified field.
  #
  # For now, only Hash and Array fields are validated, and the value is
  # being checked to be of an appropriate type (i.e. either Hash or Array,
  # respectively, or nil).
  #
  # This method takes the name of the field as stored in the document
  # in the database, not (necessarily) the Ruby method name used to read/write
  # the said field.
  #
  # @param field_name [String, Symbol] The name of the field.
  # @param value [Object] The value to be validated.
  # @since 3.0.10
  #
  # source://mongoid//lib/mongoid/attributes.rb#361
  def validate_attribute_value(field_name, value); end

  module GeneratedClassMethods
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
  end
end

# source://mongoid//lib/mongoid/attributes.rb#311
module Mongoid::Attributes::ClassMethods
  # Alias the provided name to the original field. This will provide an
  # aliased getter, setter, existence check, and all dirty attribute
  # methods.
  #
  # @example Alias the attribute.
  #   class Product
  #   include Mongoid::Document
  #   field :price, :type => Float
  #   alias_attribute :cost, :price
  #   end
  # @param name [Symbol] The new name.
  # @param original [Symbol] The original name.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/attributes.rb#328
  def alias_attribute(name, original); end
end

# This module contains the behavior for dynamic attributes.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/attributes/dynamic.rb#8
module Mongoid::Attributes::Dynamic
  extend ::ActiveSupport::Concern

  # Define a reader method for a dynamic attribute before type cast.
  #
  # @api private
  # @example Define a reader method for an attribute.
  #   model.define_dynamic_before_type_cast_reader(:field)
  # @param name [String] The name of the field.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#60
  def define_dynamic_before_type_cast_reader(name); end

  # Define a reader method for a dynamic attribute.
  #
  # @api private
  # @example Define a reader method.
  #   model.define_dynamic_reader(:field)
  # @param name [String] The name of the field.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#39
  def define_dynamic_reader(name); end

  # Define a writer method for a dynamic attribute.
  #
  # @api private
  # @example Define a writer method.
  #   model.define_dynamic_writer(:field)
  # @param name [String] The name of the field.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#79
  def define_dynamic_writer(name); end

  # Get an array of inspected dynamic fields for the document.
  #
  # @example Inspect the dynamic fields.
  #   document.inspect_dynamic_fields
  # @return [String] An array of pretty printed dynamic field values.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#116
  def inspect_dynamic_fields; end

  # Used for allowing accessor methods for dynamic attributes.
  #
  # @api private
  # @example Call through method_missing.
  #   document.method_missing(:test)
  # @param name [String, Symbol] The name of the method.
  # @param args [Array] The arguments to the method.
  # @return [Object] The result of the method call.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#136
  def method_missing(name, *args); end

  # If the attribute is dynamic, add a field for it with a type of object
  # and set the value.
  #
  # @example Process the attribute.
  #   document.process_attribute(name, value)
  # @param name [Symbol] The name of the field.
  # @param value [Object] The value of the field.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#99
  def process_attribute(name, value); end

  # Override respond_to? so it responds properly for dynamic attributes.
  #
  # @example Does this object respond to the method?
  #   person.respond_to?(:title)
  # @param name [Array] The name of the method.
  # @param include_private [true, false]
  # @return [true, false] True if it does, false if not.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/attributes/dynamic.rb#22
  def respond_to?(name, include_private = T.unsafe(nil)); end
end

# Defines behaviour around that lovel Rails feature nested attributes.
#
# @since 1.0.0
#
# source://mongoid//lib/mongoid/attributes/nested.rb#8
module Mongoid::Attributes::Nested
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Nested::ClassMethods

  module GeneratedClassMethods
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
  end
end

# @since 1.0.0
#
# source://mongoid//lib/mongoid/attributes/nested.rb#16
module Mongoid::Attributes::Nested::ClassMethods
  # Used when needing to update related models from a parent relation. Can
  # be used on embedded or referenced relations.
  #
  # @example Defining nested attributes.
  #
  #   class Person
  #   include Mongoid::Document
  #
  #   embeds_many :addresses
  #   embeds_one :game
  #   references_many :posts
  #
  #   accepts_nested_attributes_for :addresses, :game, :posts
  #   end
  # @option *args
  # @option *args
  # @option *args
  # @option *args
  # @param args [Array<Symbol>, Hash] A list of relation names, followed
  #   by a hash of options.
  # @param *args [Hash] a customizable set of options
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/attributes/nested.rb#48
  def accepts_nested_attributes_for(*args); end

  private

  # Add the autosave information for the nested relation.
  #
  # @api private
  # @example Add the autosave if appropriate.
  #   Person.autosave_nested_attributes(metadata)
  # @param association [Association] The existing association metadata.
  # @since 3.1.4
  #
  # source://mongoid//lib/mongoid/attributes/nested.rb#83
  def autosave_nested_attributes(association); end
end

# @since 1.0.0
#
# source://mongoid//lib/mongoid/attributes/nested.rb#18
Mongoid::Attributes::Nested::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)

# This module contains the behavior for processing attributes.
#
# source://mongoid//lib/mongoid/attributes/processing.rb#6
module Mongoid::Attributes::Processing
  # Process the provided attributes casting them to their proper values if a
  # field exists for them on the document. This will be limited to only the
  # attributes provided in the suppied +Hash+ so that no extra nil values get
  # put into the document's attributes.
  #
  # @example Process the attributes.
  #   person.process_attributes(:title => "sir", :age => 40)
  # @param attrs [Hash] The attributes to set.
  # @since 2.0.0.rc.7
  # @yield [_self]
  # @yieldparam _self [Mongoid::Attributes::Processing] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#19
  def process_attributes(attrs = T.unsafe(nil)); end

  private

  # If the key provided is the name of a relation or a nested attribute, we
  # need to wait until all other attributes are set before processing
  # these.
  #
  # @example Is the attribute pending?
  #   document.pending_attribute?(:name, "Durran")
  # @param key [Symbol] The name of the attribute.
  # @param value [Object] The value of the attribute.
  # @return [true, false] True if pending, false if not.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#47
  def pending_attribute?(key, value); end

  # Get all the pending nested attributes that need to be set.
  #
  # @example Get the pending nested attributes.
  #   document.pending_nested
  # @return [Hash] The pending nested attributes in key/value pairs.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#80
  def pending_nested; end

  # Get all the pending relations that need to be set.
  #
  # @example Get the pending relations.
  #   document.pending_relations
  # @return [Hash] The pending relations in key/value pairs.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#68
  def pending_relations; end

  # If the attribute is dynamic, add a field for it with a type of object
  # and then either way set the value.
  #
  # @example Process the attribute.
  #   document.process_attribute(name, value)
  # @param name [Symbol] The name of the field.
  # @param value [Object] The value of the field.
  # @raise [Errors::UnknownAttribute]
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#94
  def process_attribute(name, value); end

  # Process all the pending nested attributes that needed to wait until
  # ids were set to fire off.
  #
  # @example Process the nested attributes.
  #   document.process_nested
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#110
  def process_nested; end

  # Process all the pending items, then clear them out.
  #
  # @example Process the pending items.
  #   document.process_pending
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#122
  def process_pending; end

  # Process all the pending relations that needed to wait until ids were set
  # to fire off.
  #
  # @example Process the relations.
  #   document.process_relations
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/attributes/processing.rb#134
  def process_relations; end
end

# This module defines behaviour for readonly attributes.
#
# source://mongoid//lib/mongoid/attributes/readonly.rb#6
module Mongoid::Attributes::Readonly
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Readonly::ClassMethods

  # Are we able to write the attribute with the provided name?
  #
  # @example Can we write the attribute?
  #   model.attribute_writable?(:title)
  # @param name [String, Symbol] The name of the field.
  # @return [true, false] If the document is new, or if the field is not
  #   readonly.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/attributes/readonly.rb#25
  def attribute_writable?(name); end

  private

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/attributes/readonly.rb#40
  def _loaded?(name); end

  # source://mongoid//lib/mongoid/attributes/readonly.rb#31
  def as_writable_attribute!(name, value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/attributes/readonly.rb#44
  def projected_field?(name); end

  module GeneratedClassMethods
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
  end

  module GeneratedInstanceMethods
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
  end
end

# source://mongoid//lib/mongoid/attributes/readonly.rb#49
module Mongoid::Attributes::Readonly::ClassMethods
  # Defines an attribute as readonly. This will ensure that the value for
  # the attribute is only set when the document is new or we are
  # creating. In other cases, the field write will be ignored with the
  # exception of #remove_attribute and #update_attribute, where an error
  # will get raised.
  #
  # @example Flag fields as readonly.
  #   class Band
  #   include Mongoid::Document
  #   field :name, type: String
  #   field :genre, type: String
  #   attr_readonly :name, :genre
  #   end
  # @param names [Array<Symbol>] The names of the fields.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/attributes/readonly.rb#68
  def attr_readonly(*names); end
end

# source://mongoid//lib/mongoid/extensions/boolean.rb#3
class Mongoid::Boolean
  class << self
    # Turn the object from the ruby type we deal with to a Mongo friendly
    # type.
    #
    # @example Mongoize the object.
    #   Boolean.mongoize("123.11")
    # @return [String] The object mongoized.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/extensions/boolean.rb#16
    def evolve(object); end

    # Turn the object from the ruby type we deal with to a Mongo friendly
    # type.
    #
    # @example Mongoize the object.
    #   Boolean.mongoize("123.11")
    # @return [String] The object mongoized.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/extensions/boolean.rb#16
    def mongoize(object); end
  end
end

# Encapsulates behaviour around caching.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/cacheable.rb#7
module Mongoid::Cacheable
  extend ::ActiveSupport::Concern

  # Print out the cache key. This will append different values on the
  # plural model name.
  #
  # If new_record?     - will append /new
  # If not             - will append /id-updated_at.to_s(cache_timestamp_format)
  # Without updated_at - will append /id
  #
  # This is usually called insode a cache() block
  #
  # @example Returns the cache key
  #   document.cache_key
  # @return [String] the string with or without updated_at
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/cacheable.rb#30
  def cache_key; end
end

# Defines behaviour for dirty tracking.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/changeable.rb#7
module Mongoid::Changeable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Changeable::ClassMethods

  # Get the changed attributes for the document.
  #
  # @example Get the changed attributes.
  #   model.changed
  # @return [Array<String>] The changed attributes.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#18
  def changed; end

  # Has the document changed?
  #
  # @example Has the document changed?
  #   model.changed?
  # @return [true, false] If the document is changed.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#30
  def changed?; end

  # Get the attribute changes.
  #
  # @example Get the attribute changes.
  #   model.changed_attributes
  # @return [Hash<String, Object>] The attribute changes.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#54
  def changed_attributes; end

  # Get all the changes for the document.
  #
  # @example Get all the changes.
  #   model.changes
  # @return [Hash<String, Array<Object, Object> ] The changes.] Hash<String, Array<Object, Object> ] The changes.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#66
  def changes; end

  # Have any children (embedded documents) of this document changed?
  #
  # @example Have any children changed?
  #   model.children_changed?
  # @return [true, false] If any children have changed.
  # @since 2.4.1
  #
  # source://mongoid//lib/mongoid/changeable.rb#42
  def children_changed?; end

  # Call this method after save, so the changes can be properly switched.
  #
  # This will unset the memoized children array, set new record to
  # false, set the document as validated, and move the dirty changes.
  #
  # @example Move the changes to previous.
  #   person.move_changes
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#84
  def move_changes; end

  # Things that need to execute after a document has been persisted.
  #
  # @example Handle post persistence.
  #   document.post_persist
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#98
  def post_persist; end

  # Get the previous changes on the document.
  #
  # @example Get the previous changes.
  #   model.previous_changes
  # @return [Hash<String, Array<Object, Object> ] The previous changes.] Hash<String, Array<Object, Object> ] The previous changes.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#111
  def previous_changes; end

  # Remove a change from the dirty attributes hash. Used by the single field
  # atomic updators.
  #
  # @example Remove a flagged change.
  #   model.remove_change(:field)
  # @param name [Symbol, String] The name of the field.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#124
  def remove_change(name); end

  # Gets all the new values for each of the changed fields, to be passed to
  # a MongoDB $set modifier.
  #
  # @example Get the setters for the atomic updates.
  #   person = Person.new(:title => "Sir")
  #   person.title = "Madam"
  #   person.setters # returns { "title" => "Madam" }
  # @return [Hash] A +Hash+ of atomic setters.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#139
  def setters; end

  private

  # Get the old and new value for the provided attribute.
  #
  # @example Get the attribute change.
  #   model.attribute_change("name")
  # @param attr [String] The name of the attribute.
  # @return [Array<Object>] The old and new values.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#168
  def attribute_change(attr); end

  # Determine if a specific attribute has changed.
  #
  # @example Has the attribute changed?
  #   model.attribute_changed?("name")
  # @param attr [String] The name of the attribute.
  # @return [true, false] Whether the attribute has changed.
  # @since 2.1.6
  #
  # source://mongoid//lib/mongoid/changeable.rb#183
  def attribute_changed?(attr); end

  # Get whether or not the field has a different value from the default.
  #
  # @example Is the field different from the default?
  #   model.attribute_changed_from_default?
  # @param attr [String] The name of the attribute.
  # @return [true, false] If the attribute differs.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#199
  def attribute_changed_from_default?(attr); end

  # Get the previous value for the attribute.
  #
  # @example Get the previous value.
  #   model.attribute_was("name")
  # @param attr [String] The attribute name.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#213
  def attribute_was(attr); end

  # Flag an attribute as going to change.
  #
  # @example Flag the attribute.
  #   model.attribute_will_change!("name")
  # @param attr [String] The name of the attribute.
  # @return [Object] The old value.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#228
  def attribute_will_change!(attr); end

  # Set the attribute back to its old value.
  #
  # @example Reset the attribute.
  #   model.reset_attribute!("name")
  # @param attr [String] The name of the attribute.
  # @return [Object] The old value.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#244
  def reset_attribute!(attr); end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#249
  def reset_attribute_to_default!(attr); end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/changeable.rb#258
module Mongoid::Changeable::ClassMethods
  private

  # Creates the dirty change accessor.
  #
  # @example Create the accessor.
  #   Model.create_dirty_change_accessor("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#294
  def create_dirty_change_accessor(name, meth); end

  # Creates the dirty change check.
  #
  # @example Create the check.
  #   Model.create_dirty_change_check("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#311
  def create_dirty_change_check(name, meth); end

  # Creates the dirty change flag.
  #
  # @example Create the flag.
  #   Model.create_dirty_change_flag("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#362
  def create_dirty_change_flag(name, meth); end

  # Creates the dirty default change check.
  #
  # @example Create the check.
  #   Model.create_dirty_default_change_check("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#328
  def create_dirty_default_change_check(name, meth); end

  # Generate all the dirty methods needed for the attribute.
  #
  # @example Generate the dirty methods.
  #   Model.create_dirty_methods("name", "name")
  # @param name [String] The name of the field.
  # @param meth [String] The name of the accessor.
  # @return [Module] The fields module.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#273
  def create_dirty_methods(name, meth); end

  # Creates the dirty change accessor.
  #
  # @example Create the dirty change accessor.
  #   Model.create_dirty_previous_change("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#430
  def create_dirty_previous_change(name, meth); end

  # Creates the dirty change previous value accessor.
  #
  # @example Create the accessor.
  #   Model.create_dirty_previous_value_accessor("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#345
  def create_dirty_previous_value_accessor(name, meth); end

  # Creates the dirty change check.
  #
  # @example Create the dirty change check.
  #   Model.create_dirty_previously_changed?("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @return [Boolean]
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#413
  def create_dirty_previously_changed?(name, meth); end

  # Creates the dirty change reset.
  #
  # @example Create the reset.
  #   Model.create_dirty_reset("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#379
  def create_dirty_reset(name, meth); end

  # Creates the dirty change reset to default.
  #
  # @example Create the reset.
  #   Model.create_dirty_reset_to_default("name", "alias")
  # @param name [String] The attribute name.
  # @param meth [String] The name of the accessor.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/changeable.rb#396
  def create_dirty_reset_to_default(name, meth); end
end

# source://mongoid//lib/mongoid/clients/factory.rb#4
module Mongoid::Clients
  include ::Mongoid::Clients::Sessions
  extend ::ActiveSupport::Concern
  include ::Mongoid::Clients::StorageOptions
  include ::Mongoid::Clients::Options

  mixes_in_class_methods ::Mongoid::Clients::StorageOptions::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Options::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Sessions::ClassMethods

  class << self
    # Clear all clients from the current thread.
    #
    # @example Clear all clients.
    #   Mongoid::Clients.clear
    # @return [Array] The empty clients.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/clients.rb#25
    def clear; end

    # source://mongoid//lib/mongoid/clients.rb#77
    def clients; end

    # Get the default client.
    #
    # @example Get the default client.
    #   Mongoid::Clients.default
    # @return [Mongo::Client] The default client.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/clients.rb#37
    def default; end

    # Disconnect all active clients.
    #
    # @example Disconnect all active clients.
    #   Mongoid::Clients.disconnect
    # @return [true] True.
    # @since 3.1.0
    #
    # source://mongoid//lib/mongoid/clients.rb#49
    def disconnect; end

    # source://mongoid//lib/mongoid/clients.rb#73
    def set(name, client); end

    # Get a client with the provided name.
    #
    # @example Get a client with the name.
    #   Mongoid::Clients.with_name(:replica)
    # @param name [Symbol] The name of the client.
    # @return [Mongo::Client] The named client.
    # @since 3.0.0
    #
    # source://mongoid//lib/mongoid/clients.rb#65
    def with_name(name); end
  end
end

# source://mongoid//lib/mongoid/clients/factory.rb#5
module Mongoid::Clients::Factory
  extend ::Mongoid::Clients::Factory

  # Create a new client given the named configuration. If no name is
  # provided, return a new client with the default configuration. If a
  # name is provided for which no configuration exists, an error will be
  # raised.
  #
  # @example Create the client.
  #   Factory.create(:secondary)
  # @param name [String, Symbol] The named client configuration.
  # @raise [Errors::NoClientConfig] If no config could be found.
  # @return [Mongo::Client] The new client.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/factory.rb#23
  def create(name = T.unsafe(nil)); end

  # Get the default client.
  #
  # @example Get the default client.
  #   Factory.default
  # @raise [Errors::NoClientConfig] If no default configuration is
  #   found.
  # @return [Mongo::Client] The default client.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/factory.rb#41
  def default; end

  private

  # Create the client for the provided config.
  #
  # @api private
  # @example Create the client.
  #   Factory.create_client(config)
  # @param configuration [Hash] The client config.
  # @raise [Errors::NoClientsConfig]
  # @return [Mongo::Client] The client.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/factory.rb#59
  def create_client(configuration); end

  # source://mongoid//lib/mongoid/clients/factory.rb#71
  def options(configuration); end
end

# source://mongoid//lib/mongoid/clients/options.rb#4
module Mongoid::Clients::Options
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Clients::Options::ClassMethods

  # source://mongoid//lib/mongoid/clients/options.rb#31
  def collection(parent = T.unsafe(nil)); end

  # source://mongoid//lib/mongoid/clients/options.rb#35
  def collection_name; end

  # source://mongoid//lib/mongoid/clients/options.rb#39
  def mongo_client; end

  # source://mongoid//lib/mongoid/clients/options.rb#43
  def persistence_context; end

  # Change the persistence context for this object during the block.
  #
  # @example Save the current document to a different collection.
  #   model.with(collection: "secondary") do |m|
  #   m.save
  #   end
  # @option options
  # @option options
  # @option options
  # @param options_or_context [Hash, Mongoid::PersistenceContext] The storage options or a persistence context.
  # @param options [Hash] a customizable set of options
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/clients/options.rb#22
  def with(options_or_context, &block); end

  private

  # source://mongoid//lib/mongoid/clients/options.rb#55
  def clear_persistence_context(original_cluster = T.unsafe(nil), context = T.unsafe(nil)); end

  # source://mongoid//lib/mongoid/clients/options.rb#51
  def set_persistence_context(options_or_context); end
end

# source://mongoid//lib/mongoid/clients/options.rb#59
module Mongoid::Clients::Options::ClassMethods
  # source://mongoid//lib/mongoid/clients/options.rb#61
  def client_name; end

  # source://mongoid//lib/mongoid/clients/options.rb#73
  def collection; end

  # source://mongoid//lib/mongoid/clients/options.rb#65
  def collection_name; end

  # source://mongoid//lib/mongoid/clients/options.rb#69
  def database_name; end

  # source://mongoid//lib/mongoid/clients/options.rb#77
  def mongo_client; end

  # source://mongoid//lib/mongoid/clients/options.rb#104
  def persistence_context; end

  # Change the persistence context for this class during the block.
  #
  # @example Save the current document to a different collection.
  #   Model.with(collection: "secondary") do |m|
  #   m.create
  #   end
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The storage options.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/clients/options.rb#95
  def with(options, &block); end
end

# Encapsulates behavior for getting a session from the client of a model class or instance,
# setting the session on the current thread, and yielding to a block.
# The session will be closed after the block completes or raises an error.
#
# @since 6.4.0
#
# source://mongoid//lib/mongoid/clients/sessions.rb#9
module Mongoid::Clients::Sessions
  # Execute a block within the context of a session.
  #
  # @example Execute some operations in the context of a session.
  #   band.with_session(causal_consistency: true) do
  #   band.records << Record.create
  #   band.name = 'FKA Twigs'
  #   band.save
  #   band.reload
  #   end
  # @note You cannot do any operations in the block using models or objects
  #   that use a different client; the block will execute all operations
  #   in the context of the implicit session and operations on any models using
  #   another client will fail. For example, if you set a client using store_in on a
  #   particular model and execute an operation on it in the session context block,
  #   that operation can't use the block's session and an error will be raised.
  #   An error will also be raised if sessions are nested.
  # @param options [Hash] The session options. Please see the driver
  #   documentation for the available session options.
  # @raise [Errors::InvalidSessionUse] If an operation is attempted on a model using another
  #   client from which the session was started or if sessions are nested.
  # @return [Object] The result of calling the block.
  # @since 6.4.0
  # @yieldparam The [Mongo::Session] session being used for the block.
  #
  # source://mongoid//lib/mongoid/clients/sessions.rb#40
  def with_session(options = T.unsafe(nil)); end

  private

  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/clients/sessions.rb#64
  def _session; end
end

# @since 6.4.0
#
# source://mongoid//lib/mongoid/clients/sessions.rb#68
module Mongoid::Clients::Sessions::ClassMethods
  # Execute a block within the context of a session.
  #
  # @example Execute some operations in the context of a session.
  #   Band.with_session(causal_consistency: true) do
  #   band = Band.create
  #   band.records << Record.new
  #   band.save
  #   band.reload.records
  #   end
  # @note You cannot do any operations in the block using models or objects
  #   that use a different client; the block will execute all operations
  #   in the context of the implicit session and operations on any models using
  #   another client will fail. For example, if you set a client using store_in on a
  #   particular model and execute an operation on it in the session context block,
  #   that operation can't use the block's session and an error will be raised.
  #   You also cannot nest sessions.
  # @param options [Hash] The session options. Please see the driver
  #   documentation for the available session options.
  # @raise [Errors::InvalidSessionUse] If an operation is attempted on a model using another
  #   client from which the session was started or if sessions are nested.
  # @return [Object] The result of calling the block.
  # @since 6.4.0
  # @yieldparam The [Mongo::Session] session being used for the block.
  #
  # source://mongoid//lib/mongoid/clients/sessions.rb#99
  def with_session(options = T.unsafe(nil)); end

  private

  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/clients/sessions.rb#123
  def _session; end
end

# source://mongoid//lib/mongoid/clients/storage_options.rb#4
module Mongoid::Clients::StorageOptions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Clients::StorageOptions::ClassMethods
end

# source://mongoid//lib/mongoid/clients/storage_options.rb#14
module Mongoid::Clients::StorageOptions::ClassMethods
  # Reset the store_in options
  #
  # @example Reset the store_in options
  #   Model.reset_storage_options!
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/clients/storage_options.rb#62
  def reset_storage_options!; end

  # Get the default storage options.
  #
  # @example Get the default storage options.
  #   Model.storage_options_defaults
  # @return [Hash] Default storage options.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/clients/storage_options.rb#75
  def storage_options_defaults; end

  # Give this model specific custom default storage options.
  #
  # @example Store this model by default in the sharded db.
  #   class Band
  #   include Mongoid::Document
  #   store_in database: "echo_shard"
  #   end
  # @example Store this model by default in "artists"
  #   class Band
  #   include Mongoid::Document
  #   store_in collection: "artists"
  #   end
  # @example Store this model by default in a different client.
  #   class Band
  #   include Mongoid::Document
  #   store_in client: "secondary"
  #   end
  # @example Store this model with a combination of options.
  #   class Band
  #   include Mongoid::Document
  #   store_in collection: "artists", database: "secondary"
  #   end
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The storage options.
  # @return [Class] The model class.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/storage_options.rb#51
  def store_in(options); end
end

# source://mongoid//lib/mongoid/clients/validators/storage.rb#4
module Mongoid::Clients::Validators; end

# Validates the options passed to :store_in.
#
# source://mongoid//lib/mongoid/clients/validators/storage.rb#7
module Mongoid::Clients::Validators::Storage
  extend ::Mongoid::Clients::Validators::Storage

  # Validate the options provided to :store_in.
  #
  # @example Validate the options.
  #   Storage.validate(:collection_name)
  # @param klass [Class] The model class.
  # @param options [Hash, String, Symbol] The provided options.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/validators/storage.rb#24
  def validate(klass, options); end

  private

  # Determine if all keys in the options hash are valid.
  #
  # @api private
  # @example Are all keys valid?
  #   validator.valid_keys?({ collection: "name" })
  # @param options [Hash] The options hash.
  # @return [true, false] If all keys are valid.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/clients/validators/storage.rb#56
  def valid_keys?(options); end

  # Determine if the current klass is valid to change store_in
  # options
  #
  # @api private
  # @param klass [Class]
  # @return [true, false] If the class is valid
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/clients/validators/storage.rb#40
  def valid_parent?(klass); end
end

# The valid options for storage.
#
# @since 3.0.0
#
# source://mongoid//lib/mongoid/clients/validators/storage.rb#13
Mongoid::Clients::Validators::Storage::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# This module provides inclusions of all behaviour in a Mongoid document.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/composable.rb#24
module Mongoid::Composable
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::Mongoid::Evolvable
  include ::Mongoid::Inspectable
  include ::Mongoid::Reloadable
  include ::Mongoid::Stateful
  include ::Mongoid::Equality
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::Model
  include ::ActiveModel::Serializers::JSON
  include ::Mongoid::Atomic
  include ::Mongoid::Changeable
  include ::Mongoid::Clients::StorageOptions
  include ::Mongoid::Clients::Options
  include ::Mongoid::Clients
  include ::Mongoid::Attributes::Nested
  include ::Mongoid::Attributes::Readonly
  include ::Mongoid::Attributes
  include ::Mongoid::Fields
  include ::Mongoid::Indexable
  include ::Mongoid::Matchable
  include ::Mongoid::Persistable::Creatable
  include ::Mongoid::Persistable::Deletable
  include ::Mongoid::Persistable::Destroyable
  include ::Mongoid::Persistable::Incrementable
  include ::Mongoid::Persistable::Logical
  include ::Mongoid::Persistable::Poppable
  include ::Mongoid::Persistable::Pullable
  include ::Mongoid::Persistable::Pushable
  include ::Mongoid::Persistable::Renamable
  include ::Mongoid::Persistable::Settable
  include ::Mongoid::Persistable::Unsettable
  include ::Mongoid::Persistable
  include ::Mongoid::Association::Embedded::Cyclic
  include ::Mongoid::Association::Referenced::AutoSave
  include ::Mongoid::Association::Referenced::CounterCache
  include ::Mongoid::Association::Accessors
  include ::Mongoid::Association::Depending
  include ::Mongoid::Association::Builders
  include ::Mongoid::Association::Macros
  include ::Mongoid::Association::Reflections
  include ::Mongoid::Association
  include ::Mongoid::Scopable
  include ::Mongoid::Selectable
  include ::Mongoid::Serializable
  include ::Mongoid::Shardable
  include ::Mongoid::Cacheable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Traversable
  include ::Mongoid::Validatable::Macros
  include ::Mongoid::Validatable
  include ::ActiveModel::Validations::Callbacks
  include ::Mongoid::Interceptable
  include ::Mongoid::Copyable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::Mongoid::Changeable::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::StorageOptions::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Options::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Sessions::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Nested::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Readonly::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::ClassMethods
  mixes_in_class_methods ::Mongoid::Fields::ClassMethods
  mixes_in_class_methods ::Mongoid::Indexable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Creatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Deletable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Destroyable::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::Syncable::ClassMethods
  mixes_in_class_methods ::Mongoid::Scopable::ClassMethods
  mixes_in_class_methods ::Mongoid::Shardable::ClassMethods
  mixes_in_class_methods ::Mongoid::Threaded::Lifecycle::ClassMethods
  mixes_in_class_methods ::Mongoid::Traversable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::Macros
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::Mongoid::Findable

  class << self
    # Get a list of methods that would be a bad idea to define as field names
    # or override when including Mongoid::Document.
    #
    # @example Bad thing!
    #   Mongoid::Components.prohibited_methods
    # @return [Array<Symbol>]
    # @since 2.1.8
    #
    # source://mongoid//lib/mongoid/composable.rb#125
    def prohibited_methods; end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/composable.rb#61
Mongoid::Composable::MODULES = T.let(T.unsafe(nil), Array)

# These are methods names defined in included blocks that may conflict
# with user-defined relation or field names.
# They won't be in the list of Module.instance_methods on which the
# #prohibited_methods code below is dependent so we must track them
# separately.
#
# @return [Array<Symbol>] A list of reserved method names.
# @since 6.0.0
#
# source://mongoid//lib/mongoid/composable.rb#101
Mongoid::Composable::RESERVED_METHOD_NAMES = T.let(T.unsafe(nil), Array)

# This module defines all the configuration options for Mongoid, including the
# database connections.
#
# source://mongoid//lib/mongoid/config/environment.rb#3
module Mongoid::Config
  extend ::Mongoid::Config
  extend ::Mongoid::Config::Options

  # source://mongoid//lib/mongoid/config/options.rb#35
  def app_name; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def app_name=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def app_name?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def background_indexing; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def background_indexing=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def background_indexing?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def belongs_to_required_by_default; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def belongs_to_required_by_default=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def belongs_to_required_by_default?; end

  # Get the client configuration or an empty hash.
  #
  # @example Get the clients configuration.
  #   config.clients
  # @return [Hash] The clients configuration.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#221
  def clients; end

  # Has Mongoid been configured? This is checking that at least a valid
  # client config exists.
  #
  # @example Is Mongoid configured?
  #   config.configured?
  # @return [true, false] If Mongoid is configured.
  # @since 3.0.9
  #
  # source://mongoid//lib/mongoid/config.rb#41
  def configured?; end

  # Connect to the provided database name on the default client.
  #
  # @example Set the database to connect to.
  #   config.connect_to("mongoid_test")
  # @note Use only in development or test environments for convenience.
  # @param name [String] The database name.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#55
  def connect_to(name, options = T.unsafe(nil)); end

  # Return field names that could cause destructive things to happen if
  # defined in a Mongoid::Document.
  #
  # @example Get the destructive fields.
  #   config.destructive_fields
  # @return [Array<String>] An array of bad field names.
  #
  # source://mongoid//lib/mongoid/config.rb#72
  def destructive_fields; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def duplicate_fields_exception; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def duplicate_fields_exception=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def duplicate_fields_exception?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def include_root_in_json; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def include_root_in_json=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def include_root_in_json?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def include_type_for_serialization; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def include_type_for_serialization=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def include_type_for_serialization?; end

  # Load the settings from a compliant mongoid.yml file. This can be used for
  # easy setup with frameworks other than Rails.
  #
  # @example Configure Mongoid.
  #   Mongoid.load!("/path/to/mongoid.yml")
  # @param path [String] The path to the file.
  # @param environment [String, Symbol] The environment to load.
  # @since 2.0.1
  #
  # source://mongoid//lib/mongoid/config.rb#86
  def load!(path, environment = T.unsafe(nil)); end

  # From a hash of settings, load all the configuration.
  #
  # @example Load the configuration.
  #   config.load_configuration(settings)
  # @param settings [Hash] The configuration settings.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/config.rb#131
  def load_configuration(settings); end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def log_level; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def log_level=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def log_level?; end

  # source://mongoid//lib/mongoid/config.rb#15
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/config.rb#14
  def logger=(arg); end

  # Get all the models in the application - this is everything that includes
  # Mongoid::Document.
  #
  # @example Get all the models.
  #   config.models
  # @return [Array<Class>] All the models in the application.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/config.rb#105
  def models; end

  # Set the configuration options. Will validate each one individually.
  #
  # @example Set the options.
  #   config.options = { raise_not_found_error: true }
  # @param options [Hash] The configuration options.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#204
  def options=(options); end

  # Override the client to use globally.
  #
  # @example Override the client globally.
  #   config.override_client(:optional)
  # @param name [String, Symbol] The name of the client.
  # @return [String, Symbol] The global override.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#162
  def override_client(name); end

  # Override the database to use globally.
  #
  # @example Override the database globally.
  #   config.override_database(:optional)
  # @param name [String, Symbol] The name of the database.
  # @return [String, Symbol] The global override.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#148
  def override_database(name); end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def preload_models; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def preload_models=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def preload_models?; end

  # Purge all data in all collections, including indexes.
  #
  # @example Purge all data.
  #   Mongoid::Config.purge!
  # @note This is the fastest way to drop all data.
  # @return [true] true.
  # @since 2.0.2
  #
  # source://mongoid//lib/mongoid/config.rb#176
  def purge!; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def raise_not_found_error; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def raise_not_found_error=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def raise_not_found_error?; end

  # Register a model in the application with Mongoid.
  #
  # @example Register a model.
  #   config.register_model(Band)
  # @param klass [Class] The model to register.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/config.rb#117
  def register_model(klass); end

  # Is the application running under passenger?
  #
  # @example Is the application using passenger?
  #   config.running_with_passenger?
  # @return [true, false] If the app is deployed on Passenger.
  # @since 3.0.11
  #
  # source://mongoid//lib/mongoid/config.rb#245
  def running_with_passenger?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def scope_overwrite_exception; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def scope_overwrite_exception=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def scope_overwrite_exception?; end

  # Get the time zone to use.
  #
  # @example Get the time zone.
  #   Config.time_zone
  # @return [String] The time zone.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config.rb#233
  def time_zone; end

  # Truncate all data in all collections, but not the indexes.
  #
  # @example Truncate all collection data.
  #   Mongoid::Config.truncate!
  # @note This will be slower than purge!
  # @return [true] true.
  # @since 2.0.2
  #
  # source://mongoid//lib/mongoid/config.rb#190
  def truncate!; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def use_activesupport_time_zone; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def use_activesupport_time_zone=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def use_activesupport_time_zone?; end

  # source://mongoid//lib/mongoid/config/options.rb#35
  def use_utc; end

  # source://mongoid//lib/mongoid/config/options.rb#39
  def use_utc=(value); end

  # source://mongoid//lib/mongoid/config/options.rb#43
  def use_utc?; end

  private

  # @raise [Errors::NoClientsConfig]
  #
  # source://mongoid//lib/mongoid/config.rb#256
  def clients=(clients); end

  # source://mongoid//lib/mongoid/config.rb#251
  def set_log_levels; end
end

# Encapsulates logic for getting environment information.
#
# source://mongoid//lib/mongoid/config/environment.rb#6
module Mongoid::Config::Environment
  extend ::Mongoid::Config::Environment

  # Get the name of the environment that Mongoid is running under.
  #
  # Uses the following sources in order:
  # - If +::Rails+ is defined, +Rails.env+.
  # - If +::Sinatra+ is defined, +Sinatra::Base.environment+.
  # - +RACK_ENV+
  # - +MONGOID_ENV*
  #
  # @api public
  # @example Get the env name.
  #   Environment.env_name
  # @raise [Errors::NoEnvironment] If environment name cannot be
  #   determined because none of the sources was set.
  # @return [String] The name of the current environment.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/config/environment.rb#27
  def env_name; end

  # Load the yaml from the provided path and return the settings for the
  # specified environment, or for the current Mongoid environment.
  #
  # @api private
  # @example Load the yaml.
  #   Environment.load_yaml("/work/mongoid.yml")
  # @param path [String] The location of the file.
  # @param environment [String | Symbol] Optional environment name to
  #   override the current Mongoid environment.
  # @return [Hash] The settings.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/config/environment.rb#51
  def load_yaml(path, environment = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/config.rb#17
Mongoid::Config::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# Encapsulates logic for setting options.
#
# source://mongoid//lib/mongoid/config/options.rb#6
module Mongoid::Config::Options
  # Get the defaults or initialize a new empty hash.
  #
  # @example Get the defaults.
  #   options.defaults
  # @return [Hash] The default options.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/config/options.rb#16
  def defaults; end

  # Get the log level.
  #
  # @example Get the log level.
  #   config.log_level
  # @return [Integer] The log level.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/config/options.rb#81
  def log_level; end

  # Define a configuration option with a default.
  #
  # @example Define the option.
  #   Options.option(:logger, :default => Logger.new($stdout, :warn))
  # @option options
  # @param name [Symbol] The name of the configuration option.
  # @param options [Hash] Extras for the option.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/config/options.rb#31
  def option(name, options = T.unsafe(nil)); end

  # Reset the configuration options to the defaults.
  #
  # @example Reset the configuration options.
  #   config.reset
  # @return [Hash] The defaults.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/config/options.rb#57
  def reset; end

  # Get the settings or initialize a new empty hash.
  #
  # @example Get the settings.
  #   options.settings
  # @return [Hash] The setting options.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/config/options.rb#69
  def settings; end
end

# source://mongoid//lib/mongoid/config/validators/option.rb#4
module Mongoid::Config::Validators; end

# Validator for client specific configuration.
#
# source://mongoid//lib/mongoid/config/validators/client.rb#7
module Mongoid::Config::Validators::Client
  extend ::Mongoid::Config::Validators::Client

  # Validate the client configuration.
  #
  # @example Validate the client config.
  #   Client.validate({ default: { hosts: [ "localhost:27017" ] }})
  # @param clients [Hash] The clients config.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#23
  def validate(clients); end

  private

  # Return true if the configuration has both standard options and a uri
  # defined.
  #
  # @api private
  # @example Validate the options.
  #   validator.no_database_or_uri?(config)
  # @param config [Hash] The configuration options.
  # @return [true, false] If both standard and uri are defined.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#135
  def both_uri_and_standard?(config); end

  # Return true if the configuration has no database or uri option
  # defined.
  #
  # @api private
  # @example Validate the options.
  #   validator.no_database_or_uri?(config)
  # @param config [Hash] The configuration options.
  # @return [true, false] If no database or uri is defined.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#101
  def no_database_or_uri?(config); end

  # Return true if the configuration has no hosts or uri option
  # defined.
  #
  # @api private
  # @example Validate the options.
  #   validator.no_hosts_or_uri?(config)
  # @param config [Hash] The configuration options.
  # @return [true, false] If no hosts or uri is defined.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#118
  def no_hosts_or_uri?(config); end

  # Validate that the client config has database.
  #
  # @api private
  # @example Validate the client has database.
  #   validator.validate_client_database(:default, {})
  # @param name [String, Symbol] The config key.
  # @param config [Hash] The configuration.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#47
  def validate_client_database(name, config); end

  # Validate that the client config has hosts.
  #
  # @api private
  # @example Validate the client has hosts.
  #   validator.validate_client_hosts(:default, {})
  # @param name [String, Symbol] The config key.
  # @param config [Hash] The configuration.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#64
  def validate_client_hosts(name, config); end

  # Validate that not both a uri and standard options are provided for a
  # single client.
  #
  # @api private
  # @example Validate the uri and options.
  #   validator.validate_client_uri(:default, {})
  # @param name [String, Symbol] The config key.
  # @param config [Hash] The configuration.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/client.rb#82
  def validate_client_uri(name, config); end
end

# Standard configuration options.
#
# @since 3.0.0
#
# source://mongoid//lib/mongoid/config/validators/client.rb#13
Mongoid::Config::Validators::Client::STANDARD = T.let(T.unsafe(nil), Array)

# Validator for configuration options.
#
# source://mongoid//lib/mongoid/config/validators/option.rb#7
module Mongoid::Config::Validators::Option
  extend ::Mongoid::Config::Validators::Option

  # Validate a configuration option.
  #
  # @example Validate a configuration option.
  # @param option [String] The name of the option.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/config/validators/option.rb#17
  def validate(option); end
end

# source://mongoid//lib/mongoid/contextual/queryable.rb#3
module Mongoid::Contextual
  # source://mongoid//lib/mongoid/contextual.rb#16
  def add_to_set(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#12
  def aggregates(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#12
  def avg(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def bit(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#23
  def blank?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def cached?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#23
  def collection(*_arg0, **_arg1, &_arg2); end

  # Get the context in which criteria queries should execute. This is either
  # in memory (for embedded documents) or mongo (for root level documents.)
  #
  # @example Get the context.
  #   criteria.context
  # @return [Memory, Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual.rb#34
  def context; end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def count(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#23
  def criteria(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def database_field_name(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def delete_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def destroy(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def destroy_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def each(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#23
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def explain(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def find_first(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def find_one_and_delete(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def find_one_and_replace(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def find_one_and_update(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def first(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def geo_near(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def inc(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#23
  def klass(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def last(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def length(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def map(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def map_reduce(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#12
  def max(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#12
  def min(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def one(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def pop(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def pull(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def pull_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def push(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def push_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def rename(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def set(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def size(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def sort(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#12
  def sum(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#16
  def unset(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def update(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def update_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual.rb#20
  def view(*_arg0, **_arg1, &_arg2); end

  private

  # Create the context for the queries to execute. Will be memory for
  # embedded documents and mongo for root documents.
  #
  # @api private
  # @example Create the context.
  #   contextual.create_context
  # @return [Mongo, Memory] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual.rb#51
  def create_context; end
end

# source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#4
module Mongoid::Contextual::Aggregable; end

# Contains behaviour for aggregating values in memory.
#
# source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#6
module Mongoid::Contextual::Aggregable::Memory
  # Get the average value of the provided field.
  #
  # @example Get the average of a single field.
  #   aggregable.avg(:likes)
  # @param field [Symbol] The field to average.
  # @return [Float] The average.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#18
  def avg(field); end

  # Get the max value of the provided field. If provided a block, will
  # return the Document with the greatest value for the field, in
  # accordance with Ruby's enumerable API.
  #
  # @example Get the max of a single field.
  #   aggregable.max(:likes)
  # @example Get the document with the max value.
  #   aggregable.max do |a, b|
  #   a.likes <=> b.likes
  #   end
  # @param field [Symbol] The field to max.
  # @return [Float, Document] The max value or document with the max
  #   value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#40
  def max(field = T.unsafe(nil)); end

  # Get the min value of the provided field. If provided a block, will
  # return the Document with the smallest value for the field, in
  # accordance with Ruby's enumerable API.
  #
  # @example Get the min of a single field.
  #   aggregable.min(:likes)
  # @example Get the document with the min value.
  #   aggregable.min do |a, b|
  #   a.likes <=> b.likes
  #   end
  # @param field [Symbol] The field to min.
  # @return [Float, Document] The min value or document with the min
  #   value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#62
  def min(field = T.unsafe(nil)); end

  # Get the sum value of the provided field. If provided a block, will
  # return the sum in accordance with Ruby's enumerable API.
  #
  # @example Get the sum of a single field.
  #   aggregable.sum(:likes)
  # @example Get the sum for the provided block.
  #   aggregable.sum(&:likes)
  # @param field [Symbol] The field to sum.
  # @return [Float] The sum value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#80
  def sum(field = T.unsafe(nil)); end

  private

  # Aggregate by the provided field and method.
  #
  # @api private
  # @example Aggregate by the field and method.
  #   aggregable.aggregate_by(:name, :min_by)
  # @param field [Symbol] The field to aggregate on.
  # @param method [Symbol] The method (min_by or max_by).
  # @return [Integer] The aggregate.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/memory.rb#103
  def aggregate_by(field, method); end
end

# Contains behaviour for aggregating values in Mongo.
#
# source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#6
module Mongoid::Contextual::Aggregable::Mongo
  # Get all the aggregate values for the provided field.
  #
  # @example Get all the aggregate values.
  #   aggregable.aggregates(:likes)
  # @param field [String, Symbol] The field name.
  # @return [Hash] count is a number of documents with the provided field. If there're none, then count is 0 and max, min, sum, avg are nil.
  #   {
  #   "count" => 2.0,
  #   "max" => 1000.0,
  #   "min" => 500.0,
  #   "sum" => 1500.0,
  #   "avg" => 750.0
  #   }
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#25
  def aggregates(field); end

  # Get the average value of the provided field.
  #
  # @example Get the average of a single field.
  #   aggregable.avg(:likes)
  # @param field [Symbol] The field to average.
  # @return [Float] The average.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#44
  def avg(field); end

  # Get the max value of the provided field. If provided a block, will
  # return the Document with the greatest value for the field, in
  # accordance with Ruby's enumerable API.
  #
  # @example Get the max of a single field.
  #   aggregable.max(:likes)
  # @example Get the document with the max value.
  #   aggregable.max do |a, b|
  #   a.likes <=> b.likes
  #   end
  # @param field [Symbol] The field to max.
  # @return [Float, Document] The max value or document with the max
  #   value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#66
  def max(field = T.unsafe(nil)); end

  # Get the min value of the provided field. If provided a block, will
  # return the Document with the smallest value for the field, in
  # accordance with Ruby's enumerable API.
  #
  # @example Get the min of a single field.
  #   aggregable.min(:likes)
  # @example Get the document with the min value.
  #   aggregable.min do |a, b|
  #   a.likes <=> b.likes
  #   end
  # @param field [Symbol] The field to min.
  # @return [Float, Document] The min value or document with the min
  #   value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#88
  def min(field = T.unsafe(nil)); end

  # Get the sum value of the provided field. If provided a block, will
  # return the sum in accordance with Ruby's enumerable API.
  #
  # @example Get the sum of a single field.
  #   aggregable.sum(:likes)
  # @example Get the sum for the provided block.
  #   aggregable.sum(&:likes)
  # @param field [Symbol] The field to sum.
  # @return [Float] The sum value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#106
  def sum(field = T.unsafe(nil)); end

  private

  # Get the aggregation pipeline for provided field.
  #
  # @api private
  # @example Get the pipeline.
  #   aggregable.pipeline(:likes)
  # @param field [String, Symbol] The name of the field.
  # @return [Array] The array of pipeline operators.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/aggregable/mongo.rb#124
  def pipeline(field); end
end

# source://mongoid//lib/mongoid/contextual/atomic.rb#4
module Mongoid::Contextual::Atomic
  # Execute an atomic $addToSet on the matching documents.
  #
  # @example Add the value to the set.
  #   context.add_to_set(members: "Dave", genres: "Electro")
  # @param adds [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#16
  def add_to_set(adds); end

  # Perform an atomic $bit operation on the matching documents.
  #
  # @example Perform the bitwise op.
  #   context.bit(likes: { and: 14, or: 4 })
  # @param bits [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#30
  def bit(bits); end

  # Perform an atomic $inc operation on the matching documents.
  #
  # @example Perform the atomic increment.
  #   context.inc(likes: 10)
  # @param incs [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#44
  def inc(incs); end

  # Perform an atomic $pop operation on the matching documents.
  #
  # @example Pop the first value on the matches.
  #   context.pop(members: -1)
  # @example Pop the last value on the matches.
  #   context.pop(members: 1)
  # @param pops [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#61
  def pop(pops); end

  # Perform an atomic $pull operation on the matching documents.
  #
  # @example Pull the value from the matches.
  #   context.pull(members: "Dave")
  # @note Expression pulling is not yet supported.
  # @param pulls [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#77
  def pull(pulls); end

  # Perform an atomic $pullAll operation on the matching documents.
  #
  # @example Pull all the matching values from the matches.
  #   context.pull_all(:members, [ "Alan", "Vince" ])
  # @param pulls [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#91
  def pull_all(pulls); end

  # Perform an atomic $push operation on the matching documents.
  #
  # @example Push the value to the matching docs.
  #   context.push(members: "Alan")
  # @param pushes [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#105
  def push(pushes); end

  # Perform an atomic $push/$each operation on the matching documents.
  #
  # @example Push the values to the matching docs.
  #   context.push_all(members: [ "Alan", "Fletch" ])
  # @param pushes [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#119
  def push_all(pushes); end

  # Perform an atomic $rename of fields on the matching documents.
  #
  # @example Rename the fields on the matching documents.
  #   context.rename(members: :artists)
  # @param renames [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#136
  def rename(renames); end

  # Perform an atomic $set of fields on the matching documents.
  #
  # @example Set the field value on the matches.
  #   context.set(name: "Depeche Mode")
  # @param sets [Hash] The operations.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#154
  def set(sets); end

  # Perform an atomic $unset of a field on the matching documents.
  #
  # @example Unset the field on the matches.
  #   context.unset(:name)
  # @param args [String, Symbol, Array] The name of the fields.
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/atomic.rb#168
  def unset(*args); end

  private

  # source://mongoid//lib/mongoid/contextual/atomic.rb#175
  def collect_operations(ops); end
end

# source://mongoid//lib/mongoid/contextual/command.rb#4
module Mongoid::Contextual::Command
  # Get the database client.
  #
  # @example Get the client.
  #   command.client
  # @return [Mongo::Client] The Mongo client.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/command.rb#30
  def client; end

  # Returns the value of attribute collection.
  #
  # source://mongoid//lib/mongoid/contextual/command.rb#8
  def collection; end

  # The database command that is being built to send to the db.
  #
  # @example Get the command.
  #   command.command
  # @return [Hash] The db command.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/command.rb#18
  def command; end

  # Returns the value of attribute criteria.
  #
  # source://mongoid//lib/mongoid/contextual/command.rb#8
  def criteria; end
end

# source://mongoid//lib/mongoid/contextual/geo_near.rb#4
class Mongoid::Contextual::GeoNear
  include ::Enumerable
  include ::Mongoid::Contextual::Command

  # Initialize the new map/reduce directive.
  #
  # @example Initialize the new map/reduce.
  #   MapReduce.new(criteria, map, reduce)
  # @param collection [Mongo::Collection] The collection to run the
  #   operation on.
  # @param criteria [Criteria] The Mongoid criteria.
  # @param near [String]
  # @return [GeoNear] a new instance of GeoNear
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#72
  def initialize(collection, criteria, near); end

  # source://mongoid//lib/mongoid/contextual/geo_near.rb#9
  def ==(arg); end

  # source://mongoid//lib/mongoid/contextual/geo_near.rb#8
  def [](*_arg0, **_arg1, &_arg2); end

  # Get the average distance for all documents from the point in the
  # command.
  #
  # @example Get the average distance.
  #   geo_near.average_distance
  # @return [Float, nil] The average distance.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#20
  def average_distance; end

  # Provide a distance multiplier to be used for each returned distance.
  #
  # @example Provide the distance multiplier.
  #   geo_near.distance_multiplier(13113.1)
  # @param value [Integer, Float] The distance multiplier.
  # @return [GeoNear] The GeoNear wrapper.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#56
  def distance_multiplier(value); end

  # Iterates over each of the documents in the $geoNear, excluding the
  # extra information that was passed back from the database.
  #
  # @example Iterate over the results.
  #   geo_near.each do |doc|
  #   p doc
  #   end
  # @return [Enumerator] The enumerator.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#36
  def each; end

  # source://mongoid//lib/mongoid/contextual/geo_near.rb#9
  def empty?(*_arg0, **_arg1, &_arg2); end

  # Is this context's criteria considered empty?
  #
  # @example Is this context's criteria considered empty?
  #   geo_near.empty_and_chainable?
  # @return [true] Always true.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#210
  def empty_and_chainable?; end

  # Execute the $geoNear, returning the raw output.
  #
  # @example Run the $geoNear
  #   geo_near.execute
  # @return [Hash] The raw output
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#174
  def execute; end

  # Get a pretty string representation of the command.
  #
  # @example Inspect the geoNear.
  #   geo_near.inspect
  # @return [String] The inspection string.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#87
  def inspect; end

  # Specify the maximum distance to find documents for, or get the value of
  # the document with the furthest distance.
  #
  # @example Set the max distance.
  #   geo_near.max_distance(0.5)
  # @example Get the max distance.
  #   geo_near.max_distance
  # @param value [Integer, Float] The maximum distance.
  # @return [GeoNear, Float] The GeoNear command or the value.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#114
  def max_distance(value = T.unsafe(nil)); end

  # Specify the minimum distance to find documents for.
  #
  # @example Set the min distance.
  #   geo_near.min_distance(0.5)
  # @param value [Integer, Float] The minimum distance.
  # @return [GeoNear] The GeoNear command.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#133
  def min_distance(value); end

  # Tell the command to calculate based on spherical distances.
  #
  # @example Add the spherical flag.
  #   geo_near.spherical
  # @return [GeoNear] The command.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#146
  def spherical; end

  # Get the stats for the command run.
  #
  # @example Get the stats.
  #   geo_near.stats
  # @return [Hash] The stats from the command run.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#186
  def stats; end

  # Get the execution time of the command.
  #
  # @example Get the execution time.
  #   geo_near.time
  # @return [Float] The execution time.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#198
  def time; end

  # Tell the command whether or not the retured results should be unique.
  #
  # @example Set the unique flag.
  #   geo_near.unique(false)
  # @param value [true, false] Whether to return unique documents.
  # @return [GeoNear] The command.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#161
  def unique(value = T.unsafe(nil)); end

  private

  # Apply criteria specific options - query, limit.
  #
  # @api private
  # @example Apply the criteria options
  #   geo_near.apply_criteria_options
  # @return [nil] Nothing.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#226
  def apply_criteria_options; end

  # Get the result documents from the $geoNear.
  #
  # @api private
  # @example Get the documents.
  #   geo_near.documents
  # @return [Array, Cursor] The documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#243
  def documents; end

  # Execute the $geoNear command and get the results.
  #
  # @api private
  # @example Get the results.
  #   geo_near.results
  # @return [Hash] The results of the command.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/geo_near.rb#261
  def results; end
end

# source://mongoid//lib/mongoid/contextual/map_reduce.rb#4
class Mongoid::Contextual::MapReduce
  include ::Enumerable
  include ::Mongoid::Contextual::Command

  # Initialize the new map/reduce directive.
  #
  # @example Initialize the new map/reduce.
  #   MapReduce.new(criteria, map, reduce)
  # @param criteria [Criteria] The Mongoid criteria.
  # @param map [String] The map js function.
  # @param reduce [String] The reduce js function.
  # @return [MapReduce] a new instance of MapReduce
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#82
  def initialize(collection, criteria, map, reduce); end

  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#9
  def ==(arg); end

  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#8
  def [](*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#243
  def command; end

  # Get all the counts returned by the map/reduce.
  #
  # @example Get the counts.
  #   map_reduce.counts
  # @return [Hash] The counts.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#19
  def counts; end

  # Iterates over each of the documents in the map/reduce, excluding the
  # extra information that was passed back from the database.
  #
  # @example Iterate over the results.
  #   map_reduce.each do |doc|
  #   p doc
  #   end
  # @return [Enumerator] The enumerator.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#34
  def each; end

  # Get the number of documents emitted by the map/reduce.
  #
  # @example Get the emitted document count.
  #   map_reduce.emitted
  # @return [Integer] The number of emitted documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#53
  def emitted; end

  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#9
  def empty?(*_arg0, **_arg1, &_arg2); end

  # Get the raw output from the map/reduce operation.
  # Execute the map/reduce, returning the raw output.
  # Useful when you don't care about map/reduce's output.
  #
  # @example Get the raw output.
  #   map_reduce.raw
  # @example Run the map reduce
  #   map_reduce.execute
  # @return [Hash] The raw output.
  # @return [Hash] The raw output
  # @since 3.0.0
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#165
  def execute; end

  # Provide a finalize js function for the map/reduce.
  #
  # @example Provide a finalize function.
  #   map_reduce.finalize(func)
  # @param function [String] The finalize function.
  # @return [MapReduce] The map reduce.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#67
  def finalize(function); end

  # Get the number of documents that were input into the map/reduce.
  #
  # @example Get the count of input documents.
  #   map_reduce.input
  # @return [Integer] The number of input documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#96
  def input; end

  # Get a pretty string representation of the map/reduce, including the
  # criteria, map, reduce, finalize, and out option.
  #
  # @example Inspect the map_reduce.
  #   map_reduce.inspect
  # @return [String] The inspection string.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#232
  def inspect; end

  # Sets the map/reduce to use jsMode.
  #
  # @example Set the map/reduce to jsMode.
  #   map_reduce.js_mode
  # @return [MapReduce] The map/reduce.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#108
  def js_mode; end

  # Specifies where the map/reduce output is to be stored.
  # Please see MongoDB documentation for supported map reduce options.
  #
  # @example Store output in memory.
  #   map_reduce.out(inline: 1)
  # @example Store output in a collection, replacing existing documents.
  #   map_reduce.out(replace: "collection_name")
  # @example Store output in a collection, merging existing documents.
  #   map_reduce.out(merge: "collection_name")
  # @example Store output in a collection, reducing existing documents.
  #   map_reduce.out(reduce: "collection_name")
  # @example Return results from map reduce.
  #   map_reduce.out(inline: 1)
  # @param location [Hash] The place to store the results.
  # @return [MapReduce] The map/reduce object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#136
  def out(location); end

  # Get the number of documents output by the map/reduce.
  #
  # @example Get the output document count.
  #   map_reduce.output
  # @return [Integer] The number of output documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#153
  def output; end

  # Get the raw output from the map/reduce operation.
  #
  # @example Get the raw output.
  #   map_reduce.raw
  # @return [Hash] The raw output.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#165
  def raw; end

  # Get the number of documents reduced by the map/reduce.
  #
  # @example Get the reduced document count.
  #   map_reduce.reduced
  # @return [Integer] The number of reduced documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#192
  def reduced; end

  # Get the raw output from the map/reduce operation.
  #
  # @example Get the raw output.
  #   map_reduce.raw
  # @return [Hash] The raw output.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#165
  def results; end

  # Adds a javascript object to the global scope of the map/reduce.
  #
  # @example Add an object to the global scope.
  #   map_reduce.scope(name: value)
  # @param object [Hash] A hash of key/values for the global scope.
  # @return [MapReduce]
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#206
  def scope(object); end

  # Get the execution time of the map/reduce.
  #
  # @example Get the execution time.
  #   map_reduce.time
  # @return [Float] The time in milliseconds.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#219
  def time; end

  private

  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#253
  def _session; end

  # @raise [Errors::NoMapReduceOutput]
  #
  # source://mongoid//lib/mongoid/contextual/map_reduce.rb#249
  def validate_out!; end
end

# source://mongoid//lib/mongoid/contextual/memory.rb#7
class Mongoid::Contextual::Memory
  include ::Enumerable
  include ::Mongoid::Contextual::Aggregable::Memory
  include ::Mongoid::Association::EagerLoadable
  include ::Mongoid::Contextual::Queryable
  include ::Mongoid::Positional

  # Create the new in memory context.
  #
  # @example Create the new context.
  #   Memory.new(criteria)
  # @param criteria [Criteria] The criteria.
  # @return [Memory] a new instance of Memory
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#147
  def initialize(criteria); end

  # Check if the context is equal to the other object.
  #
  # @example Check equality.
  #   context == []
  # @param other [Array] The other array.
  # @return [true, false] If the objects are equal.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#30
  def ==(other); end

  # Delete all documents in the database that match the selector.
  #
  # @example Delete all the documents.
  #   context.delete
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#43
  def delete; end

  # Delete all documents in the database that match the selector.
  #
  # @example Delete all the documents.
  #   context.delete
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#43
  def delete_all; end

  # Destroy all documents in the database that match the selector.
  #
  # @example Destroy all the documents.
  #   context.destroy
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#67
  def destroy; end

  # Destroy all documents in the database that match the selector.
  #
  # @example Destroy all the documents.
  #   context.destroy
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#67
  def destroy_all; end

  # Get the distinct values in the db for the provided field.
  #
  # @example Get the distinct values.
  #   context.distinct(:name)
  # @param field [String, Symbol] The name of the field.
  # @return [Array<Object>] The distinct values for the field.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#87
  def distinct(field); end

  # Returns the value of attribute documents.
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#18
  def documents; end

  # Iterate over the context. If provided a block, yield to a Mongoid
  # document for each, otherwise return an enum.
  #
  # @example Iterate over the context.
  #   context.each do |doc|
  #   puts doc.name
  #   end
  # @return [Enumerator] The enumerator.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#102
  def each; end

  # Do any documents exist for the context.
  #
  # @example Do any documents exist for the context.
  #   context.exists?
  # @return [true, false] If the count is more than zero.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#121
  def exists?; end

  # Get the first document in the database for the criteria's selector.
  #
  # @example Get the first document.
  #   context.first
  # @return [Document] The first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#133
  def find_first(*args); end

  # Get the first document in the database for the criteria's selector.
  #
  # @example Get the first document.
  #   context.first
  # @return [Document] The first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#133
  def first(*args); end

  # Increment a value on all documents.
  #
  # @example Perform the increment.
  #   context.inc(likes: 10)
  # @param incs [Hash] The operations.
  # @return [Enumerator] The enumerator.
  # @since 7.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#168
  def inc(*args); end

  # Get the last document in the database for the criteria's selector.
  #
  # @example Get the last document.
  #   context.last
  # @return [Document] The last document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#182
  def last; end

  # Get the length of matching documents in the context.
  #
  # @example Get the length of matching documents.
  #   context.length
  # @return [Integer] The matching length.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#194
  def length; end

  # Limits the number of documents that are returned.
  #
  # @example Limit the documents.
  #   context.limit(20)
  # @param value [Integer] The number of documents to return.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#209
  def limit(value); end

  # Get the first document in the database for the criteria's selector.
  #
  # @example Get the first document.
  #   context.first
  # @return [Document] The first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#133
  def one(*args); end

  # Returns the value of attribute path.
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#18
  def path; end

  # source://mongoid//lib/mongoid/contextual/memory.rb#214
  def pluck(*fields); end

  # Returns the value of attribute root.
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#18
  def root; end

  # Returns the value of attribute selector.
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#18
  def selector; end

  # Get the length of matching documents in the context.
  #
  # @example Get the length of matching documents.
  #   context.length
  # @return [Integer] The matching length.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#194
  def size; end

  # Skips the provided number of documents.
  #
  # @example Skip the documents.
  #   context.skip(20)
  # @param value [Integer] The number of documents to skip.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#235
  def skip(value); end

  # Sorts the documents by the provided spec.
  #
  # @example Sort the documents.
  #   context.sort(name: -1, title: 1)
  # @param values [Hash] The sorting values as field/direction(1/-1)
  #   pairs.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#251
  def sort(values); end

  # Update the first matching document atomically.
  #
  # @example Update the matching document.
  #   context.update(name: "Smiths")
  # @param attributes [Hash] The new attributes for the document.
  # @return [nil, false] False if no attributes were provided.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#265
  def update(attributes = T.unsafe(nil)); end

  # Update all the matching documents atomically.
  #
  # @example Update all the matching documents.
  #   context.update_all(name: "Smiths")
  # @param attributes [Hash] The new attributes for each document.
  # @return [nil, false] False if no attributes were provided.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#279
  def update_all(attributes = T.unsafe(nil)); end

  private

  # source://mongoid//lib/mongoid/contextual/memory.rb#467
  def _session; end

  # Apply criteria options.
  #
  # @api private
  # @example Apply criteria options.
  #   context.apply_options
  # @raise [Errors::InMemoryCollationNotSupported]
  # @return [Memory] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#392
  def apply_options; end

  # Map the sort symbols to the correct MongoDB values.
  #
  # @example Apply the sorting params.
  #   context.apply_sorting
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#403
  def apply_sorting; end

  # Compare two values, checking for nil.
  #
  # @api private
  # @example Compare the two objects.
  #   context.compare(a, b)
  # @param a [Object] The first object.
  # @param b [Object] The first object.
  # @return [Integer] The comparison value.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#422
  def compare(a, b); end

  # Get the documents the context should iterate. This follows 3 rules:
  #
  # @api private
  # @example Get the documents for iteration.
  #   context.documents_for_iteration
  # @return [Array<Document>] The docs to iterate.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#295
  def documents_for_iteration; end

  # Sort the documents in place.
  #
  # @example Sort the documents.
  #   context.in_place_sort(name: 1)
  # @param values [Hash] The field/direction sorting pairs.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#438
  def in_place_sort(values); end

  # Get the limiting value.
  #
  # @api private
  # @example Get the limiting value.
  # @return [Integer] The limit.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#335
  def limiting; end

  # Set the limiting value.
  #
  # @api private
  # @example Set the limiting value.
  # @param value [Integer] The limit.
  # @return [Integer] The limit.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#350
  def limiting=(value); end

  # Prepare the document for batch removal.
  #
  # @api private
  # @example Prepare for removal.
  #   context.prepare_remove(doc)
  # @param doc [Document] The document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#457
  def prepare_remove(doc); end

  # Get the skiping value.
  #
  # @api private
  # @example Get the skiping value.
  # @return [Integer] The skip.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#363
  def skipping; end

  # Set the skiping value.
  #
  # @api private
  # @example Set the skiping value.
  # @param value [Integer] The skip.
  # @return [Integer] The skip.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#378
  def skipping=(value); end

  # Update the provided documents with the attributes.
  #
  # @api private
  # @example Update the documents.
  #   context.update_documents({}, doc)
  # @param attributes [Hash] The attributes.
  # @param docs [Array<Document>] The docs to update.
  # @since 3.0.4
  #
  # source://mongoid//lib/mongoid/contextual/memory.rb#314
  def update_documents(attributes, docs); end
end

# source://mongoid//lib/mongoid/contextual/mongo.rb#11
class Mongoid::Contextual::Mongo
  include ::Enumerable
  include ::Mongoid::Contextual::Aggregable::Mongo
  include ::Mongoid::Contextual::Atomic
  include ::Mongoid::Association::EagerLoadable
  include ::Mongoid::Contextual::Queryable

  # Create the new Mongo context. This delegates operations to the
  # underlying driver.
  #
  # @example Create the new context.
  #   Mongo.new(criteria)
  # @param criteria [Criteria] The criteria.
  # @return [Mongo] a new instance of Mongo
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#340
  def initialize(criteria); end

  # Is the context cached?
  #
  # @example Is the context cached?
  #   context.cached?
  # @return [true, false] If the context is cached.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#46
  def cached?; end

  # Get the number of documents matching the query.
  #
  # @example Get the number of matching documents.
  #   context.count
  # @example Get the count of documents with the provided options.
  #   context.count(limit: 1)
  # @example Get the count for where the provided block is true.
  #   context.count do |doc|
  #   doc.likes > 1
  #   end
  # @param options [Hash] The options, such as skip and limit to be factored
  #   into the count.
  # @return [Integer] The number of matches.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#69
  def count(options = T.unsafe(nil), &block); end

  # source://mongoid//lib/mongoid/contextual/mongo.rb#348
  def database_field_name(*_arg0, **_arg1, &_arg2); end

  # Delete all documents in the database that match the selector.
  #
  # @example Delete all the documents.
  #   context.delete
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#82
  def delete; end

  # Delete all documents in the database that match the selector.
  #
  # @example Delete all the documents.
  #   context.delete
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#82
  def delete_all; end

  # Destroy all documents in the database that match the selector.
  #
  # @example Destroy all the documents.
  #   context.destroy
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#95
  def destroy; end

  # Destroy all documents in the database that match the selector.
  #
  # @example Destroy all the documents.
  #   context.destroy
  # @return [nil] Nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#95
  def destroy_all; end

  # Get the distinct values in the db for the provided field.
  #
  # @example Get the distinct values.
  #   context.distinct(:name)
  # @param field [String, Symbol] The name of the field.
  # @return [Array<Object>] The distinct values for the field.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#114
  def distinct(field); end

  # Iterate over the context. If provided a block, yield to a Mongoid
  # document for each, otherwise return an enum.
  #
  # @example Iterate over the context.
  #   context.each do |doc|
  #   puts doc.name
  #   end
  # @return [Enumerator] The enumerator.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#131
  def each(&block); end

  # Do any documents exist for the context.
  #
  # @example Do any documents exist for the context.
  #   context.exists?
  # @note We don't use count here since Mongo does not use counted
  #   b-tree indexes, unless a count is already cached then that is
  #   used to determine the value.
  # @return [true, false] If the count is more than zero.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#155
  def exists?; end

  # Run an explain on the criteria.
  #
  # @example Explain the criteria.
  #   Band.where(name: "Depeche Mode").explain
  # @return [Hash] The explain result.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#172
  def explain; end

  # Return the first result without applying sort
  #
  # @api private
  # @since 4.0.2
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#277
  def find_first; end

  # Execute the find and modify command, used for MongoDB's
  # $findAndModify. This deletes the found document.
  #
  # @example Execute the command.
  #   context.find_one_and_delete
  # @return [Document] The result of the command.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#229
  def find_one_and_delete; end

  # Execute the find and modify command, used for MongoDB's
  # $findAndModify.
  #
  # @example Execute the command.
  #   context.find_one_and_update({ likes: 1 })
  # @option options
  # @option options
  # @param replacement [Hash] The replacement.
  # @param options [Hash] The command options.
  # @return [Document] The result of the command.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#214
  def find_one_and_replace(replacement, options = T.unsafe(nil)); end

  # Execute the find and modify command, used for MongoDB's
  # $findAndModify.
  #
  # @example Execute the command.
  #   context.find_one_and_update({ "$inc" => { likes: 1 }})
  # @option options
  # @option options
  # @param update [Hash] The updates.
  # @param options [Hash] The command options.
  # @return [Document] The result of the command.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#192
  def find_one_and_update(update, options = T.unsafe(nil)); end

  # Get the first document in the database for the criteria's selector.
  #
  # @example Get the first document.
  #   context.first
  # @note Automatically adding a sort on _id when no other sort is
  #   defined on the criteria has the potential to cause bad performance issues.
  #   If you experience unexpected poor performance when using #first or #last
  #   and have no sort defined on the criteria, use the option { id_sort: :none }.
  #   Be aware that #first/#last won't guarantee order in this case.
  # @option opts
  # @param opts [Hash] The options for the query returning the first document.
  # @return [Document] The first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#254
  def first(opts = T.unsafe(nil)); end

  # Execute a $geoNear command against the database.
  #
  # @example Find documents close to 10, 10.
  #   context.geo_near([ 10, 10 ])
  # @example Find with spherical distance.
  #   context.geo_near([ 10, 10 ]).spherical
  # @example Find with a max distance.
  #   context.geo_near([ 10, 10 ]).max_distance(0.5)
  # @example Provide a distance multiplier.
  #   context.geo_near([ 10, 10 ]).distance_multiplier(1133)
  # @param coordinates [Array<Float>] The coordinates.
  # @return [GeoNear] The GeoNear command.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#304
  def geo_near(coordinates); end

  # Get the last document in the database for the criteria's selector.
  #
  # @example Get the last document.
  #   context.last
  # @note Automatically adding a sort on _id when no other sort is
  #   defined on the criteria has the potential to cause bad performance issues.
  #   If you experience unexpected poor performance when using #first or #last
  #   and have no sort defined on the criteria, use the option { id_sort: :none }.
  #   Be aware that #first/#last won't guarantee order in this case.
  # @option opts
  # @param opts [Hash] The options for the query returning the first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#367
  def last(opts = T.unsafe(nil)); end

  # Get's the number of documents matching the query selector.
  #
  # @example Get the length.
  #   context.length
  # @return [Integer] The number of documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#386
  def length; end

  # Limits the number of documents that are returned from the database.
  #
  # @example Limit the documents.
  #   context.limit(20)
  # @param value [Integer] The number of documents to return.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#401
  def limit(value); end

  # Invoke the block for each element of Contextual. Create a new array
  # containing the values returned by the block.
  #
  # If the symbol field name is passed instead of the block, additional
  # optimizations would be used.
  #
  # @example Map by some field.
  #   context.map(:field1)
  # @example Map with block.
  #   context.map(&:field1)
  # @param field [Symbol] The field name.
  # @return [Array] The result of mapping.
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#323
  def map(field = T.unsafe(nil), &block); end

  # Initiate a map/reduce operation from the context.
  #
  # @example Initiate a map/reduce.
  #   context.map_reduce(map, reduce)
  # @param map [String] The map js function.
  # @param reduce [String] The reduce js function.
  # @return [MapReduce] The map/reduce lazy wrapper.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#416
  def map_reduce(map, reduce); end

  # Get the first document in the database for the criteria's selector.
  #
  # @example Get the first document.
  #   context.first
  # @note Automatically adding a sort on _id when no other sort is
  #   defined on the criteria has the potential to cause bad performance issues.
  #   If you experience unexpected poor performance when using #first or #last
  #   and have no sort defined on the criteria, use the option { id_sort: :none }.
  #   Be aware that #first/#last won't guarantee order in this case.
  # @option opts
  # @param opts [Hash] The options for the query returning the first document.
  # @return [Document] The first document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#254
  def one(opts = T.unsafe(nil)); end

  # Pluck the single field values from the database. Will return duplicates
  # if they exist and only works for top level fields.
  #
  # @example Pluck a field.
  #   context.pluck(:_id)
  # @note This method will return the raw db values - it performs no custom
  #   serialization.
  # @param fields [String, Symbol, Array] Fields to pluck.
  # @return [Array<Object, Array>] The plucked values.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#434
  def pluck(*fields); end

  # Get's the number of documents matching the query selector.
  #
  # @example Get the length.
  #   context.length
  # @return [Integer] The number of documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#386
  def size; end

  # Skips the provided number of documents.
  #
  # @example Skip the documents.
  #   context.skip(20)
  # @param value [Integer] The number of documents to skip.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#458
  def skip(value); end

  # Sorts the documents by the provided spec.
  #
  # @example Sort the documents.
  #   context.sort(name: -1, title: 1)
  # @param values [Hash] The sorting values as field/direction(1/-1)
  #   pairs.
  # @return [Mongo] The context.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#473
  def sort(values = T.unsafe(nil), &block); end

  # Update the first matching document atomically.
  #
  # @example Update the first matching document.
  #   context.update({ "$set" => { name: "Smiths" }})
  # @option opts
  # @param attributes [Hash] The new attributes for the document.
  # @param opts [Hash] The update operation options.
  # @return [nil, false] False if no attributes were provided.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#498
  def update(attributes = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Update all the matching documents atomically.
  #
  # @example Update all the matching documents.
  #   context.update_all({ "$set" => { name: "Smiths" }})
  # @option opts
  # @param attributes [Hash] The new attributes for each document.
  # @param opts [Hash] The update operation options.
  # @return [nil, false] False if no attributes were provided.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#516
  def update_all(attributes = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute view.
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#36
  def view; end

  private

  # source://mongoid//lib/mongoid/contextual/mongo.rb#711
  def _session; end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#715
  def acknowledged_write?; end

  # Apply the field limitations.
  #
  # @api private
  # @example Apply the field limitations.
  #   context.apply_fields
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#567
  def apply_fields; end

  # Apply an option.
  #
  # @api private
  # @example Apply the skip option.
  #   context.apply_option(:skip)
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#599
  def apply_option(name); end

  # Apply the options.
  #
  # @api private
  # @example Apply all options.
  #   context.apply_options
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#581
  def apply_options; end

  # Is the cache fully loaded? Will be true if caching after one full
  # iteration.
  #
  # @api private
  # @example Is the cache loaded?
  #   context.cache_loaded?
  # @return [true, false] If the cache is loaded.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#649
  def cache_loaded?; end

  # Is the cache able to be added to?
  #
  # @api private
  # @example Is the context cacheable?
  #   context.cacheable?
  # @return [true, false] If caching, and the cache isn't loaded.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#634
  def cacheable?; end

  # Get the documents for cached queries.
  #
  # @api private
  # @example Get the cached documents.
  #   context.documents
  # @return [Array<Document>] The documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#663
  def documents; end

  # Get the documents the context should iterate. This follows 3 rules:
  #
  # 1. If the query is cached, and we already have documents loaded, use
  #   them.
  # 2. If we are eager loading, then eager load the documents and use
  #   those.
  # 3. Use the query.
  #
  # @api private
  # @example Get the documents for iteration.
  #   context.documents_for_iteration
  # @return [Array<Document>, Mongo::Collection::View] The docs to iterate.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#683
  def documents_for_iteration; end

  # yield the block given or return the cached value
  #
  # @param key [String, Symbol] The instance variable name
  # @return the result of the block
  # @since 3.1.4
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#529
  def try_cache(key, &block); end

  # Update the documents for the provided method.
  #
  # @api private
  # @example Update the documents.
  #   context.update_documents(attrs)
  # @param attributes [Hash] The updates.
  # @param method [Symbol] The method to use.
  # @return [true, false] If the update succeeded.
  # @since 3.0.4
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#553
  def update_documents(attributes, method = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Map the inverse sort symbols to the correct MongoDB values.
  #
  # @api private
  # @example Apply the inverse sorting params to the given block
  #   context.with_inverse_sorting
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#613
  def with_inverse_sorting(opts = T.unsafe(nil)); end

  # Yield to the document.
  #
  # @api private
  # @example Yield the document.
  #   context.yield_document(doc) do |doc|
  #   ...
  #   end
  # @param document [Document] The document to yield to.
  # @since 3.0.0
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/contextual/mongo.rb#702
  def yield_document(document, &block); end
end

# Options constant.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/contextual/mongo.rb#21
Mongoid::Contextual::Mongo::OPTIONS = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/contextual/none.rb#4
class Mongoid::Contextual::None
  include ::Enumerable
  include ::Mongoid::Contextual::Queryable

  # Create the new null context.
  #
  # @example Create the new context.
  #   Null.new(criteria)
  # @param criteria [Criteria] The criteria.
  # @return [None] a new instance of None
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#87
  def initialize(criteria); end

  # Check if the context is equal to the other object.
  #
  # @example Check equality.
  #   context == []
  # @param other [Array] The other array.
  # @return [true, false] If the objects are equal.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#20
  def ==(other); end

  # Returns the value of attribute criteria.
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#8
  def criteria; end

  # Allow distinct for null context.
  #
  # @example Get the distinct values.
  #   context.distinct(:name)
  # @param field [String, Symbol] the name of the field.
  # @return [Array] Empty Array
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#32
  def distinct(field); end

  # Iterate over the null context. There are no documents to iterate over
  # in this case.
  #
  # @example Iterate over the context.
  #   context.each do |doc|
  #   puts doc.name
  #   end
  # @return [Enumerator] The enumerator.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#47
  def each; end

  # Do any documents exist for the context.
  #
  # @example Do any documents exist for the context.
  #   context.exists?
  # @return [true, false] If the count is more than zero.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#64
  def exists?; end

  # Returns the value of attribute klass.
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#8
  def klass; end

  # Always returns nil.
  #
  # @example Get the last document.
  #   context.last
  # @return [nil] Always nil.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#99
  def last; end

  # Always returns zero.
  #
  # @example Get the length of matching documents.
  #   context.length
  # @return [Integer] Always zero.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#109
  def length; end

  # Allow pluck for null context.
  #
  # @example Allow pluck for null context.
  #   context.pluck(:name)
  # @param args [String, Symbol, Array] Field or fields to pluck.
  # @return [Array] Emtpy Array
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#75
  def pluck(*args); end

  # Always returns zero.
  #
  # @example Get the length of matching documents.
  #   context.length
  # @return [Integer] Always zero.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/contextual/none.rb#109
  def size; end
end

# source://mongoid//lib/mongoid/contextual/queryable.rb#4
module Mongoid::Contextual::Queryable
  # Is the enumerable of matching documents empty?
  #
  # @example Is the context empty?
  #   context.blank?
  # @return [true, false] If the context is empty.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/queryable.rb#19
  def blank?; end

  # Returns the value of attribute collection.
  #
  # source://mongoid//lib/mongoid/contextual/queryable.rb#9
  def collection; end

  # Returns the value of attribute criteria.
  #
  # source://mongoid//lib/mongoid/contextual/queryable.rb#9
  def criteria; end

  # Is the enumerable of matching documents empty?
  #
  # @example Is the context empty?
  #   context.blank?
  # @return [true, false] If the context is empty.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/contextual/queryable.rb#19
  def empty?; end

  # Returns the value of attribute klass.
  #
  # source://mongoid//lib/mongoid/contextual/queryable.rb#9
  def klass; end
end

# This module contains the behaviour of Mongoid's clone/dup of documents.
#
# source://mongoid//lib/mongoid/copyable.rb#5
module Mongoid::Copyable
  extend ::ActiveSupport::Concern

  # Clone or dup the current +Document+. This will return all attributes with
  # the exception of the document's id, and will reset all the
  # instance variables.
  #
  # This clone also includes embedded documents.
  #
  # @example Clone the document.
  #   document.clone
  # @return [Document] The new document.
  #
  # source://mongoid//lib/mongoid/copyable.rb#18
  def clone; end

  # Clone or dup the current +Document+. This will return all attributes with
  # the exception of the document's id, and will reset all the
  # instance variables.
  #
  # This clone also includes embedded documents.
  #
  # @example Clone the document.
  #   document.clone
  # @return [Document] The new document.
  #
  # source://mongoid//lib/mongoid/copyable.rb#18
  def dup; end

  private

  # Clone the document attributes
  #
  # @api private
  # @example clone document
  #   model.clone_document
  # @since 3.0.22
  #
  # source://mongoid//lib/mongoid/copyable.rb#49
  def clone_document; end

  # When cloning, if the document has localized fields we need to ensure they
  # are properly processed in the clone.
  #
  # @api private
  # @example Process localized attributes.
  #   model.process_localized_attributes(attributes)
  # @param attrs [Hash] The attributes.
  # @since 3.0.20
  #
  # source://mongoid//lib/mongoid/copyable.rb#66
  def process_localized_attributes(klass, attrs); end
end

# The +Criteria+ class is the core object needed in Mongoid to retrieve
# objects from the database. It is a DSL that essentially sets up the
# selector and options arguments that get passed on to a Mongo::Collection
# in the Ruby driver. Each method on the +Criteria+ returns self to they
# can be chained in order to create a readable criterion to be executed
# against the database.
#
# source://mongoid//lib/mongoid/criteria/findable.rb#3
class Mongoid::Criteria
  include ::Enumerable
  include ::Mongoid::Contextual
  include ::Mongoid::Criteria::Queryable::Mergeable
  include ::Mongoid::Criteria::Queryable::Aggregable
  include ::Mongoid::Criteria::Queryable::Selectable
  include ::Mongoid::Criteria::Queryable::Optional
  include ::Mongoid::Criteria::Queryable
  include ::Mongoid::Criteria::Findable
  include ::Mongoid::Criteria::Inspectable
  include ::Mongoid::Criteria::Includable
  include ::Mongoid::Criteria::Marshalable
  include ::Mongoid::Criteria::Modifiable
  include ::Mongoid::Criteria::Scopable
  include ::Mongoid::Clients::Options
  include ::Mongoid::Clients::Sessions
  include ::Mongoid::Criteria::Options
  extend ::Mongoid::Clients::Options::ClassMethods

  # Initialize the new criteria.
  #
  # @example Init the new criteria.
  #   Criteria.new(Band)
  # @param klass [Class] The model class.
  # @return [Criteria] a new instance of Criteria
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#198
  def initialize(klass); end

  # Returns true if the supplied +Enumerable+ or +Criteria+ is equal to the results
  # of this +Criteria+ or the criteria itself.
  #
  # @note This will force a database load when called if an enumerable is passed.
  # @param other [Object] The other +Enumerable+ or +Criteria+ to compare to.
  # @return [true, false] If the objects are equal.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#51
  def ==(other); end

  # Needed to properly get a criteria back as json
  #
  # @example Get the criteria as json.
  #   Person.where(:title => "Sir").as_json
  # @param options [Hash] Options to pass through to the serializer.
  # @return [String] The JSON string.
  #
  # source://mongoid//lib/mongoid/criteria.rb#64
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute association.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def association; end

  # Sets the attribute association
  #
  # @param value the value to set the attribute association to.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def association=(_arg0); end

  # Tells the criteria that the cursor that gets returned needs to be
  # cached. This is so multiple iterations don't hit the database multiple
  # times, however this is not advisable when working with large data sets
  # as the entire results will get stored in memory.
  #
  # @example Flag the criteria as cached.
  #   criteria.cache
  # @return [Criteria] The cloned criteria.
  #
  # source://mongoid//lib/mongoid/criteria.rb#77
  def cache; end

  # Will return true if the cache option has been set.
  #
  # @example Is the criteria cached?
  #   criteria.cached?
  # @return [true, false] If the criteria is flagged as cached.
  #
  # source://mongoid//lib/mongoid/criteria.rb#89
  def cached?; end

  # Get the documents from the embedded criteria.
  #
  # @example Get the documents.
  #   criteria.documents
  # @return [Array<Document>] The documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#101
  def documents; end

  # Set the embedded documents on the criteria.
  #
  # @example Set the documents.
  # @param docs [Array<Document>] The embedded documents.
  # @return [Array<Document>] The embedded documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#114
  def documents=(docs); end

  # Returns the value of attribute embedded.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def embedded; end

  # Sets the attribute embedded
  #
  # @param value the value to set the attribute embedded to.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def embedded=(_arg0); end

  # Is the criteria for embedded documents?
  #
  # @example Is the criteria for embedded documents?
  #   criteria.embedded?
  # @return [true, false] If the criteria is embedded.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#126
  def embedded?; end

  # Is the criteria an empty but chainable criteria?
  #
  # @example Is the criteria a none criteria?
  #   criteria.empty_and_chainable?
  # @return [true, false] If the criteria is a none.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#272
  def empty_and_chainable?; end

  # Extract a single id from the provided criteria. Could be in an $and
  # query or a straight _id query.
  #
  # @example Extract the id.
  #   criteria.extract_id
  # @return [Object] The id.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#139
  def extract_id; end

  # Adds a criterion to the +Criteria+ that specifies additional options
  # to be passed to the Ruby driver, in the exact format for the driver.
  #
  # criteria.extras(:limit => 20, :skip => 40)
  #
  # @example Add extra params to the criteria.
  # @param extras [Hash] The extra driver options.
  # @return [Criteria] The cloned criteria.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#154
  def extras(extras); end

  # Get the list of included fields.
  #
  # @example Get the field list.
  #   criteria.field_list
  # @return [Array<String>] The fields.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#168
  def field_list; end

  # Find documents by the provided javascript and scope. Uses a $where but is
  # different from +Criteria#where+ in that it will pass a code object to the
  # query instead of a pure string. Safe against Javascript injection
  # attacks.
  #
  # @example Find by javascript.
  #   Band.for_js("this.name = param", param: "Tool")
  # @param javascript [String] The javascript to execute in the $where.
  # @param scope [Hash] The scope for the code.
  # @return [Criteria] The criteria.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#437
  def for_js(javascript, scope = T.unsafe(nil)); end

  # When freezing a criteria we need to initialize the context first
  # otherwise the setting of the context on attempted iteration will raise a
  # runtime error.
  #
  # @example Freeze the criteria.
  #   criteria.freeze
  # @return [Criteria] The frozen criteria.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#186
  def freeze; end

  # Returns the value of attribute klass.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def klass=(_arg0); end

  # Merges another object with this +Criteria+ and returns a new criteria.
  # The other object may be a +Criteria+ or a +Hash+. This is used to
  # combine multiple scopes together, where a chained scope situation
  # may be desired.
  #
  # @example Merge the criteria with another criteria.
  #   criteri.merge(other_criteria)
  # @example Merge the criteria with a hash. The hash must contain a klass
  #   key and the key/value pairs correspond to method names/args.
  #
  #   criteria.merge({
  #   klass: Band,
  #   where: { name: "Depeche Mode" },
  #   order_by: { name: 1 }
  #   })
  # @param other [Criteria] The other criterion to merge with.
  # @return [Criteria] A cloned self.
  #
  # source://mongoid//lib/mongoid/criteria.rb#225
  def merge(other); end

  # Merge the other criteria into this one.
  #
  # @example Merge another criteria into this criteria.
  #   criteria.merge(Person.where(name: "bob"))
  # @param other [Criteria] The criteria to merge in.
  # @return [Criteria] The merged criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#241
  def merge!(other); end

  # Returns a criteria that will always contain zero results and never hits
  # the database.
  #
  # @example Return a none criteria.
  #   criteria.none
  # @return [Criteria] The none criteria.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#260
  def none; end

  # Overriden to include _type in the fields.
  #
  # @example Limit the fields returned from the database.
  #   Band.only(:name)
  # @param args [Array<Symbol>] The names of the fields.
  # @return [Criteria] The cloned criteria.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#286
  def only(*args); end

  # Returns the value of attribute parent_document.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def parent_document; end

  # Sets the attribute parent_document
  #
  # @param value the value to set the attribute parent_document to.
  #
  # source://mongoid//lib/mongoid/criteria.rb#39
  def parent_document=(_arg0); end

  # Set the read preference for the criteria.
  #
  # @example Set the read preference.
  #   criteria.read(mode: :primary_preferred)
  # @param value [Hash] The mode preference.
  # @return [Criteria] The cloned criteria.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#309
  def read(value = T.unsafe(nil)); end

  # Returns true if criteria responds to the given method.
  #
  # @example Does the criteria respond to the method?
  #   crtiteria.respond_to?(:each)
  # @param name [Symbol] The name of the class method on the +Document+.
  # @param include_private [true, false] Whether to include privates.
  # @return [true, false] If the criteria responds to the method.
  #
  # source://mongoid//lib/mongoid/criteria.rb#339
  def respond_to?(name, include_private = T.unsafe(nil)); end

  def to_ary(*_arg0); end

  # Convenience for objects that want to be merged into a criteria.
  #
  # @example Convert to a criteria.
  #   criteria.to_criteria
  # @return [Criteria] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#353
  def to_criteria; end

  # Convert the criteria to a proc.
  #
  # @example Convert the criteria to a proc.
  #   criteria.to_proc
  # @return [Proc] The wrapped criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#365
  def to_proc; end

  # Adds a criterion to the +Criteria+ that specifies a type or an Array of
  # types that must be matched.
  #
  # @example Match only specific models.
  #   criteria.type('Browser')
  #   criteria.type(['Firefox', 'Browser'])
  # @param types [Array<String>] The types to match against.
  # @return [Criteria] The cloned criteria.
  #
  # source://mongoid//lib/mongoid/criteria.rb#379
  def type(types); end

  # This is the general entry point for most MongoDB queries. This either
  # creates a standard field: value selection, and expanded selection with
  # the use of hash methods, or a $where selection if a string is provided.
  #
  # @example Add a standard selection.
  #   criteria.where(name: "syd")
  # @example Add a javascript selection.
  #   criteria.where("this.name == 'syd'")
  # @param expression [String, Hash] The javascript or standard selection.
  # @raise [UnsupportedJavascript] If provided a string and the criteria
  #   is embedded.
  # @return [Criteria] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#401
  def where(expression); end

  # Overriden to exclude _id from the fields.
  #
  # @example Exclude fields returned from the database.
  #   Band.without(:name)
  # @param args [Array<Symbol>] The names of the fields.
  # @return [Criteria] The cloned criteria.
  # @since 4.0.3
  #
  # source://mongoid//lib/mongoid/criteria.rb#325
  def without(*args); end

  # Get a version of this criteria without the options.
  #
  # @example Get the criteria without options.
  #   criteria.without_options
  # @return [Criteria] The cloned criteria.
  # @since 3.0.4
  #
  # source://mongoid//lib/mongoid/criteria.rb#417
  def without_options; end

  private

  # Are documents in the query missing, and are we configured to raise an
  # error?
  #
  # @api private
  # @example Check for missing documents.
  #   criteria.check_for_missing_documents!([], [ 1 ])
  # @param result [Array<Document>] The result.
  # @param ids [Array<Object>] The ids.
  # @raise [Errors::DocumentNotFound] If none are found and raising an
  #   error.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#464
  def check_for_missing_documents!(result, ids); end

  # Clone or dup the current +Criteria+. This will return a new criteria with
  # the selector, options, klass, embedded options, etc intact.
  #
  # @api private
  # @example Clone a criteria.
  #   criteria.clone
  # @example Dup a criteria.
  #   criteria.dup
  # @param other [Criteria] The criteria getting cloned.
  # @return [nil] nil.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#486
  def initialize_copy(other); end

  # For models where inheritance is at play we need to add the type
  # selection.
  #
  # @example Add the type selection.
  #   criteria.merge_type_selection
  # @return [true, false] If type selection was added.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/criteria.rb#527
  def merge_type_selection; end

  # Used for chaining +Criteria+ scopes together in the for of class methods
  # on the +Document+ the criteria is for.
  #
  # @example Handle method missing.
  #   criteria.method_missing(:name)
  # @param name [Symbol] The method name.
  # @param args [Array] The arguments.
  # @return [Object] The result of the method call.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria.rb#506
  def method_missing(name, *args, &block); end

  # Get a new selector with type selection in it.
  #
  # @api private
  # @example Get a selector with type selection.
  #   criteria.selector_with_type_selection
  # @return [Hash] The selector.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/criteria.rb#576
  def selector_with_type_selection; end

  # Is the criteria type selectable?
  #
  # @api private
  # @example If the criteria type selectable?
  #   criteria.type_selectable?
  # @return [true, false] If type selection should be added.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/criteria.rb#541
  def type_selectable?; end

  # Get the selector for type selection.
  #
  # @api private
  # @example Get a type selection hash.
  #   criteria.type_selection
  # @return [Hash] The type selection.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/criteria.rb#557
  def type_selection; end
end

# Static array used to check with method missing - we only need to ever
# instantiate once.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/criteria.rb#37
Mongoid::Criteria::CHECK = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/criteria/findable.rb#4
module Mongoid::Criteria::Findable
  # Execute the criteria or raise an error if no documents found.
  #
  # @example Execute or raise
  #   criteria.execute_or_raise(id)
  # @param ids [Object] The arguments passed.
  # @param multi [true, false] Whether there arguments were a list.
  # @raise [Errors::DocumentNotFound] If nothing returned.
  # @return [Document, Array<Document>] The document(s).
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#19
  def execute_or_raise(ids, multi); end

  # Find the matchind document(s) in the criteria for the provided ids.
  #
  # @example Find by an id.
  #   criteria.find(BSON::ObjectId.new)
  # @example Find by multiple ids.
  #   criteria.find([ BSON::ObjectId.new, BSON::ObjectId.new ])
  # @param args [Array<BSON::ObjectId>] The ids to search for.
  # @return [Array<Document>, Document] The matching document(s).
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#38
  def find(*args); end

  # Adds a criterion to the +Criteria+ that specifies an id that must be matched.
  #
  # @example Add a single id criteria.
  #   criteria.for_ids([ 1 ])
  # @example Add multiple id criteria.
  #   criteria.for_ids([ 1, 2 ])
  # @param ids [Array] The array of ids.
  # @return [Criteria] The cloned criteria.
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#55
  def for_ids(ids); end

  # Get the documents from the identity map, and if not found hit the
  # database.
  #
  # @example Get the documents from the map or criteria.
  #   criteria.multiple_from_map_or_db(ids)
  # @param ids [Array<Object>] The searched ids.
  # @return [Array<Document>] The found documents.
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#73
  def multiple_from_db(ids); end

  private

  # Get documents from the database only.
  #
  # @api private
  # @example Get documents from the database.
  #   criteria.from_database(ids)
  # @param ids [Array<Object>] The ids to fetch with.
  # @return [Array<Document>] The matching documents.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#107
  def from_database(ids); end

  # Get the finder used to generate the id query.
  #
  # @api private
  # @example Get the id finder.
  #   criteria.id_finder
  # @return [Symbol] The name of the finder method.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#91
  def id_finder; end

  # Convert all the ids to their proper types.
  #
  # @api private
  # @example Convert the ids.
  #   criteria.mongoize_ids(ids)
  # @param ids [Array<Object>] The ids to convert.
  # @return [Array<Object>] The converted ids.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#123
  def mongoize_ids(ids); end

  # Convenience method of raising an invalid options error.
  #
  # @example Raise the error.
  #   criteria.raise_invalid
  # @raise [Errors::InvalidOptions] The error.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/findable.rb#138
  def raise_invalid; end
end

# Module providing functionality for parsing (nested) inclusion definitions.
#
# source://mongoid//lib/mongoid/criteria/includable.rb#6
module Mongoid::Criteria::Includable
  # Eager loads all the provided relations. Will load all the documents
  # into the identity map whose ids match based on the extra query for the
  # ids.
  #
  # @example Eager load the provided relations.
  #   Person.includes(:posts, :game)
  # @note This will work for embedded relations that reference another
  #   collection via belongs_to as well.
  # @note Eager loading brings all the documents into memory, so there is a
  #   sweet spot on the performance gains. Internal benchmarks show that
  #   eager loading becomes slower around 100k documents, but this will
  #   naturally depend on the specific application.
  # @param relations [Array<Symbol>, Array<Hash>] The names of the relations to eager
  #   load.
  # @return [Criteria] The cloned criteria.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/criteria/includable.rb#29
  def includes(*relations); end

  # Get a list of criteria that are to be executed for eager loading.
  #
  # @example Get the eager loading inclusions.
  #   Person.includes(:game).inclusions
  # @return [Array<Association>] The inclusions.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/criteria/includable.rb#42
  def inclusions; end

  # Set the inclusions for the criteria.
  #
  # @example Set the inclusions.
  #   criteria.inclusions = [ association ]
  # @param value [Array<Association>] The inclusions.
  # @return [Array<Association>] The new inclusions.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/includable.rb#56
  def inclusions=(value); end

  private

  # Add an inclusion definition to the list of inclusions for the criteria.
  #
  # @example Add an inclusion.
  #   criteria.add_inclusion(Person, :posts)
  # @param _klass [Class, String, Symbol] The class or string/symbol of the class name.
  # @param association [Symbol] The relation.
  # @raise [Errors::InvalidIncludes] If no relation is found.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/criteria/includable.rb#73
  def add_inclusion(_klass, association); end

  # source://mongoid//lib/mongoid/criteria/includable.rb#77
  def extract_includes_list(_parent_class, *relations_list); end
end

# source://mongoid//lib/mongoid/criteria/inspectable.rb#4
module Mongoid::Criteria::Inspectable
  # Get a pretty string representation of the criteria, including the
  # selector, options, matching count and documents for inspection.
  #
  # @example Inspect the criteria.
  #   criteria.inspect
  # @return [String] The inspection string.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/inspectable.rb#15
  def inspect; end
end

# source://mongoid//lib/mongoid/criteria/marshalable.rb#4
module Mongoid::Criteria::Marshalable
  # Provides the data needed to Marshal.dump a criteria.
  #
  # @example Dump the criteria.
  #   Marshal.dump(criteria)
  # @return [Array<Object>] The dumped data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/criteria/marshalable.rb#14
  def marshal_dump; end

  # Resets the criteria object after a Marshal.load
  #
  # @example Load the criteria.
  #   Marshal.load(criteria)
  # @param data [Array] The raw data.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/criteria/marshalable.rb#27
  def marshal_load(data); end

  private

  # source://mongoid//lib/mongoid/criteria/marshalable.rb#36
  def dump_hash(name); end

  # source://mongoid//lib/mongoid/criteria/marshalable.rb#43
  def load_hash(hash_class, raw); end
end

# source://mongoid//lib/mongoid/criteria/modifiable.rb#4
module Mongoid::Criteria::Modifiable
  # Build a document given the selector and return it.
  # Complex criteria, such as $in and $or operations will get ignored.
  #
  # @example build the document.
  #   Person.where(:title => "Sir").build
  # @example Build with selectors getting ignored.
  #   Person.where(:age.gt => 5).build
  # @return [Document] A non-persisted document.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#22
  def build(attrs = T.unsafe(nil), &block); end

  # Create a document in the database given the selector and return it.
  # Complex criteria, such as $in and $or operations will get ignored.
  #
  # @example Create the document.
  #   Person.where(:title => "Sir").create
  # @example Create with selectors getting ignored.
  #   Person.where(:age.gt => 5).create
  # @return [Document] A newly created document.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#39
  def create(attrs = T.unsafe(nil), &block); end

  # Create a document in the database given the selector and return it.
  # Complex criteria, such as $in and $or operations will get ignored.
  # If validation fails, an error will be raised.
  #
  # @example Create the document.
  #   Person.where(:title => "Sir").create
  # @example Create with selectors getting ignored.
  #   Person.where(:age.gt => 5).create
  # @raise [Errors::Validations] on a validation error.
  # @return [Document] A newly created document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#58
  def create!(attrs = T.unsafe(nil), &block); end

  # @api private
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#8
  def create_attrs; end

  # Define attributes with which new documents will be created.
  #
  # Note that if `find_or_create_by` is called after this in a method chain, the attributes in
  # the query will override those from this method.
  #
  # @example Define attributes to be used when a new document is created.
  #   Person.create_with(job: 'Engineer').find_or_create_by(employer: 'MongoDB')
  # @return [Mongoid::Criteria] A criteria.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#73
  def create_with(attrs = T.unsafe(nil)); end

  # Find the first +Document+ given the conditions, or creates a new document
  # with the conditions that were supplied.
  #
  # @example Find or create the document.
  #   Person.find_or_create_by(:attribute => "value")
  # @param attrs [Hash] The attributes to check.
  # @return [Document] A matching or newly created document.
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#89
  def find_or_create_by(attrs = T.unsafe(nil), &block); end

  # Find the first +Document+ given the conditions, or creates a new document
  # with the conditions that were supplied. If validation fails an
  # exception will be raised.
  #
  # @example Find or create the document.
  #   Person.find_or_create_by!(:attribute => "value")
  # @param attrs [Hash] The attributes to check.
  # @raise [Errors::Validations] on validation error.
  # @return [Document] A matching or newly created document.
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#105
  def find_or_create_by!(attrs = T.unsafe(nil), &block); end

  # Find the first +Document+ given the conditions, or initializes a new document
  # with the conditions that were supplied.
  #
  # @example Find or initialize the document.
  #   Person.find_or_initialize_by(:attribute => "value")
  # @param attrs [Hash] The attributes to check.
  # @return [Document] A matching or newly initialized document.
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#118
  def find_or_initialize_by(attrs = T.unsafe(nil), &block); end

  # Find the first +Document+, or creates a new document
  # with the conditions that were supplied plus attributes.
  #
  # @example First or create the document.
  #   Person.where(name: "Jon").first_or_create(attribute: "value")
  # @param attrs [Hash] The additional attributes to add.
  # @return [Document] A matching or newly created document.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#133
  def first_or_create(attrs = T.unsafe(nil), &block); end

  # Find the first +Document+, or creates a new document
  # with the conditions that were supplied plus attributes and will
  # raise an error if validation fails.
  #
  # @example First or create the document.
  #   Person.where(name: "Jon").first_or_create!(attribute: "value")
  # @param attrs [Hash] The additional attributes to add.
  # @return [Document] A matching or newly created document.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#149
  def first_or_create!(attrs = T.unsafe(nil), &block); end

  # Find the first +Document+, or initializes a new document
  # with the conditions that were supplied plus attributes.
  #
  # @example First or initialize the document.
  #   Person.where(name: "Jon").first_or_initialize(attribute: "value")
  # @param attrs [Hash] The additional attributes to add.
  # @return [Document] A matching or newly initialized document.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#164
  def first_or_initialize(attrs = T.unsafe(nil), &block); end

  # Build a document given the selector and return it.
  # Complex criteria, such as $in and $or operations will get ignored.
  #
  # @example build the document.
  #   Person.where(:title => "Sir").build
  # @example Build with selectors getting ignored.
  #   Person.where(:age.gt => 5).build
  # @return [Document] A non-persisted document.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#22
  def new(attrs = T.unsafe(nil), &block); end

  private

  # Create a document given the provided method and attributes from the
  # existing selector.
  #
  # @api private
  # @example Create a new document.
  #   criteria.create_document(:new, {})
  # @param method [Symbol] Either :new or :create.
  # @param attrs [Hash] Additional attributes to use.
  # @return [Document] The new or saved document.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#184
  def create_document(method, attrs = T.unsafe(nil), &block); end

  # Find the first object or create/initialize it.
  #
  # @api private
  # @example Find or perform an action.
  #   Person.find_or(:create, :name => "Dev")
  # @param method [Symbol] The method to invoke.
  # @param attrs [Hash] The attributes to query or set.
  # @return [Document] The first or new document.
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#214
  def find_or(method, attrs = T.unsafe(nil), &block); end

  # Find the first document or create/initialize it.
  #
  # @api private
  # @example First or perform an action.
  #   Person.first_or(:create, :name => "Dev")
  # @param method [Symbol] The method to invoke.
  # @param attrs [Hash] The attributes to query or set.
  # @return [Document] The first or new document.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#231
  def first_or(method, attrs = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#243
  def invalid_embedded_doc?(value); end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/criteria/modifiable.rb#237
  def invalid_key?(hash, key); end
end

# Module containing functionality for getting options on a Criteria object.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/criteria/options.rb#8
module Mongoid::Criteria::Options
  private

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/criteria/options.rb#20
  def clear_persistence_context(original_cluster, original_context); end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/criteria/options.rb#12
  def persistence_context; end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/criteria/options.rb#16
  def set_persistence_context(options); end
end

# A queryable is any object that needs queryable's dsl injected into it to build
# MongoDB queries. For example, a Mongoid::Criteria is an Queryable.
#
# @example Include queryable functionality.
#   class Criteria
#   include Queryable
#   end
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#4
module Mongoid::Criteria::Queryable
  include ::Mongoid::Criteria::Queryable::Mergeable
  include ::Mongoid::Criteria::Queryable::Aggregable
  include ::Mongoid::Criteria::Queryable::Selectable
  include ::Mongoid::Criteria::Queryable::Optional

  # Initialize the new queryable. Will yield itself to the block if a block
  # is provided for objects that need additional behaviour.
  #
  # @example Initialize the queryable.
  #   Queryable.new
  # @param aliases [Hash] The optional field aliases.
  # @param serializers [Hash] The optional field serializers.
  # @param driver [Symbol] The driver being used.
  # @since 1.0.0
  # @yield [_self]
  # @yieldparam _self [Mongoid::Criteria::Queryable] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#63
  def initialize(aliases = T.unsafe(nil), serializers = T.unsafe(nil), driver = T.unsafe(nil)); end

  # Is this queryable equal to another object? Is true if the selector and
  # options are equal.
  #
  # @example Are the objects equal?
  #   queryable == criteria
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#47
  def ==(other); end

  # Returns the value of attribute aliases.
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#34
  def aliases; end

  # Returns the value of attribute driver.
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#34
  def driver; end

  # Returns the value of attribute serializers.
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#34
  def serializers; end

  private

  # Handle the creation of a copy via #clone or #dup.
  #
  # @example Handle copy initialization.
  #   queryable.initialize_copy(criteria)
  # @param other [Queryable] The original copy.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable.rb#80
  def initialize_copy(other); end
end

# Provides a DSL around crafting aggregation framework commands.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#9
module Mongoid::Criteria::Queryable::Aggregable
  extend ::Mongoid::Criteria::Queryable::Macroable

  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#16
  def aggregating=(_arg0); end

  # Has the aggregable enter an aggregation state. Ie, are only aggregation
  # operations allowed at this point on.
  #
  # @example Is the aggregable aggregating?
  #   aggregable.aggregating?
  # @return [true, false] If the aggregable is aggregating.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#27
  def aggregating?; end

  # Add a group ($group) operation to the aggregation pipeline.
  #
  # @example Add a group operation being verbose.
  #   aggregable.group(count: { "$sum" => 1 }, max: { "$max" => "likes" })
  # @example Add a group operation using symbol shortcuts.
  #   aggregable.group(:count.sum => 1, :max.max => "likes")
  # @param operation [Hash] The group operation.
  # @return [Aggregable] The aggregable.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#44
  def group(operation); end

  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#13
  def pipeline; end

  # Add a projection ($project) to the aggregation pipeline.
  #
  # @example Add a projection to the pipeline.
  #   aggregable.project(author: 1, name: 0)
  # @param operation [Hash] The projection to make.
  # @return [Aggregable] The aggregable.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#68
  def project(operation = T.unsafe(nil)); end

  # Add an unwind ($unwind) to the aggregation pipeline.
  #
  # @example Add an unwind to the pipeline.
  #   aggregable.unwind(:field)
  # @param field [String, Symbol] The name of the field to unwind.
  # @return [Aggregable] The aggregable.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#84
  def unwind(field); end

  private

  # Add the aggregation operation.
  #
  # @api private
  # @example Aggregate on the operation.
  #   aggregation(operation) do |pipeline|
  #   pipeline.push("$project" => operation)
  #   end
  # @param operation [Hash] The operation for the pipeline.
  # @return [Aggregable] The cloned aggregable.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/aggregable.rb#106
  def aggregation(operation); end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#5
module Mongoid::Criteria::Queryable::Extensions; end

# The array module adds custom behaviour for Origin onto the Array class.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#8
module Mongoid::Criteria::Queryable::Extensions::Array
  # Combine the two objects using the add strategy.
  #
  # @example Add the object to the array.
  #   [ 1, 2, 3 ].__add__(4)
  # @param object [Object] The object to add.
  # @return [Object] The result of the add.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#20
  def __add__(object); end

  # Return the object as an array.
  #
  # @example Get the array.
  #   [ 1, 2 ].__array__
  # @return [Array] self
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#32
  def __array__; end

  # Makes a deep copy of the array, deep copying every element inside the
  # array.
  #
  # @example Get a deep copy of the array.
  #   [ 1, 2, 3 ].__deep_copy__
  # @return [Array] The deep copy of the array.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#43
  def __deep_copy__; end

  # Evolve the array into an array of mongo friendly dates. (Times at
  # midnight).
  #
  # @example Evolve the array to dates.
  #   [ Date.new(2010, 1, 1) ].__evolve_date__
  # @return [Array<Time>] The array as times at midnight UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#56
  def __evolve_date__; end

  # Evolve the array to an array of times.
  #
  # @example Evolve the array to times.
  #   [ 1231231231 ].__evolve_time__
  # @return [Array<Time>] The array as times.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#82
  def __evolve_time__; end

  # Get the object as expanded.
  #
  # @example Get the object expanded.
  #   obj.__expand_complex__
  # @return [Array] The expanded array.
  # @since 1.1.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#68
  def __expand_complex__; end

  # Combine the two objects using an intersection strategy.
  #
  # @example Interset with the object.
  #   [ 1, 2 ].__intersect__(3)
  # @param object [Object] The object to intersect with.
  # @return [Object] The result of the intersection.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#96
  def __intersect__(object); end

  # Gets the array as options in the proper format to pass as MongoDB sort
  # criteria.
  #
  # @example Get the array as sorting options.
  #   [ :field, 1 ].__sort_option__
  # @return [Hash] The array as sort criterion.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#109
  def __sort_option__; end

  # Get the array as a sort pair.
  #
  # @example Get the array as field/direction pair.
  #   [ field, 1 ].__sort_pair__
  # @return [Hash] The field/direction pair.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#124
  def __sort_pair__; end

  # Update all the values in the hash with the provided block.
  #
  # @example Update the values in place.
  #   [ 1, 2, 3 ].update_values(&:to_s)
  # @param block [Proc] The block to execute on each value.
  # @return [Array] the array.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#138
  def update_values(&block); end

  private

  # Converts the array to a multi-dimensional array.
  #
  # @api private
  # @example Convert to multi-dimensional.
  #   [ 1, 2, 3 ].multi
  # @return [Array] The multi-dimensional array.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#154
  def multi; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#158
module Mongoid::Criteria::Queryable::Extensions::Array::ClassMethods
  # Evolve the object when the serializer is defined as an array.
  #
  # @example Evolve the object.
  #   Array.evolve(1)
  # @param object [Object] The object to evolve.
  # @return [Object] The evolved object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/array.rb#170
  def evolve(object); end
end

# The big decimal module adds custom behaviour for Origin onto the
# BigDecimal class.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/big_decimal.rb#11
module Mongoid::Criteria::Queryable::Extensions::BigDecimal; end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/big_decimal.rb#12
module Mongoid::Criteria::Queryable::Extensions::BigDecimal::ClassMethods
  # Evolves the big decimal into a MongoDB friendly value - in this case
  # a string.
  #
  # @example Evolve the big decimal
  #   BigDecimal.evolve(decimal)
  # @param object [BigDecimal] The object to convert.
  # @return [String] The big decimal as a string.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/big_decimal.rb#25
  def evolve(object); end
end

# This module contains extensions for boolean selection.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/boolean.rb#8
module Mongoid::Criteria::Queryable::Extensions::Boolean; end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/boolean.rb#9
module Mongoid::Criteria::Queryable::Extensions::Boolean::ClassMethods
  # Evolve the value into a boolean value stored in MongoDB. Will return
  # true for any of these values: true, t, yes, y, 1, 1.0.
  #
  # @example Evolve the value to a boolean.
  #   Boolean.evolve(true)
  # @param object [Object] The object to evolve.
  # @return [true, false] The boolean value.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/boolean.rb#22
  def evolve(object); end
end

# This module contains additional date behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/date.rb#8
module Mongoid::Criteria::Queryable::Extensions::Date
  # Evolve the date into a mongo friendly time, UTC midnight.
  #
  # @example Evolve the date.
  #   date.__evolve_date__
  # @return [Time] The date as a UTC time at midnight.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/date.rb#18
  def __evolve_date__; end

  # Evolve the date into a time, which is always in the local timezone.
  #
  # @example Evolve the date.
  #   date.__evolve_time__
  # @return [Time] The date as a local time.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/date.rb#30
  def __evolve_time__; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/date.rb#34
module Mongoid::Criteria::Queryable::Extensions::Date::ClassMethods
  # Evolve the object to an date.
  #
  # @example Evolve dates.
  #   Date.evolve(Date.new(1990, 1, 1))
  # @example Evolve string dates.
  #   Date.evolve("1990-1-1")
  # @example Evolve date ranges.
  #   Date.evolve(Date.new(1990, 1, 1)..Date.new(1990, 1, 4))
  # @param object [Object] The object to evolve.
  # @return [Time] The evolved date.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/date.rb#52
  def evolve(object); end
end

# This module contains additional datetime behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/date_time.rb#8
module Mongoid::Criteria::Queryable::Extensions::DateTime
  # Evolve the date time into a mongo friendly UTC time.
  #
  # @example Evolve the date time.
  #   date_time.__evolve_time__
  # @return [Time] The converted time in UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/date_time.rb#18
  def __evolve_time__; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/date_time.rb#27
module Mongoid::Criteria::Queryable::Extensions::DateTime::ClassMethods
  # Evolve the object to an date.
  #
  # @example Evolve dates.
  # @example Evolve string dates.
  # @example Evolve date ranges.
  # @param object [Object] The object to evolve.
  # @return [Time] The evolved date time.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/date_time.rb#42
  def evolve(object); end
end

# This module contains additional hash behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#8
module Mongoid::Criteria::Queryable::Extensions::Hash
  # Add an object to a hash using the merge strategies.
  #
  # @example Add an object to a hash.
  #   { field: value }.__add__({ field: other_value })
  # @param object [Hash] The other hash to add.
  # @return [Hash] The hash with object added.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#20
  def __add__(object); end

  # Merge this hash into the provided array.
  #
  # @example Merge the hash into the array.
  #   { field: value }.__add_from_array__([ 1, 2 ])
  # @param array [Array] The array to add to.
  # @return [Hash] The merged hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#34
  def __add_from_array__(array); end

  # Make a deep copy of this hash.
  #
  # @example Make a deep copy of the hash.
  #   { field: value }.__deep_copy__
  # @return [Hash] The copied hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#116
  def __deep_copy__; end

  # Get the object as expanded.
  #
  # @example Get the object expanded.
  #   obj.__expand_complex__
  # @return [Hash] The expanded hash.
  # @since 1.0.5
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#148
  def __expand_complex__; end

  # Add an object to a hash using the merge strategies.
  #
  # @example Add an object to a hash.
  #   { field: value }.__intersect__({ field: other_value })
  # @param object [Hash] The other hash to intersect.
  # @return [Hash] The hash with object intersected.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#48
  def __intersect__(object); end

  # Merge this hash into the provided array.
  #
  # @example Merge the hash into the array.
  #   { field: value }.__intersect_from_array__([ 1, 2 ])
  # @param array [Array] The array to intersect to.
  # @return [Hash] The merged hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#62
  def __intersect_from_array__(array); end

  # Merge this hash into the provided object.
  #
  # @example Merge the hash into the object.
  #   { field: value }.__intersect_from_object__([ 1, 2 ])
  # @param object [Object] The object to intersect to.
  # @return [Hash] The merged hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#76
  def __intersect_from_object__(object); end

  # Get the hash as a sort option.
  #
  # @example Get the hash as a sort option.
  #   { field: 1 }.__sort_option__
  # @return [Hash] The hash as sort option.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#132
  def __sort_option__; end

  # Add an object to a hash using the merge strategies.
  #
  # @example Add an object to a hash.
  #   { field: value }.__union__({ field: other_value })
  # @param object [Hash] The other hash to union.
  # @return [Hash] The hash with object unioned.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#90
  def __union__(object); end

  # Merge this hash into the provided object.
  #
  # @example Merge the hash into the object.
  #   { field: value }.__union_from_object__([ 1, 2 ])
  # @param object [Object] The object to union to.
  # @return [Hash] The merged hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#104
  def __union_from_object__(object); end

  # Update all the values in the hash with the provided block.
  #
  # @example Update the values in place.
  #   { field: "1" }.update_values(&:to_i)
  # @param block [Proc] The block to execute on each value.
  # @return [Hash] the hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#166
  def update_values(&block); end

  private

  # Apply the provided strategy for the hash with the given object.
  #
  # @api private
  # @example Apply the strategy.
  #   { field: value }.apply_strategy(:__add__, 1)
  # @param strategy [Symbol] The strategy to apply.
  # @param object [Object] The object to merge.
  # @return [Hash] The merged hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/hash.rb#187
  def apply_strategy(strategy, object); end
end

# This module contains additional nil behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#8
module Mongoid::Criteria::Queryable::Extensions::NilClass
  # Add this object to nil.
  #
  # @example Add the object to a nil value.
  #   nil.__add__([ 1, 2, 3 ])
  # @param object [Object] The object to add.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#20
  def __add__(object); end

  # Evolve the nil into a date or time.
  #
  # @example Evolve the nil.
  #   nil.__evolve_time__
  # @return [nil] nil.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#42
  def __evolve_date__; end

  # Evolve the nil into a date or time.
  #
  # @example Evolve the nil.
  #   nil.__evolve_time__
  # @return [nil] nil.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#42
  def __evolve_time__; end

  # Add this object to nil.
  #
  # @example Add the object to a nil value.
  #   nil.__expanded__([ 1, 2, 3 ])
  # @param object [Object] The object to expanded.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#32
  def __expanded__(object); end

  # Add this object to nil.
  #
  # @example Add the object to a nil value.
  #   nil.__intersect__([ 1, 2, 3 ])
  # @param object [Object] The object to intersect.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#55
  def __intersect__(object); end

  # Add this object to nil.
  #
  # @example Add the object to a nil value.
  #   nil.__override__([ 1, 2, 3 ])
  # @param object [Object] The object to override.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#67
  def __override__(object); end

  # Add this object to nil.
  #
  # @example Add the object to a nil value.
  #   nil.__union__([ 1, 2, 3 ])
  # @param object [Object] The object to union.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/nil_class.rb#79
  def __union__(object); end
end

# This module contains additional numeric behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#8
module Mongoid::Criteria::Queryable::Extensions::Numeric
  # Evolve the numeric value into a mongo friendly date, aka UTC time at
  # midnight.
  #
  # @example Evolve to a date.
  #   125214512412.1123.__evolve_date__
  # @return [Time] The time representation at UTC midnight.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#19
  def __evolve_date__; end

  # Evolve the numeric value into a mongo friendly time.
  #
  # @example Evolve to a time.
  #   125214512412.1123.__evolve_time__
  # @return [Time] The time representation.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#32
  def __evolve_time__; end

  # Get the integer as a sort direction.
  #
  # @example Get the integer as a sort direction.
  #   1.to_direction
  # @return [Integer] self.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#44
  def to_direction; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#46
module Mongoid::Criteria::Queryable::Extensions::Numeric::ClassMethods
  # Get the object as a numeric.
  #
  # @api private
  # @example Get the object as numeric.
  #   Object.__numeric__("1.442")
  # @param object [Object] The object to convert.
  # @return [Object] The converted number.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#60
  def __numeric__(object); end

  # Evolve the object to an integer.
  #
  # @example Evolve to integers.
  #   Integer.evolve("1")
  # @param object [Object] The object to evolve.
  # @return [Integer] The evolved object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/numeric.rb#74
  def evolve(object); end
end

# This module contains additional object behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#8
module Mongoid::Criteria::Queryable::Extensions::Object
  # Combine the two objects using the add strategy.
  #
  # @example Add the object to the array.
  #   [ 1, 2, 3 ].__add__(4)
  # @param object [Object] The object to add.
  # @return [Object] The result of the add.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#20
  def __add__(object); end

  # Merge this object into the provided array.
  #
  # @example Merge the object into the array.
  #   4.__add_from_array__([ 1, 2 ])
  # @param array [Array] The array to add to.
  # @return [Array] The merged object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#34
  def __add_from_array__(array); end

  # Get the object as an array.
  #
  # @example Get the object as an array.
  #   4.__array__
  # @return [Array] The wrapped object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#127
  def __array__; end

  # Deep copy the object. This is for API compatibility, but needs to be
  # overridden.
  #
  # @example Deep copy the object.
  #   1.__deep_copy__
  # @return [Object] self.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#117
  def __deep_copy__; end

  # Get the object as expanded.
  #
  # @example Get the object expanded.
  #   obj.__expand_complex__
  # @return [Object] self.
  # @since 1.0.5
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#139
  def __expand_complex__; end

  # Combine the two objects using the intersect strategy.
  #
  # @example Add the object to the array.
  #   [ 1, 2, 3 ].__intersect__(4)
  # @param object [Object] The object to intersect.
  # @return [Array] The result of the intersect.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#48
  def __intersect__(object); end

  # Merge this object into the provided array.
  #
  # @example Merge the object into the array.
  #   4.__intersect_from_array__([ 1, 2 ])
  # @param array [Array] The array to intersect to.
  # @return [Array] The merged object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#62
  def __intersect_from_array__(array); end

  # Merge this object into the provided array.
  #
  # @example Merge the object into the array.
  #   4.__intersect_from_object__([ 1, 2 ])
  # @param object [Object] The value to intersect to.
  # @return [Array] The merged object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#76
  def __intersect_from_object__(object); end

  # Combine the two objects using the union strategy.
  #
  # @example Add the object to the array.
  #   [ 1, 2, 3 ].__union__(4)
  # @param object [Object] The object to union.
  # @return [Array] The result of the union.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#90
  def __union__(object); end

  # Merge this object into the provided array.
  #
  # @example Merge the object into the array.
  #   4.__union_from_object__([ 1, 2 ])
  # @param object [Object] The value to union to.
  # @return [Array] The merged object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#104
  def __union_from_object__(object); end

  # Is the object a regex.
  #
  # @example Is the object a regex?
  #   obj.regexp?
  # @return [false] Always false.
  # @since 1.0.4
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#151
  def regexp?; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#155
module Mongoid::Criteria::Queryable::Extensions::Object::ClassMethods
  # Evolve the object.
  #
  # @example Evolve an object.
  #   Object.evolve("test")
  # @note This is here for API compatibility.
  # @return [Object] The provided object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#167
  def evolve(object); end

  private

  # Evolve the object.
  #
  # @api private
  # @example Evolve an object and yield.
  #   Object.evolve("test") do |obj|
  #   obj.to_s
  #   end
  # @return [Object] The evolved object.
  # @since 1.0.0
  # @todo Durran refactor out case statement.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/object.rb#187
  def __evolve__(object); end
end

# This module contains additional range behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#8
module Mongoid::Criteria::Queryable::Extensions::Range
  # Get the range as an array.
  #
  # @example Get the range as an array.
  #   1...3.__array__
  # @return [Array] The range as an array.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#18
  def __array__; end

  # Convert the range to a min/max mongo friendly query for dates.
  #
  # @example Evolve the range.
  #   (11231312..213123131).__evolve_date__
  # @return [Hash] The min/max range query with times at midnight.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#30
  def __evolve_date__; end

  # Convert the range to a min/max mongo friendly query for times.
  #
  # @example Evolve the range.
  #   (11231312..213123131).__evolve_date__
  # @return [Hash] The min/max range query with times.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#42
  def __evolve_time__; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#46
module Mongoid::Criteria::Queryable::Extensions::Range::ClassMethods
  # Evolve the range. This will transform it into a $gte/$lte selection.
  #
  # @example Evolve the range.
  #   Range.evolve(1..3)
  # @param object [Range] The range to evolve.
  # @return [Hash] The range as a gte/lte criteria.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/range.rb#58
  def evolve(object); end
end

# This module contains additional regex behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#8
module Mongoid::Criteria::Queryable::Extensions::Regexp
  # Is the object a regexp?
  #
  # @example Is the object a regex?
  #   /\A[123]/.regexp?
  # @return [true] Always true.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#18
  def regexp?; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#20
module Mongoid::Criteria::Queryable::Extensions::Regexp::ClassMethods
  # Evolve the object into a regex.
  #
  # @example Evolve the object to a regex.
  #   Regexp.evolve("\A[123]")
  # @param object [Regexp, String] The object to evolve.
  # @return [Regexp] The evolved regex.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#32
  def evolve(object); end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#39
module Mongoid::Criteria::Queryable::Extensions::Regexp::Raw
  # Is the object a regexp?
  #
  # @example Is the object a regex?
  #   bson_raw_regexp.regexp?
  # @return [true] Always true.
  # @since 5.2.1
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#49
  def regexp?; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#51
module Mongoid::Criteria::Queryable::Extensions::Regexp::Raw::ClassMethods
  # Evolve the object into a raw bson regex.
  #
  # @example Evolve the object to a regex.
  #   BSON::Regexp::Raw.evolve("\\A[123]")
  # @param object [BSON::Regexp::Raw, String] The object to evolve.
  # @return [BSON::Regexp::Raw] The evolved raw regex.
  # @since 5.2.1
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/regexp.rb#63
  def evolve(object); end
end

# This module contains additional object behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/set.rb#10
module Mongoid::Criteria::Queryable::Extensions::Set; end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/set.rb#11
module Mongoid::Criteria::Queryable::Extensions::Set::ClassMethods
  # Evolve the set, casting all its elements.
  #
  # @example Evolve the set.
  #   Set.evolve(set)
  # @param object [Set, Object] The object to evolve.
  # @return [Array] The evolved set.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/set.rb#23
  def evolve(object); end
end

# This module contains additional object behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#8
module Mongoid::Criteria::Queryable::Extensions::String
  # Evolve the string into a mongodb friendly date.
  #
  # @example Evolve the string.
  #   "2012-1-1".__evolve_date__
  # @return [Time] The time at UTC midnight.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#18
  def __evolve_date__; end

  # Evolve the string into a mongodb friendly time.
  #
  # @example Evolve the string.
  #   "2012-1-1".__evolve_time__
  # @return [Time] The string as a time.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#31
  def __evolve_time__; end

  # Get the string as a specification.
  #
  # @example Get the string as a criteria.
  #   "field".__expr_part__(value)
  # @param value [Object] The value of the criteria.
  # @param negating [true, false] If the selection should be negated.
  # @return [Hash] The selection.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#75
  def __expr_part__(value, negating = T.unsafe(nil)); end

  # Get the string as a mongo expression, adding $ to the front.
  #
  # @example Get the string as an expression.
  #   "test".__mongo_expression__
  # @return [String] The string with $ at the front.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#43
  def __mongo_expression__; end

  # Get the string as a sort option.
  #
  # @example Get the string as a sort option.
  #   "field ASC".__sort_option__
  # @return [Hash] The string as a sort option hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#55
  def __sort_option__; end

  # Get the string as a sort direction.
  #
  # @example Get the string as a sort direction.
  #   "1".to_direction
  # @return [Integer] The direction.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#87
  def to_direction; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#91
module Mongoid::Criteria::Queryable::Extensions::String::ClassMethods
  # Get the value as a expression.
  #
  # @example Get the value as an expression.
  #   String.__expr_part__("field", value)
  # @param key [String, Symbol] The field key.
  # @param value [Object] The value of the criteria.
  # @param negating [true, false] If the selection should be negated.
  # @return [Hash] The selection.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#105
  def __expr_part__(key, value, negating = T.unsafe(nil)); end

  # Evolves the string into a MongoDB friendly value - in this case
  # a string.
  #
  # @example Evolve the string
  #   String.evolve(1)
  # @param object [Object] The object to convert.
  # @return [String] The value as a string.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/string.rb#124
  def evolve(object); end
end

# This module contains additional symbol behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#8
module Mongoid::Criteria::Queryable::Extensions::Symbol
  # Get the symbol as a specification.
  #
  # @example Get the symbol as a criteria.
  #   :field.__expr_part__(value)
  # @param value [Object] The value of the criteria.
  # @param negating [true, false] If the selection should be negated.
  # @return [Hash] The selection.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#21
  def __expr_part__(value, negating = T.unsafe(nil)); end

  # Get the symbol as a sort direction.
  #
  # @example Get the symbol as a sort direction.
  #   "1".to_direction
  # @return [Integer] The direction.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#33
  def to_direction; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#37
module Mongoid::Criteria::Queryable::Extensions::Symbol::ClassMethods
  # Adds a method on symbol as a convenience for the MongoDB operator.
  #
  # @example Add the $in method.
  #   Symbol.add_key(:in, "$in")
  # @param name [Symbol] The name of the method.
  # @param strategy [Symbol] The name of the merge strategy.
  # @param operator [String] The MongoDB operator.
  # @param additional [String] The additional MongoDB operator.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#50
  def add_key(name, strategy, operator, additional = T.unsafe(nil), &block); end

  # Evolves the symbol into a MongoDB friendly value - in this case
  # a symbol.
  #
  # @example Evolve the symbol
  #   Symbol.evolve("test")
  # @param object [Object] The object to convert.
  # @return [Symbol] The value as a symbol.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/symbol.rb#68
  def evolve(object); end
end

# This module contains additional time behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/time.rb#8
module Mongoid::Criteria::Queryable::Extensions::Time
  # Evolve the time as a date, UTC midnight.
  #
  # @example Evolve the time to a date query format.
  #   time.__evolve_date__
  # @return [Time] The date at midnight UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time.rb#18
  def __evolve_date__; end

  # Evolve the time into a utc time.
  #
  # @example Evolve the time.
  #   time.__evolve_time__
  # @return [Time] The time in UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time.rb#30
  def __evolve_time__; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/time.rb#34
module Mongoid::Criteria::Queryable::Extensions::Time::ClassMethods
  # Evolve the object to an date.
  #
  # @example Evolve dates.
  # @example Evolve string dates.
  # @example Evolve date ranges.
  # @param object [Object] The object to evolve.
  # @return [Time] The evolved date time.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time.rb#49
  def evolve(object); end
end

# This module contains additional time with zone behaviour.
#
# source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#8
module Mongoid::Criteria::Queryable::Extensions::TimeWithZone
  # Evolve the time as a date, UTC midnight.
  #
  # @example Evolve the time to a date query format.
  #   time.__evolve_date__
  # @return [Time] The date at midnight UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#18
  def __evolve_date__; end

  # Evolve the time into a utc time.
  #
  # @example Evolve the time.
  #   time.__evolve_time__
  # @return [Time] The time in UTC.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#30
  def __evolve_time__; end
end

# source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#34
module Mongoid::Criteria::Queryable::Extensions::TimeWithZone::ClassMethods
  # Evolve the object to an date.
  #
  # @example Evolve dates.
  # @example Evolve string dates.
  # @example Evolve date ranges.
  # @param object [Object] The object to evolve.
  # @return [Time] The evolved date time.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/extensions/time_with_zone.rb#49
  def evolve(object); end
end

# Allows for easy delegation of queryable queryable instance methods to a
# specific method.
#
# source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#8
module Mongoid::Criteria::Queryable::Forwardable
  # Tells queryable with method on the class to delegate to when calling an
  # original selectable or optional method on the class.
  #
  # @example Tell queryable where to select from.
  #   class Band
  #   extend Queryable::Forwardable
  #   select_with :criteria
  #
  #   def self.criteria
  #   Query.new
  #   end
  #   end
  # @param receiver [Symbol] The name of the receiver method.
  # @return [Array<Symbol>] The names of the forwarded methods.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#28
  def select_with(receiver); end

  private

  # Forwards the method name to the provided receiver method.
  #
  # @api private
  # @example Define the forwarding.
  #   Model.__forward__(:exists, :criteria)
  # @param name [Symbol] The name of the method.
  # @param receiver [Symbol] The name of the receiver method.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#47
  def __forward__(name, receiver); end
end

# Key objects represent specifications for building query expressions
# utilizing MongoDB selectors.
#
# Simple key-value conditions are translated directly into expression
# hashes by Mongoid without utilizing Key objects. For example, the
# following condition:
#
#   Foo.where(price: 1)
#
# ... is translated to the following simple expression:
#
#   {price: 1}
#
# More complex conditions would start involving Key objects. For example:
#
#   Foo.where(:price.gt => 1)
#
# ... causes a Key instance to be created thusly:
#
#   Key.new(:price, :__override__, '$gt')
#
# This Key instance utilizes +operator+ but not +expanded+ nor +block+.
# The corresponding MongoDB query expression is:
#
#    {price: {'$gt' => 1}}
#
# A yet more more complex example is the following condition:
#
#   Foo.geo_spacial(:boundary.intersects_point => [1, 10])
#
# Processing this condition will cause a Key instance to be created as
# follows:
#
#   Key.new(:location, :__override__, '$geoIntersects', '$geometry') do |value|
#     { "type" => POINT, "coordinates" => value }
#   end
#
# ... eventually producing the following MongoDB query expression:
#
# {
#   boundary: {
#     '$geoIntersects' => {
#       '$geometry' => {
#         type: "Point" ,
#         coordinates: [ 1, 10 ]
#       }
#     }
#   }
# }
#
# Key instances can be thought of as procs that map a value to the
# MongoDB query expression required to obtain the key's condition,
# given the value.
#
# source://mongoid//lib/mongoid/criteria/queryable/key.rb#59
class Mongoid::Criteria::Queryable::Key
  # Instantiate the new key.
  #
  # @example Instantiate the key.
  #   Key.new("age", "$gt")
  # @param name [String, Symbol] The field name.
  # @param strategy [Symbol] The name of the merge strategy.
  # @param operator [String] The Mongo operator.
  # @param expanded [String] The Mongo expanded operator.
  # @return [Key] a new instance of Key
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#113
  def initialize(name, strategy, operator, expanded = T.unsafe(nil), &block); end

  # Does the key equal another object?
  #
  # @example Is the key equal to another?
  #   key == other
  #   key.eql? other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the objects are equal.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#87
  def ==(other); end

  # Gets the raw selector that would be passed to Mongo from this key.
  #
  # @example Specify the raw selector.
  #   key.__expr_part__(50)
  # @param object [Object] The value to be included.
  # @param negating [true, false] If the selection should be negated.
  # @return [Hash] The raw MongoDB selector.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#129
  def __expr_part__(object, negating = T.unsafe(nil)); end

  # Get the key as raw Mongo sorting options.
  #
  # @example Get the key as a sort.
  #   key.__sort_option__
  # @return [Hash] The field/direction pair.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#143
  def __sort_option__; end

  # Get the key as raw Mongo sorting options.
  #
  # @example Get the key as a sort.
  #   key.__sort_option__
  # @return [Hash] The field/direction pair.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#143
  def __sort_pair__; end

  # @return [Proc] The optional block to transform values.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#74
  def block; end

  # Does the key equal another object?
  #
  # @example Is the key equal to another?
  #   key == other
  #   key.eql? other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the objects are equal.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#87
  def eql?(other); end

  # @return [String] The MongoDB expanded query operator.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#68
  def expanded; end

  # Calculate the hash code for a key.
  #
  # @return [Fixnum] The hash code for the key.
  # @since 1.1.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#98
  def hash; end

  # @return [String | Symbol] The name of the field.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#62
  def name; end

  # @return [String] The MongoDB query operator.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#65
  def operator; end

  # @return [Symbol] The name of the merge strategy.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#71
  def strategy; end

  # Convert the key to a string.
  #
  # @example Convert the key to a string.
  #   key.to_s
  # @return [String] The key as a string.
  # @since 1.1.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/key.rb#156
  def to_s; end
end

# Adds macro behaviour for adding symbol methods.
#
# source://mongoid//lib/mongoid/criteria/queryable/macroable.rb#7
module Mongoid::Criteria::Queryable::Macroable
  # Adds a method on Symbol for convenience in where queries for the
  # provided operators.
  #
  # @example Add a symbol key.
  #   key :all, "$all
  # @param name [Symbol] The name of the method.
  # @param strategy [Symbol] The merge strategy.
  # @param operator [String] The MongoDB operator.
  # @param additional [String] The additional MongoDB operator.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/macroable.rb#21
  def key(name, strategy, operator, additional = T.unsafe(nil), &block); end
end

# Contains behaviour for merging existing selection with new selection.
#
# source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#7
module Mongoid::Criteria::Queryable::Mergeable
  # Instruct the next mergeable call to use intersection.
  #
  # @example Use intersection on the next call.
  #   mergeable.intersect.in(field: [ 1, 2, 3 ])
  # @return [Mergeable] The intersect flagged mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#20
  def intersect; end

  # Instruct the next mergeable call to use override.
  #
  # @example Use override on the next call.
  #   mergeable.override.in(field: [ 1, 2, 3 ])
  # @return [Mergeable] The override flagged mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#32
  def override; end

  # Clear the current strategy and negating flag, used after cloning.
  #
  # @example Reset the strategies.
  #   mergeable.reset_strategies!
  # @return [nil] nil.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#56
  def reset_strategies!; end

  # Returns the value of attribute strategy.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#10
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#10
  def strategy=(_arg0); end

  # Instruct the next mergeable call to use union.
  #
  # @example Use union on the next call.
  #   mergeable.union.in(field: [ 1, 2, 3 ])
  # @return [Mergeable] The union flagged mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#44
  def union; end

  private

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__add__({ name: 1 }, "$in")
  # @param criterion [Hash] The criteria.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#76
  def __add__(criterion, operator); end

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__expanded__([ 1, 10 ], "$within", "$center")
  # @param criterion [Hash] The criteria.
  # @param outer [String] The outer MongoDB operator.
  # @param inner [String] The inner MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#94
  def __expanded__(criterion, outer, inner); end

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__intersect__([ 1, 2 ], "$in")
  # @param criterion [Hash] The criteria.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#132
  def __intersect__(criterion, operator); end

  # Perform a straight merge of the criterion into the selection and let the
  # symbol overrides do all the work.
  #
  # @api private
  # @example Straight merge the expanded criterion.
  #   mergeable.__merge__(location: [ 1, 10 ])
  # @param criterion [Hash] The criteria.
  # @return [Mergeable] The cloned object.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#113
  def __merge__(criterion); end

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__multi__([ 1, 2 ], "$in")
  # @param criterion [Hash] The criteria.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#149
  def __multi__(criterion, operator); end

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__override__([ 1, 2 ], "$in")
  # @param criterion [Hash | Criteria] The criteria.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#177
  def __override__(criterion, operator); end

  # Adds the criterion to the existing selection.
  #
  # @api private
  # @example Add the criterion.
  #   mergeable.__union__([ 1, 2 ], "$in")
  # @param criterion [Hash] The criteria.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The new mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#202
  def __union__(criterion, operator); end

  # Prepare the value for merging.
  #
  # @api private
  # @example Prepare the value.
  #   mergeable.prepare("field", "$gt", 10)
  # @param field [String] The name of the field.
  # @param value [Object] The value.
  # @return [Object] The serialized value.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#260
  def prepare(field, operator, value); end

  # Use the named strategy for the next operation.
  #
  # @api private
  # @example Use intersection.
  #   mergeable.use(:__intersect__)
  # @param strategy [Symbol] The strategy to use.
  # @return [Mergeable] The existing mergeable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#218
  def use(strategy); end

  # Add criterion to the selection with the named strategy.
  #
  # @api private
  # @example Add criterion with a strategy.
  #   mergeable.with_strategy(:__union__, {field_name: [ 1, 2, 3 ]}, "$in")
  # @param strategy [Symbol] The name of the strategy method.
  # @param criterion [Object] The criterion to add.
  # @param operator [String] The MongoDB operator.
  # @return [Mergeable] The cloned query.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/mergeable.rb#238
  def with_strategy(strategy, criterion, operator); end
end

# The optional module includes all behaviour that has to do with extra
# options surrounding queries, like skip, limit, sorting, etc.
#
# source://mongoid//lib/mongoid/criteria/queryable/optional.rb#8
module Mongoid::Criteria::Queryable::Optional
  extend ::Mongoid::Criteria::Queryable::Macroable

  # Add ascending sorting options for all the provided fields.
  #
  # @example Add ascending sorting.
  #   optional.ascending(:first_name, :last_name)
  # @param fields [Array<Symbol>] The fields to sort.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#24
  def asc(*fields); end

  # Add ascending sorting options for all the provided fields.
  #
  # @example Add ascending sorting.
  #   optional.ascending(:first_name, :last_name)
  # @param fields [Array<Symbol>] The fields to sort.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#24
  def ascending(*fields); end

  # Adds the option for telling MongoDB how many documents to retrieve in
  # it's batching.
  #
  # @example Apply the batch size options.
  #   optional.batch_size(500)
  # @param value [Integer] The batch size.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#42
  def batch_size(value = T.unsafe(nil)); end

  # Set the collation.
  #
  # @example Set the collation.
  #   optional.collation(locale: 'fr', strength: 2)
  # @param collation_doc [Hash] The document describing the collation to use.
  # @return [Optional] The cloned optional.
  # @since 6.1.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#337
  def collation(collation_doc); end

  # Associate a comment with the query.
  #
  # @example Add a comment.
  #   optional.comment('slow query')
  # @note Set profilingLevel to 2 and the comment will be logged in the profile
  #   collection along with the query.
  # @param comment [String] The comment to be associated with the query.
  # @return [Optional] The cloned optional.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#304
  def comment(comment = T.unsafe(nil)); end

  # Set the cursor type.
  #
  # @example Set the cursor type.
  #   optional.cursor_type(:tailable)
  #   optional.cursor_type(:tailable_await)
  # @note The cursor can be type :tailable or :tailable_await.
  # @param type [Symbol] The type of cursor to create.
  # @return [Optional] The cloned optional.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#323
  def cursor_type(type); end

  # Add descending sorting options for all the provided fields.
  #
  # @example Add descending sorting.
  #   optional.descending(:first_name, :last_name)
  # @param fields [Array<Symbol>] The fields to sort.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#56
  def desc(*fields); end

  # Add descending sorting options for all the provided fields.
  #
  # @example Add descending sorting.
  #   optional.descending(:first_name, :last_name)
  # @param fields [Array<Symbol>] The fields to sort.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#56
  def descending(*fields); end

  # Add an index hint to the query options.
  #
  # @example Add an index hint.
  #   optional.hint("$natural" => 1)
  # @param value [Hash] The index hint.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#73
  def hint(value = T.unsafe(nil)); end

  # Add the number of documents to limit in the returned results.
  #
  # @example Limit the number of returned documents.
  #   optional.limit(20)
  # @param value [Integer] The number of documents to return.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#87
  def limit(value = T.unsafe(nil)); end

  # Adds the option to limit the number of documents scanned in the
  # collection.
  #
  # @example Add the max scan limit.
  #   optional.max_scan(1000)
  # @param value [Integer] The max number of documents to scan.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#106
  def max_scan(value = T.unsafe(nil)); end

  # Adds a cumulative time limit in milliseconds for processing operations on a cursor.
  #
  # @example Add the max time ms option.
  #   optional.max_time_ms(200)
  # @param value [Integer] The max time in milliseconds for processing operations on a cursor.
  # @return [Optional] The cloned optional.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#120
  def max_time_ms(value = T.unsafe(nil)); end

  # Tell the query not to timeout.
  #
  # @example Tell the query not to timeout.
  #   optional.no_timeout
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#132
  def no_timeout; end

  # Add the number of documents to skip.
  #
  # @example Add the number to skip.
  #   optional.skip(100)
  # @param value [Integer] The number to skip.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#227
  def offset(value = T.unsafe(nil)); end

  # Limits the results to only contain the fields provided.
  #
  # @example Limit the results to the provided fields.
  #   optional.only(:name, :dob)
  # @param args [Array<Symbol>] The fields to return.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#146
  def only(*args); end

  # Returns the value of attribute options.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#12
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#12
  def options=(_arg0); end

  # Adds sorting criterion to the options.
  #
  # @example Add sorting options via a hash with integer directions.
  #   optional.order_by(name: 1, dob: -1)
  # @example Add sorting options via a hash with symbol directions.
  #   optional.order_by(name: :asc, dob: :desc)
  # @example Add sorting options via a hash with string directions.
  #   optional.order_by(name: "asc", dob: "desc")
  # @example Add sorting options via an array with integer directions.
  #   optional.order_by([[ name, 1 ], [ dob, -1 ]])
  # @example Add sorting options via an array with symbol directions.
  #   optional.order_by([[ name, :asc ], [ dob, :desc ]])
  # @example Add sorting options via an array with string directions.
  #   optional.order_by([[ name, "asc" ], [ dob, "desc" ]])
  # @example Add sorting options with keys.
  #   optional.order_by(:name.asc, :dob.desc)
  # @example Add sorting options via a string.
  #   optional.order_by("name ASC, dob DESC")
  # @param spec [Array, Hash, String] The sorting specification.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#188
  def order(*spec); end

  # Adds sorting criterion to the options.
  #
  # @example Add sorting options via a hash with integer directions.
  #   optional.order_by(name: 1, dob: -1)
  # @example Add sorting options via a hash with symbol directions.
  #   optional.order_by(name: :asc, dob: :desc)
  # @example Add sorting options via a hash with string directions.
  #   optional.order_by(name: "asc", dob: "desc")
  # @example Add sorting options via an array with integer directions.
  #   optional.order_by([[ name, 1 ], [ dob, -1 ]])
  # @example Add sorting options via an array with symbol directions.
  #   optional.order_by([[ name, :asc ], [ dob, :desc ]])
  # @example Add sorting options via an array with string directions.
  #   optional.order_by([[ name, "asc" ], [ dob, "desc" ]])
  # @example Add sorting options with keys.
  #   optional.order_by(:name.asc, :dob.desc)
  # @example Add sorting options via a string.
  #   optional.order_by("name ASC, dob DESC")
  # @param spec [Array, Hash, String] The sorting specification.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#188
  def order_by(*spec); end

  # Instead of merging the order criteria, use this method to completely
  # replace the existing ordering with the provided.
  #
  # @example Replace the ordering.
  #   optional.reorder(name: :asc)
  # @param spec [Array, Hash, String] The sorting specification.
  # @return [Optional] The cloned optional.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#211
  def reorder(*spec); end

  # Add the number of documents to skip.
  #
  # @example Add the number to skip.
  #   optional.skip(100)
  # @param value [Integer] The number to skip.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#227
  def skip(value = T.unsafe(nil)); end

  # Limit the returned results via slicing embedded arrays.
  #
  # @example Slice the returned results.
  #   optional.slice(aliases: [ 0, 5 ])
  # @param criterion [Hash] The slice options.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#246
  def slice(criterion = T.unsafe(nil)); end

  # Tell the query to operate in snapshot mode.
  #
  # @example Add the snapshot option.
  #   optional.snapshot
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#264
  def snapshot; end

  # Limits the results to only contain the fields not provided.
  #
  # @example Limit the results to the fields not provided.
  #   optional.without(:name, :dob)
  # @param args [Array<Symbol>] The fields to ignore.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#280
  def without(*args); end

  private

  # Add a single sort option.
  #
  # @api private
  # @example Add a single sort option.
  #   optional.add_sort_option({}, :name, 1)
  # @param options [Hash] The options.
  # @param field [String] The field name.
  # @param direction [Integer] The sort direction.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#357
  def add_sort_option(options, field, direction); end

  # Take the provided criterion and store it as an option in the query
  # options.
  #
  # @api private
  # @example Store the option.
  #   optional.option({ skip: 10 })
  # @param args [Array] The options.
  # @return [Queryable] The cloned queryable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#382
  def option(*args); end

  # Add multiple sort options at once.
  #
  # @api private
  # @example Add multiple sort options.
  #   optional.sort_with_list(:name, :dob, 1)
  # @param fields [Array<String>] The field names.
  # @param direction [Integer] The sort direction.
  # @return [Optional] The cloned optional.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#403
  def sort_with_list(*fields, direction); end

  class << self
    # Get the methods on the optional that can be forwarded to from a model.
    #
    # @example Get the forwardable methods.
    #   Optional.forwardables
    # @return [Array<Symbol>] The names of the forwardable methods.
    # @since 1.0.0
    #
    # source://mongoid//lib/mongoid/criteria/queryable/optional.rb#422
    def forwardables; end
  end
end

# The options is a hash representation of options passed to MongoDB queries,
# such as skip, limit, and sorting criteria.
#
# source://mongoid//lib/mongoid/criteria/queryable/options.rb#8
class Mongoid::Criteria::Queryable::Options < ::Mongoid::Criteria::Queryable::Smash
  # Store the value in the options for the provided key. The options will
  # handle all necessary serialization and localization in this step.
  #
  # @example Store a value in the options.
  #   options.store(:key, "testing")
  # @param key [String, Symbol] The name of the attribute.
  # @param value [Object] The value to add.
  # @return [Object] The stored object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#70
  def []=(key, value, localize = T.unsafe(nil)); end

  # Perform a deep copy of the options.
  #
  # @example Perform a deep copy.
  #   options.__deep_copy__
  # @return [Options] The copied options.
  # @since 6.1.1
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#99
  def __deep_copy__; end

  # Convenience method for getting the field options.
  #
  # @example Get the fields options.
  #   options.fields
  # @return [Hash] The fields options.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#18
  def fields; end

  # Convenience method for getting the limit option.
  #
  # @example Get the limit option.
  #   options.limit
  # @return [Integer] The limit option.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#30
  def limit; end

  # Convenience method for getting the skip option.
  #
  # @example Get the skip option.
  #   options.skip
  # @return [Integer] The skip option.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#42
  def skip; end

  # Convenience method for getting the sort options.
  #
  # @example Get the sort options.
  #   options.sort
  # @return [Hash] The sort options.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#54
  def sort; end

  # Store the value in the options for the provided key. The options will
  # handle all necessary serialization and localization in this step.
  #
  # @example Store a value in the options.
  #   options.store(:key, "testing")
  # @param key [String, Symbol] The name of the attribute.
  # @param value [Object] The value to add.
  # @return [Object] The stored object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#70
  def store(key, value, localize = T.unsafe(nil)); end

  # Convert the options to aggregation pipeline friendly options.
  #
  # @example Convert the options to a pipeline.
  #   options.to_pipeline
  # @return [Array<Hash>] The options in pipeline form.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#83
  def to_pipeline; end

  private

  # Evolve a single key selection with various types of values.
  #
  # @api private
  # @example Evolve a simple selection.
  #   options.evolve(field, 5)
  # @param value [Object] The value to serialize.
  # @return [Object] The serialized object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#121
  def evolve(value, localize = T.unsafe(nil)); end

  # Evolve a single key selection with hash values.
  #
  # @api private
  # @example Evolve a simple selection.
  #   options.evolve(field, { "$gt" => 5 })
  # @param value [Hash] The hash to serialize.
  # @return [Object] The serialized hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/options.rb#142
  def evolve_hash(value, localize = T.unsafe(nil)); end
end

# Represents an aggregation pipeline.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#9
class Mongoid::Criteria::Queryable::Pipeline < ::Array
  # Initialize the new pipeline.
  #
  # @example Initialize the new pipeline.
  #   Queryable::Pipeline.new(aliases)
  # @param aliases [Hash] A hash of mappings from aliases to the actual
  #   field names in the database.
  # @return [Pipeline] a new instance of Pipeline
  # @since 2.0.0
  # @yield [_self]
  # @yieldparam _self [Mongoid::Criteria::Queryable::Pipeline] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#54
  def initialize(aliases = T.unsafe(nil)); end

  # Deep copy the aggregation pipeline. Will clone all the values in the
  # pipeline as well as the pipeline itself.
  #
  # @example Deep copy the pipeline.
  #   pipeline.__deep_copy__
  # @return [Pipeline] The cloned pipeline.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#23
  def __deep_copy__; end

  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#12
  def aliases; end

  # Add a group operation to the aggregation pipeline.
  #
  # @example Add a group operation.
  #   pipeline.group(:count.sum => 1, :max.max => "likes")
  # @param entry [Hash] The group entry.
  # @return [Pipeline] The pipeline.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#41
  def group(entry); end

  # Adds a $project entry to the aggregation pipeline.
  #
  # @example Add the projection.
  #   pipeline.project(name: 1)
  # @param entry [Hash] The projection.
  # @return [Pipeline] The pipeline.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#67
  def project(entry); end

  # Add the $unwind entry to the pipeline.
  #
  # @example Add the unwind.
  #   pipeline.unwind(:field)
  #   pipeline.unwind(document)
  # @param field_or_doc [String, Symbol, Hash] The name of the field or a document.
  # @return [Pipeline] The pipeline.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#82
  def unwind(field_or_doc); end

  private

  # Evolve the entry using the aliases.
  #
  # @api private
  # @example Evolve the entry.
  #   pipeline.evolve(name: 1)
  # @param entry [Hash] The entry to evolve.
  # @return [Hash] The evolved entry.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/pipeline.rb#106
  def evolve(entry); end
end

# An queryable selectable is selectable, in that it has the ability to select
# document from the database. The selectable module brings all functionality
# to the selectable that has to do with building MongoDB selectors.
#
# source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#9
module Mongoid::Criteria::Queryable::Selectable
  extend ::Mongoid::Criteria::Queryable::Macroable

  # Add the $all criterion.
  #
  # @example Add the criterion.
  #   selectable.all(field: [ 1, 2 ])
  # @example Execute an $all in a where query.
  #   selectable.where(:field.all => [ 1, 2 ])
  # @param criterion [Hash] The key value pairs for $all matching.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#44
  def all(criterion = T.unsafe(nil)); end

  # Add the $all criterion.
  #
  # @example Add the criterion.
  #   selectable.all(field: [ 1, 2 ])
  # @example Execute an $all in a where query.
  #   selectable.where(:field.all => [ 1, 2 ])
  # @param criterion [Hash] The key value pairs for $all matching.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#44
  def all_in(criterion = T.unsafe(nil)); end

  # Add the $and criterion.
  #
  # @example Add the criterion.
  #   selectable.and({ field: value }, { other: value })
  # @param criterion [Array<Hash>] Multiple key/value pair matches that
  #   all must match to return results.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#61
  def all_of(*criterion); end

  # Add the $and criterion.
  #
  # @example Add the criterion.
  #   selectable.and({ field: value }, { other: value })
  # @param criterion [Array<Hash>] Multiple key/value pair matches that
  #   all must match to return results.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#61
  def and(*criterion); end

  # Adds the $in selection to the selectable.
  #
  # @example Add $in selection on an array.
  #   selectable.in(age: [ 1, 2, 3 ])
  # @example Add $in selection on a range.
  #   selectable.in(age: 18..24)
  # @example Execute an $in in a where query.
  #   selectable.where(:field.in => [ 1, 2, 3 ])
  # @param criterion [Hash] The field/value criterion pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#242
  def any_in(criterion = T.unsafe(nil)); end

  # Adds $or selection to the selectable.
  #
  # @example Add the $or selection.
  #   selectable.or(field: 1, field: 2)
  # @param criterion [Array] An array of hash criterion.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#454
  def any_of(*criterion); end

  # Add the range selection.
  #
  # @example Match on results within a single range.
  #   selectable.between(field: 1..2)
  # @example Match on results between multiple ranges.
  #   selectable.between(field: 1..2, other: 5..7)
  # @param criterion [Hash] Multiple key/range pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#79
  def between(criterion = T.unsafe(nil)); end

  # Select with an $elemMatch.
  #
  # @example Add criterion for a single match.
  #   selectable.elem_match(field: { name: "value" })
  # @example Add criterion for multiple matches.
  #   selectable.elem_match(
  #   field: { name: "value" },
  #   other: { name: "value"}
  #   )
  # @example Execute an $elemMatch in a where query.
  #   selectable.where(:field.elem_match => { name: "value" })
  # @param criterion [Hash] The field/match pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#107
  def elem_match(criterion = T.unsafe(nil)); end

  # Adds $ne selection to the selectable.
  #
  # @example Query for a value $ne to something.
  #   selectable.ne(field: 10)
  # @example Execute an $ne in a where query.
  #   selectable.where(:field.ne => "value")
  # @param criterion [Hash] The field/ne selections.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#329
  def excludes(criterion = T.unsafe(nil)); end

  # Add the $exists selection.
  #
  # @example Add a single selection.
  #   selectable.exists(field: true)
  # @example Add multiple selections.
  #   selectable.exists(field: true, other: false)
  # @example Execute an $exists in a where query.
  #   selectable.where(:field.exists => true)
  # @param criterion [Hash] The field/boolean existence checks.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#128
  def exists(criterion = T.unsafe(nil)); end

  # Add a $geoIntersects or $geoWithin selection. Symbol operators must
  # be used as shown in the examples to expand the criteria.
  #
  # @example Add a geo intersect criterion for a line.
  #   query.geo_spacial(:location.intersects_line => [[ 1, 10 ], [ 2, 10 ]])
  # @example Add a geo intersect criterion for a point.
  #   query.geo_spacial(:location.intersects_point => [[ 1, 10 ]])
  # @example Add a geo intersect criterion for a polygon.
  #   query.geo_spacial(:location.intersects_polygon => [[ 1, 10 ], [ 2, 10 ], [ 1, 10 ]])
  # @example Add a geo within criterion for a polygon.
  #   query.geo_spacial(:location.within_polygon => [[ 1, 10 ], [ 2, 10 ], [ 1, 10 ]])
  # @example Add a geo within criterion for a box.
  #   query.geo_spacial(:location.within_box => [[ 1, 10 ], [ 2, 10 ])
  # @note The only valid geometry shapes for a $geoIntersects are:
  #   :intersects_line, :intersects_point, and :intersects_polygon.
  # @note The only valid options for a $geoWithin query are the geometry
  #   shape :within_polygon and the operator :within_box.
  # @note The :within_box operator for the $geoWithin query expects the
  #   lower left (south west) coordinate pair as the first argument and
  #   the upper right (north east) as the second argument.
  #   Important: When latitude and longitude are passed, longitude is
  #   expected as the first element of the coordinate pair.
  #   Source: https://docs.mongodb.com/manual/reference/operator/query/box/
  # @param criterion [Hash] The criterion.
  # @return [Selectable] The cloned selectable.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#173
  def geo_spacial(criterion = T.unsafe(nil)); end

  # Add the $gt criterion to the selector.
  #
  # @example Add the $gt criterion.
  #   selectable.gt(age: 60)
  # @example Execute an $gt in a where query.
  #   selectable.where(:field.gt => 10)
  # @param criterion [Hash] The field/value pairs to check.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#203
  def gt(criterion = T.unsafe(nil)); end

  # Add the $gte criterion to the selector.
  #
  # @example Add the $gte criterion.
  #   selectable.gte(age: 60)
  # @example Execute an $gte in a where query.
  #   selectable.where(:field.gte => 10)
  # @param criterion [Hash] The field/value pairs to check.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#221
  def gte(criterion = T.unsafe(nil)); end

  # Adds the $in selection to the selectable.
  #
  # @example Add $in selection on an array.
  #   selectable.in(age: [ 1, 2, 3 ])
  # @example Add $in selection on a range.
  #   selectable.in(age: 18..24)
  # @example Execute an $in in a where query.
  #   selectable.where(:field.in => [ 1, 2, 3 ])
  # @param criterion [Hash] The field/value criterion pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#242
  def in(criterion = T.unsafe(nil)); end

  # Add the $lt criterion to the selector.
  #
  # @example Add the $lt criterion.
  #   selectable.lt(age: 60)
  # @example Execute an $lt in a where query.
  #   selectable.where(:field.lt => 10)
  # @param criterion [Hash] The field/value pairs to check.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#261
  def lt(criterion = T.unsafe(nil)); end

  # Add the $lte criterion to the selector.
  #
  # @example Add the $lte criterion.
  #   selectable.lte(age: 60)
  # @example Execute an $lte in a where query.
  #   selectable.where(:field.lte => 10)
  # @param criterion [Hash] The field/value pairs to check.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#279
  def lte(criterion = T.unsafe(nil)); end

  # Add a $maxDistance selection to the selectable.
  #
  # @example Add the $maxDistance selection.
  #   selectable.max_distance(location: 10)
  # @param criterion [Hash] The field/distance pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#294
  def max_distance(criterion = T.unsafe(nil)); end

  # Adds $mod selection to the selectable.
  #
  # @example Add the $mod selection.
  #   selectable.mod(field: [ 10, 1 ])
  # @example Execute an $mod in a where query.
  #   selectable.where(:field.mod => [ 10, 1 ])
  # @param criterion [Hash] The field/mod selections.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#311
  def mod(criterion = T.unsafe(nil)); end

  # Adds $ne selection to the selectable.
  #
  # @example Query for a value $ne to something.
  #   selectable.ne(field: 10)
  # @example Execute an $ne in a where query.
  #   selectable.where(:field.ne => "value")
  # @param criterion [Hash] The field/ne selections.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#329
  def ne(criterion = T.unsafe(nil)); end

  # Adds a $near criterion to a geo selection.
  #
  # @example Add the $near selection.
  #   selectable.near(location: [ 23.1, 12.1 ])
  # @example Execute an $near in a where query.
  #   selectable.where(:field.near => [ 23.2, 12.1 ])
  # @param criterion [Hash] The field/location pair.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#348
  def near(criterion = T.unsafe(nil)); end

  # Adds a $nearSphere criterion to a geo selection.
  #
  # @example Add the $nearSphere selection.
  #   selectable.near_sphere(location: [ 23.1, 12.1 ])
  # @example Execute an $nearSphere in a where query.
  #   selectable.where(:field.near_sphere => [ 10.11, 3.22 ])
  # @param criterion [Hash] The field/location pair.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#366
  def near_sphere(criterion = T.unsafe(nil)); end

  # Returns the value of attribute negating.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#29
  def negating; end

  # Sets the attribute negating
  #
  # @param value the value to set the attribute negating to.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#29
  def negating=(_arg0); end

  # Is the current selectable negating the next selection?
  #
  # @example Is the selectable negating?
  #   selectable.negating?
  # @return [true, false] If the selectable is negating.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#415
  def negating?; end

  # Adds the $nin selection to the selectable.
  #
  # @example Add $nin selection on an array.
  #   selectable.nin(age: [ 1, 2, 3 ])
  # @example Add $nin selection on a range.
  #   selectable.nin(age: 18..24)
  # @example Execute an $nin in a where query.
  #   selectable.where(:field.nin => [ 1, 2, 3 ])
  # @param criterion [Hash] The field/value criterion pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#387
  def nin(criterion = T.unsafe(nil)); end

  # Adds $nor selection to the selectable.
  #
  # @example Add the $nor selection.
  #   selectable.nor(field: 1, field: 2)
  # @param criterion [Array] An array of hash criterion.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#403
  def nor(*criterion); end

  # Negate the next selection.
  #
  # @example Negate the selection.
  #   selectable.not.in(field: [ 1, 2 ])
  # @example Add the $not criterion.
  #   selectable.not(name: /Bob/)
  # @example Execute a $not in a where query.
  #   selectable.where(:field.not => /Bob/)
  # @param criterion [Hash] The field/value pairs to negate.
  # @return [Selectable] The negated selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#435
  def not(*criterion); end

  # Adds the $nin selection to the selectable.
  #
  # @example Add $nin selection on an array.
  #   selectable.nin(age: [ 1, 2, 3 ])
  # @example Add $nin selection on a range.
  #   selectable.nin(age: 18..24)
  # @example Execute an $nin in a where query.
  #   selectable.where(:field.nin => [ 1, 2, 3 ])
  # @param criterion [Hash] The field/value criterion pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#387
  def not_in(criterion = T.unsafe(nil)); end

  # Adds $or selection to the selectable.
  #
  # @example Add the $or selection.
  #   selectable.or(field: 1, field: 2)
  # @param criterion [Array] An array of hash criterion.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#454
  def or(*criterion); end

  # Returns the value of attribute selector.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#29
  def selector; end

  # Sets the attribute selector
  #
  # @param value the value to set the attribute selector to.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#29
  def selector=(_arg0); end

  # Construct a text search selector.
  #
  # @example Construct a text search selector.
  #   selectable.text_search("testing")
  # @example Construct a text search selector with options.
  #   selectable.text_search("testing", :$language => "fr")
  # @note Per https://docs.mongodb.com/manual/reference/operator/query/text/
  #   it is not currently possible to supply multiple text search
  #   conditions in a query. Mongoid will build such a query but the
  #   server will return an error when trying to execute it.
  # @param terms [String, Symbol] A string of terms that MongoDB parses
  #   and uses to query the text index.
  # @param opts [Hash] Text search options. See MongoDB documentation
  #   for options.
  # @return [Selectable] The cloned selectable.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#529
  def text_search(terms, opts = T.unsafe(nil)); end

  # This is the general entry point for most MongoDB queries. This either
  # creates a standard field: value selection, and expanded selection with
  # the use of hash methods, or a $where selection if a string is provided.
  #
  # @example Add a standard selection.
  #   selectable.where(name: "syd")
  # @example Add a javascript selection.
  #   selectable.where("this.name == 'syd'")
  # @param criterion [String, Hash] The javascript or standard selection.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#564
  def where(criterion = T.unsafe(nil)); end

  # Add a $size selection for array fields.
  #
  # @example Add the $size selection.
  #   selectable.with_size(field: 5)
  # @example Execute an $size in a where query.
  #   selectable.where(:field.with_size => 10)
  # @note This method is named #with_size not to conflict with any existing
  #   #size method on enumerables or symbols.
  # @param criterion [Hash] The field/size pairs criterion.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#475
  def with_size(criterion = T.unsafe(nil)); end

  # Adds a $type selection to the selectable.
  #
  # @example Add the $type selection.
  #   selectable.with_type(field: 15)
  # @example Execute an $type in a where query.
  #   selectable.where(:field.with_type => 15)
  # @note http://vurl.me/PGOU contains a list of all types.
  # @param criterion [Hash] The field/type pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#499
  def with_type(criterion = T.unsafe(nil)); end

  private

  # Create the standard expression query.
  #
  # @api private
  # @example Create the selection.
  #   selectable.expr_query(age: 50)
  # @param criterion [Hash] The field/value pairs.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#585
  def expr_query(criterion); end

  # Create a javascript selection.
  #
  # @api private
  # @example Create the javascript selection.
  #   selectable.js_query("this.age == 50")
  # @param criterion [String] The javascript as a string.
  # @return [Selectable] The cloned selectable
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#624
  def js_query(criterion); end

  # Take the provided criterion and store it as a selection in the query
  # selector.
  #
  # @api private
  # @example Store the selection.
  #   selectable.selection({ field: "value" })
  # @param criterion [Hash] The selection to store.
  # @return [Selectable] The cloned selectable.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#642
  def selection(criterion = T.unsafe(nil)); end

  # Force the values of the criterion to be evolved.
  #
  # @api private
  # @example Force values to booleans.
  #   selectable.force_typing(criterion) do |val|
  #   Boolean.evolve(val)
  #   end
  # @param criterion [Hash] The criterion.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#603
  def typed_override(criterion, operator); end

  # Convert the criterion values to $in friendly values. This means you,
  # array.
  #
  # @api private
  # @example Convert all the values to arrays.
  #   selectable.with_array_values({ key: 1...4 })
  # @param criterion [Hash] The criterion.
  # @return [Hash] The $in friendly criterion (array values).
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#666
  def with_array_values(criterion); end

  class << self
    # Get the methods on the selectable that can be forwarded to from a model.
    #
    # @example Get the forwardable methods.
    #   Selectable.forwardables
    # @return [Array<Symbol>] The names of the forwardable methods.
    # @since 1.0.0
    #
    # source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#683
    def forwardables; end
  end
end

# Constant for a LineString $geometry.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#15
Mongoid::Criteria::Queryable::Selectable::LINE_STRING = T.let(T.unsafe(nil), String)

# Constant for a Point $geometry.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#20
Mongoid::Criteria::Queryable::Selectable::POINT = T.let(T.unsafe(nil), String)

# Constant for a Polygon $geometry.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/criteria/queryable/selectable.rb#25
Mongoid::Criteria::Queryable::Selectable::POLYGON = T.let(T.unsafe(nil), String)

# The selector is a special kind of hash that knows how to serialize values
# coming into it as well as being alias and locale aware for key names.
#
# source://mongoid//lib/mongoid/criteria/queryable/selector.rb#8
class Mongoid::Criteria::Queryable::Selector < ::Mongoid::Criteria::Queryable::Smash
  # Store the value in the selector for the provided key. The selector will
  # handle all necessary serialization and localization in this step.
  #
  # @example Store a value in the selector.
  #   selector.store(:key, "testing")
  # @param key [String, Symbol] The name of the attribute.
  # @param value [Object] The value to add.
  # @return [Object] The stored object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#53
  def []=(key, value); end

  # Merges another selector into this one.
  #
  # @example Merge in another selector.
  #   selector.merge!(name: "test")
  # @param other [Hash, Selector] The object to merge in.
  # @return [Selector] The selector.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#20
  def merge!(other); end

  # Store the value in the selector for the provided key. The selector will
  # handle all necessary serialization and localization in this step.
  #
  # @example Store a value in the selector.
  #   selector.store(:key, "testing")
  # @param key [String, Symbol] The name of the attribute.
  # @param value [Object] The value to add.
  # @return [Object] The stored object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#53
  def store(key, value); end

  # Convert the selector to an aggregation pipeline entry.
  #
  # @example Convert the selector to a pipeline.
  #   selector.to_pipeline
  # @return [Array<Hash>] The pipeline entry for the selector.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#74
  def to_pipeline; end

  private

  # Evolve a single key selection with various types of values.
  #
  # @api private
  # @example Evolve a simple selection.
  #   selector.evolve(field, 5)
  # @param serializer [Object] The optional serializer for the field.
  # @param value [Object] The value to serialize.
  # @return [Object] The serialized object.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#118
  def evolve(serializer, value); end

  # Evolve a single key selection with array values.
  #
  # @api private
  # @example Evolve a simple selection.
  #   selector.evolve(field, [ 1, 2, 3 ])
  # @param serializer [Object] The optional serializer for the field.
  # @param value [Array<Object>] The array to serialize.
  # @return [Object] The serialized array.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#142
  def evolve_array(serializer, value); end

  # Evolve a single key selection with hash values.
  #
  # @api private
  # @example Evolve a simple selection.
  #   selector.evolve(field, { "$gt" => 5 })
  # @param serializer [Object] The optional serializer for the field.
  # @param value [Hash] The hash to serialize.
  # @return [Object] The serialized hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#161
  def evolve_hash(serializer, value); end

  # Evolves a multi-list selection, like an $and or $or criterion, and
  # performs the necessary serialization.
  #
  # @api private
  # @example Evolve the multi-selection.
  #   selector.evolve_multi([{ field: "value" }])
  # @param value [Array<Hash>] The multi-selection.
  # @return [Array<Hash>] The serialized values.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#95
  def evolve_multi(value); end

  # Determines if the selection is a multi-select, like an $and or $or or $nor
  # selection.
  #
  # @api private
  # @example Is the selection a multi-select?
  #   selector.multi_selection?("$and")
  # @param key [String] The key to check.
  # @return [true, false] If the key is for a multi-select.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/selector.rb#184
  def multi_selection?(key); end
end

# This is a smart hash for use with options and selectors.
#
# source://mongoid//lib/mongoid/criteria/queryable/smash.rb#7
class Mongoid::Criteria::Queryable::Smash < ::Hash
  # Initialize the new selector.
  #
  # @example Initialize the new selector.
  #   Queryable::Smash.new(aliases, serializers)
  # @param aliases [Hash] A hash of mappings from aliases to the actual
  #   field names in the database.
  # @param serializers [Hash] An optional hash of objects that are
  #   responsible for serializing values. The keys of the hash must be
  #   strings that match the field name, and the values must respond to
  #   #localized? and #evolve(object).
  # @return [Smash] a new instance of Smash
  # @since 1.0.0
  # @yield [_self]
  # @yieldparam _self [Mongoid::Criteria::Queryable::Smash] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#42
  def initialize(aliases = T.unsafe(nil), serializers = T.unsafe(nil)); end

  # Get an item from the smart hash by the provided key.
  #
  # @example Get an item by the key.
  #   smash["test"]
  # @param key [String] The key.
  # @return [Object] The found object.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#57
  def [](key); end

  # Perform a deep copy of the smash.
  #
  # @example Perform a deep copy.
  #   smash.__deep_copy__
  # @return [Smash] The copied hash.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#21
  def __deep_copy__; end

  # Returns the value of attribute aliases.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#11
  def aliases; end

  # Returns the value of attribute serializers.
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#11
  def serializers; end

  private

  # Get the localized value for the key if needed. If the field uses
  # localization the current locale will be appended to the key in
  # MongoDB dot notation.
  #
  # @api private
  # @example Get the normalized key name.
  #   smash.localized_key("field", serializer)
  # @param name [String] The name of the field.
  # @param serializer [Object] The optional field serializer.
  # @return [String] The normalized key.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#78
  def localized_key(name, serializer); end

  # Get the pair of objects needed to store the value in a hash by the
  # provided key. This is the database field name and the serializer.
  #
  # @api private
  # @example Get the name and serializer.
  #   smash.storage_pair("id")
  # @param key [Symbol, String] The key provided to the selection.
  # @return [Array<String, Object>] The name of the db field and
  #   serializer.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/criteria/queryable/smash.rb#96
  def storage_pair(key); end
end

# source://mongoid//lib/mongoid/criteria/scopable.rb#4
module Mongoid::Criteria::Scopable
  # Applies the default scope to the criteria.
  #
  # @example Apply the default scope.
  #   criteria.apply_default_scope
  # @return [Criteria] The criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#14
  def apply_default_scope; end

  # Given another criteria, remove the other criteria's scoping from this
  # criteria.
  #
  # @example Remove the scoping.
  #   criteria.remove_scoping(other)
  # @param other [Criteria] The other criteria.
  # @return [Criteria] The criteria with scoping removed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#32
  def remove_scoping(other); end

  # Forces the criteria to be scoped, unless its inside an unscoped block.
  #
  # @example Force the criteria to be scoped.
  #   criteria.scoped(skip: 10)
  # @param options [Hash] Additional query options.
  # @return [Criteria] The scoped criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#52
  def scoped(options = T.unsafe(nil)); end

  # Has the criteria had the default scope applied?
  #
  # @example Is the default scope applied?
  #   criteria.scoped?
  # @return [true, false] If the default scope is applied.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#69
  def scoped?; end

  # Get the criteria scoping options, as a pair (scoped, unscoped).
  #
  # @example Get the scoping options.
  #   criteria.scoping_options
  # @return [Array] Scoped, unscoped.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#110
  def scoping_options; end

  # Set the criteria scoping options, as a pair (scoped, unscoped).
  #
  # @example Set the scoping options.
  #   criteria.scoping_options = true, false
  # @param options [Array] Scoped, unscoped.
  # @return [Array] The new scoping options.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#124
  def scoping_options=(options); end

  # Clears all scoping from the criteria.
  #
  # @example Clear all scoping from the criteria.
  #   criteria.unscoped
  # @return [Criteria] The unscoped criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#81
  def unscoped; end

  # Is the criteria unscoped?
  #
  # @example Is the criteria unscoped?
  #   criteria.unscoped?
  # @return [true, false] If the criteria is force unscoped.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#98
  def unscoped?; end

  # Get the criteria with the default scope applied, if the default scope
  # is able to be applied. Cases in which it cannot are: If we are in an
  # unscoped block, if the criteria is already forced unscoped, or the
  # default scope has already been applied.
  #
  # @example Get the criteria with the default scope.
  #   criteria.with_default_scope
  # @return [Criteria] The criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/criteria/scopable.rb#139
  def with_default_scope; end

  private

  # source://mongoid//lib/mongoid/criteria/scopable.rb#149
  def reject_matching(other, *methods); end
end

# This is the base module for all domain objects that need to be persisted to
# the database as documents.
#
# source://mongoid//lib/mongoid/document.rb#24
module Mongoid::Document
  include ::Mongoid::Touchable::InstanceMethods
  include ::Mongoid::QueryCache::Document
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::Model
  include ::ActiveModel::Serializers::JSON
  include ::Mongoid::Atomic
  include ::Mongoid::Changeable
  include ::Mongoid::Clients::StorageOptions
  include ::Mongoid::Clients::Options
  include ::Mongoid::Clients
  include ::Mongoid::Attributes::Nested
  include ::Mongoid::Attributes::Readonly
  include ::Mongoid::Attributes
  include ::Mongoid::Fields
  include ::Mongoid::Indexable
  include ::Mongoid::Matchable
  include ::Mongoid::Persistable::Creatable
  include ::Mongoid::Persistable::Deletable
  include ::Mongoid::Persistable::Destroyable
  include ::Mongoid::Persistable::Incrementable
  include ::Mongoid::Persistable::Logical
  include ::Mongoid::Persistable::Poppable
  include ::Mongoid::Persistable::Pullable
  include ::Mongoid::Persistable::Pushable
  include ::Mongoid::Persistable::Renamable
  include ::Mongoid::Persistable::Settable
  include ::Mongoid::Persistable::Unsettable
  include ::Mongoid::Persistable
  include ::Mongoid::Association::Embedded::Cyclic
  include ::Mongoid::Association::Referenced::AutoSave
  include ::Mongoid::Association::Referenced::CounterCache
  include ::Mongoid::Association::Accessors
  include ::Mongoid::Association::Depending
  include ::Mongoid::Association::Builders
  include ::Mongoid::Association::Macros
  include ::Mongoid::Association::Reflections
  include ::Mongoid::Association
  include ::Mongoid::Scopable
  include ::Mongoid::Selectable
  include ::Mongoid::Serializable
  include ::Mongoid::Shardable
  include ::Mongoid::Cacheable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Traversable
  include ::Mongoid::Validatable::Macros
  include ::Mongoid::Validatable
  include ::ActiveModel::Validations::Callbacks
  include ::Mongoid::Interceptable
  include ::Mongoid::Copyable
  include ::Mongoid::Composable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::Mongoid::Changeable::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::StorageOptions::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Options::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Sessions::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Nested::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Readonly::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::ClassMethods
  mixes_in_class_methods ::Mongoid::Fields::ClassMethods
  mixes_in_class_methods ::Mongoid::Indexable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Creatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Deletable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Destroyable::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::Syncable::ClassMethods
  mixes_in_class_methods ::Mongoid::Scopable::ClassMethods
  mixes_in_class_methods ::Mongoid::Shardable::ClassMethods
  mixes_in_class_methods ::Mongoid::Threaded::Lifecycle::ClassMethods
  mixes_in_class_methods ::Mongoid::Traversable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::Macros
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::Mongoid::Findable
  mixes_in_class_methods ::Mongoid::Document::ClassMethods

  # Instantiate a new +Document+, setting the Document's attributes if
  # given. If no attributes are provided, they will be initialized with
  # an empty +Hash+.
  #
  # If a primary key is defined, the document's id will be set to that key,
  # otherwise it will be set to a fresh +BSON::ObjectId+ string.
  #
  # @example Create a new document.
  #   Person.new(:title => "Sir")
  # @param attrs [Hash] The attributes to set up the document with.
  # @return [Document] A new document.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#114
  def initialize(attrs = T.unsafe(nil)); end

  # Returns the value of attribute __selected_fields.
  #
  # source://mongoid//lib/mongoid/document.rb#29
  def __selected_fields; end

  # Sets the attribute __selected_fields
  #
  # @param value the value to set the attribute __selected_fields to.
  #
  # source://mongoid//lib/mongoid/document.rb#29
  def __selected_fields=(_arg0); end

  # Return a hash of the entire document hierarchy from this document and
  # below. Used when the attributes are needed for everything and not just
  # the current document.
  #
  # @example Get the full hierarchy.
  #   person.as_document
  # @return [Hash] A hash of all attributes in the hierarchy.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#177
  def as_document; end

  # Calls #as_json on the document with additional, Mongoid-specific options.
  #
  # @example Get the document as json.
  #   document.as_json(compact: true)
  # @note Rails 6 changes return value of as_json for non-primitive types
  #   such as BSON::ObjectId. In Rails <= 5, as_json returned these as
  #   instances of the class. In Rails 6, these are returned serialized to
  #   primitive types (e.g. {"$oid"=>"5bcfc40bde340b37feda98e9"}).
  #   See https://github.com/rails/rails/commit/2e5cb980a448e7f4ab00df6e9ad4c1cc456616aa
  #   for more information.
  # @option options
  # @param options [Hash] The options.
  # @return [Hash] The document as json.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/document.rb#201
  def as_json(options = T.unsafe(nil)); end

  # Returns an instance of the specified class with the attributes,
  # errors, and embedded documents of the current document.
  #
  # @example Return a subclass document as a superclass instance.
  #   manager.becomes(Person)
  # @param klass [Class] The class to become.
  # @raise [ArgumentError] If the class doesn't include Mongoid::Document
  # @return [Document] An instance of the specified class.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#222
  def becomes(klass); end

  # Freezes the internal attributes of the document.
  #
  # @example Freeze the document
  #   document.freeze
  # @return [Document] The document.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#53
  def freeze; end

  # Checks if the document is frozen
  #
  # @example Check if frozen
  #   document.frozen?
  # @return [true, false] True if frozen, else false.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#65
  def frozen?; end

  # Delegates to identity in order to allow two records of the same identity
  # to work with something like:
  #
  #   [ Person.find(1), Person.find(2), Person.find(3) ] &
  #   [ Person.find(1), Person.find(4) ] # => [ Person.find(1) ]
  #
  # @example Get the hash.
  #   document.hash
  # @return [Integer] The hash of the document's identity.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#81
  def hash; end

  # A Document's is identified absolutely by its class and database id:
  #
  # Person.first.identity #=> [Person, BSON::ObjectId('4f775130a04745933a000003')]
  #
  # @example Get the identity
  #   document.identity
  # @return [Array] An array containing [document.class, document._id]
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#95
  def identity; end

  # Return the model name of the document.
  #
  # @example Return the model name.
  #   document.model_name
  # @return [String] The model name.
  # @since 3.0.16
  #
  # source://mongoid//lib/mongoid/document.rb#139
  def model_name; end

  # Returns the value of attribute new_record.
  #
  # source://mongoid//lib/mongoid/document.rb#30
  def new_record; end

  # Return an array with this +Document+ only in it.
  #
  # @example Return the document in an array.
  #   document.to_a
  # @return [Array<Document>] An array with the document as its only item.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#163
  def to_a; end

  # Return the key value for the document.
  #
  # @example Return the key.
  #   document.to_key
  # @return [String] The id of the document or nil if new.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/document.rb#151
  def to_key; end

  private

  # source://mongoid//lib/mongoid/document.rb#288
  def as_attributes; end

  # Returns the logger
  #
  # @return [Logger] The configured logger or a default Logger instance.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/document.rb#258
  def logger; end

  # Get the name of the model used in caching.
  #
  # @example Get the model key.
  #   model.model_key
  # @return [String] The model key.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/document.rb#270
  def model_key; end

  # Implement this for calls to flatten on array.
  #
  # @example Get the document as an array.
  #   document.to_ary
  # @return [nil] Always nil.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/document.rb#282
  def to_ary; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
  end
end

# source://mongoid//lib/mongoid/document.rb#305
module Mongoid::Document::ClassMethods
  # Performs class equality checking.
  #
  # @example Compare the classes.
  #   document === other
  # @param other [Document, Object] The other object to compare with.
  # @return [true, false] True if the classes are equal, false if not.
  # @since 2.0.0.rc.4
  #
  # source://mongoid//lib/mongoid/document.rb#317
  def ===(other); end

  # Returns all types to query for when using this class as the base.
  #
  # @example Get the types.
  #   document._types
  # @return [Array<Class>] All subclasses of the current document.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#354
  def _types; end

  # Set the i18n scope to overwrite ActiveModel.
  #
  # @return [Symbol] :mongoid
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/document.rb#363
  def i18n_scope; end

  # Instantiate a new object, only when loaded from the database or when
  # the attributes have already been typecast.
  #
  # @example Create the document.
  #   Person.instantiate(:title => "Sir", :age => 30)
  # @param attrs [Hash] The hash of attributes to instantiate with.
  # @param selected_fields [Integer] The selected fields from the
  #   criteria.
  # @return [Document] A new document.
  # @since 1.0.0
  # @yield [doc]
  #
  # source://mongoid//lib/mongoid/document.rb#334
  def instantiate(attrs = T.unsafe(nil), selected_fields = T.unsafe(nil)); end

  # Returns the logger
  #
  # @example Get the logger.
  #   Person.logger
  # @return [Logger] The configured logger or a default Logger instance.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/document.rb#375
  def logger; end
end

# Regex for matching illegal BSON keys.
# Note that bson 4.1 has the constant BSON::String::ILLEGAL_KEY
# that should be used instead.
# When ruby driver 2.3.0 is released and Mongoid can be updated
# to require >= 2.3.0, the BSON constant can be used.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/document.rb#43
Mongoid::Document::ILLEGAL_KEY = T.let(T.unsafe(nil), Regexp)

# This module contains the behaviour of Mongoid's clone/dup of documents.
#
# source://mongoid//lib/mongoid/equality.rb#5
module Mongoid::Equality
  # Default comparison is via the string version of the id.
  #
  # @example Compare two documents.
  #   person <=> other_person
  # @param other [Document] The document to compare with.
  # @return [Integer] -1, 0, 1.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/equality.rb#17
  def <=>(other); end

  # Performs equality checking on the document ids. For more robust
  # equality checking please override this method.
  #
  # @example Compare for equality.
  #   document == other
  # @param other [Document, Object] The other object to compare with.
  # @return [true, false] True if the ids are equal, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/equality.rb#32
  def ==(other); end

  # Performs class equality checking.
  #
  # @example Compare the classes.
  #   document === other
  # @param other [Document, Object] The other object to compare with.
  # @return [true, false] True if the classes are equal, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/equality.rb#47
  def ===(other); end

  # Delegates to ==. Used when needing checks in hashes.
  #
  # @example Perform equality checking.
  #   document.eql?(other)
  # @param other [Document, Object] The object to check against.
  # @return [true, false] True if equal, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/equality.rb#61
  def eql?(other); end
end

# source://mongoid//lib/mongoid/errors/mongoid_error.rb#3
module Mongoid::Errors; end

# This error is raised in case of an ambigous relationship.
#
# @example An ambigous relationship.
#   class Person
#   include Mongoid::Document
#
#   has_many :invitations, inverse_of: :person
#   has_many :referred_invitations, class_name: "Invitation", inverse_of: :referred_by
#   end
#
#   class Invitation
#   include Mongoid::Document
#
#   belongs_to :person
#   belongs_to :referred_by, class_name: "Person"
#   end
#
# source://mongoid//lib/mongoid/errors/ambiguous_relationship.rb#21
class Mongoid::Errors::AmbiguousRelationship < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   AmbiguousRelationship.new(
  #   Person, Drug, :person, [ :drugs, :evil_drugs ]
  #   )
  # @param klass [Class] The base class.
  # @param inverse [Class] The inverse class.
  # @param name [Symbol] The relation name.
  # @param candidates [Array<Symbol>] The potential inverses.
  # @return [AmbiguousRelationship] a new instance of AmbiguousRelationship
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/ambiguous_relationship.rb#36
  def initialize(klass, inverse, name, candidates); end
end

# This error is raised when calling #save! or .create! on a model when one
# of the callbacks returns false.
#
# source://mongoid//lib/mongoid/errors/callback.rb#7
class Mongoid::Errors::Callback < ::Mongoid::Errors::MongoidError
  # Create the new callbacks error.
  #
  # @example Create the new callbacks error.
  #   Callbacks.new(Post, :create!)
  # @param klass [Class] The class of the document.
  # @param method [Symbol] The name of the method.
  # @return [Callback] a new instance of Callback
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/errors/callback.rb#18
  def initialize(klass, method); end
end

# This error is raised when calling #save! or .create! on a model when one
# of the callbacks returns false.
#
# source://mongoid//lib/mongoid/errors/delete_restriction.rb#7
class Mongoid::Errors::DeleteRestriction < ::Mongoid::Errors::MongoidError
  # Create the new callbacks error.
  #
  # @example Create the new callbacks error.
  #   Callbacks.new(Post, :create!)
  # @param document [Class]
  # @param relation [Symbol]
  # @return [DeleteRestriction] a new instance of DeleteRestriction
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/delete_restriction.rb#18
  def initialize(document, relation); end
end

# Raised when attempting to destroy a document that had destory callbacks
# return false.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/errors/document_not_destroyed.rb#9
class Mongoid::Errors::DocumentNotDestroyed < ::Mongoid::Errors::MongoidError
  # Instnatiate the exception.
  #
  # @example Create the error.
  #   DocumentNotDestroyed.new(Band)
  # @param id [Object] The document id.
  # @param klass [Class] The document class.
  # @return [DocumentNotDestroyed] a new instance of DocumentNotDestroyed
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/errors/document_not_destroyed.rb#20
  def initialize(id, klass); end
end

# Raised when querying the database for a document by a specific id or by
# set of attributes which does not exist. If multiple ids were passed then
# it will display all of those.
#
# source://mongoid//lib/mongoid/errors/document_not_found.rb#8
class Mongoid::Errors::DocumentNotFound < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   DocumentNotFound.new(Person, ["1", "2"])
  # @example Create the error with attributes instead of ids
  #   DocumentNotFound.new(Person, :ssn => "1234", :name => "Helen")
  # @param klass [Class] The model class.
  # @param params [Hash, Array, Object] The attributes or ids.
  # @param unmatched [Array] The unmatched ids, if appropriate
  # @return [DocumentNotFound] a new instance of DocumentNotFound
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#23
  def initialize(klass, params, unmatched = T.unsafe(nil)); end

  # Returns the value of attribute klass.
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#10
  def klass; end

  # Returns the value of attribute params.
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#10
  def params; end

  private

  # Create the problem.
  #
  # @example Create the problem.
  #   error.problem
  # @return [String] The problem.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#103
  def message_key(params); end

  # Get the string to display the document params that were unmatched.
  #
  # @example Get the missing string.
  #   error.missing(1)
  # @param unmatched [Object, Array] The ids that did not match.
  # @return [String] The missing string.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#55
  def missing(unmatched); end

  # Get the string to display the document params that were searched for.
  #
  # @example Get the searched string.
  #   error.searched(1)
  # @param params [Object, Array] The ids that were searched for.
  # @return [String] The searched string.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#73
  def searched(params); end

  # Get the total number of expected documents.
  #
  # @example Get the total.
  #   error.total([ 1, 2, 3 ])
  # @param params [Object, Array] What was searched for.
  # @return [Integer] The total number.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/document_not_found.rb#91
  def total(params); end
end

# This error is raised when attempting to eager load a many to many
# relation.
#
# source://mongoid//lib/mongoid/errors/eager_load.rb#7
class Mongoid::Errors::EagerLoad < ::Mongoid::Errors::MongoidError
  # Create the new eager load error.
  #
  # @example Create the new eager load error.
  #   EagerLoad.new(:preferences)
  # @param name [Symbol] The name of the relation.
  # @return [EagerLoad] a new instance of EagerLoad
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/errors/eager_load.rb#17
  def initialize(name); end
end

# This error is raised when attempting to do a query with a
# collation on documents in memory.
#
# source://mongoid//lib/mongoid/errors/in_memory_collation_not_supported.rb#7
class Mongoid::Errors::InMemoryCollationNotSupported < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new unsupported collation error.
  #   InMemoryCollationNotSupported.new
  # @return [InMemoryCollationNotSupported] a new instance of InMemoryCollationNotSupported
  # @since 6.1.0
  #
  # source://mongoid//lib/mongoid/errors/in_memory_collation_not_supported.rb#15
  def initialize; end
end

# This error is raised when trying to access a Mongo::Collection from an
# embedded document.
#
# @example Create the error.
#   InvalidCollection.new(Address)
#
# source://mongoid//lib/mongoid/errors/invalid_collection.rb#10
class Mongoid::Errors::InvalidCollection < ::Mongoid::Errors::MongoidError
  # @return [InvalidCollection] a new instance of InvalidCollection
  #
  # source://mongoid//lib/mongoid/errors/invalid_collection.rb#11
  def initialize(klass); end
end

# This error is raised when a bad configuration option is attempted to be
# set.
#
# source://mongoid//lib/mongoid/errors/invalid_config_option.rb#7
class Mongoid::Errors::InvalidConfigOption < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   InvalidConfigOption.new(:name, [ :option ])
  # @param name [Symbol, String] The attempted config option name.
  # @return [InvalidConfigOption] a new instance of InvalidConfigOption
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_config_option.rb#17
  def initialize(name); end
end

# This error is raised when an invalid strategy is defined for an association dependency.
#
# source://mongoid//lib/mongoid/errors/invalid_dependent_strategy.rb#6
class Mongoid::Errors::InvalidDependentStrategy < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   InvalidDependentStrategy.new(association, invalid_strategy, valid_strategies)
  # @param association [Mongoid::Association] The association for which this
  #   dependency is defined.
  # @param invalid_strategy [Symbol, String] The attempted invalid strategy.
  # @param valid_strategies [Array<Symbol>] The valid strategies.
  # @return [InvalidDependentStrategy] a new instance of InvalidDependentStrategy
  # @since 7.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_dependent_strategy.rb#19
  def initialize(association, invalid_strategy, valid_strategies); end
end

# This error is raised when trying to create a field that conflicts with
# an already defined method.
#
# source://mongoid//lib/mongoid/errors/invalid_field.rb#7
class Mongoid::Errors::InvalidField < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   InvalidField.new(person, :crazy_method_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [InvalidField] a new instance of InvalidField
  #
  # source://mongoid//lib/mongoid/errors/invalid_field.rb#16
  def initialize(klass, name); end

  private

  # Get the location of the method.
  #
  # @example Get the location of the method on the filesystem.
  #   error.location(Person, :crazy_method_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [Array<String, Integer>] The location of the method.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_field.rb#58
  def location(klass, name); end

  # Get the queryable of the method.
  #
  # @example Get the originating class or module.
  #   error.queryable(Person, :crazy_method_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [Class, Module] The originating class or module.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_field.rb#43
  def origin(klass, name); end
end

# This error is raised when trying to create a field that has an invalid
# option.
#
# source://mongoid//lib/mongoid/errors/invalid_field_option.rb#7
class Mongoid::Errors::InvalidFieldOption < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   InvalidFieldOption.new(Model, :name, :localized, [ :localize ])
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @param option [Symbol] The option name.
  # @param valid [Array<Symbol>] All the valid options.
  # @return [InvalidFieldOption] a new instance of InvalidFieldOption
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_field_option.rb#20
  def initialize(klass, name, option, valid); end
end

# Raised when invalid arguments are passed to #find.
#
# source://mongoid//lib/mongoid/errors/invalid_find.rb#6
class Mongoid::Errors::InvalidFind < ::Mongoid::Errors::MongoidError
  # Create the new invalid find error.
  #
  # @example Create the error.
  #   InvalidFind.new
  # @return [InvalidFind] a new instance of InvalidFind
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_find.rb#14
  def initialize; end
end

# This error is raised when an invalid value is passed to an eager
# loading query.
#
# source://mongoid//lib/mongoid/errors/invalid_includes.rb#7
class Mongoid::Errors::InvalidIncludes < ::Mongoid::Errors::MongoidError
  # Initialize the error.
  #
  # @example Initialize the error.
  #   InvalidIncludes.new(Band, [ :members ])
  # @param klass [Class] The model class.
  # @param args [Array<Object>] The arguments passed to the includes.
  # @return [InvalidIncludes] a new instance of InvalidIncludes
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/errors/invalid_includes.rb#18
  def initialize(klass, args); end
end

# Raised when an invalid index is defined.
#
# source://mongoid//lib/mongoid/errors/invalid_index.rb#6
class Mongoid::Errors::InvalidIndex < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   InvalidIndex.new(Band, name: 1)
  # @param klass [Class] The model class.
  # @param spec [Hash] The invalid specification.
  # @param options [Hash] The invalid options.
  # @return [InvalidIndex] a new instance of InvalidIndex
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_index.rb#18
  def initialize(klass, spec, options); end
end

# Raised when invalid options are passed to a relation macro.
#
# source://mongoid//lib/mongoid/errors/invalid_options.rb#6
class Mongoid::Errors::InvalidOptions < ::Mongoid::Errors::MongoidError
  # Instantiate the options error.
  #
  # @example Create the error.
  #   InvalidOptions.new(:name, :polymorphic, [ :as ])
  # @param name [Symbol] The name of the relation.
  # @param invalid [Symbol] The invalid option.
  # @param valid [Array<Symbol>] The allowed options.
  # @return [InvalidOptions] a new instance of InvalidOptions
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_options.rb#18
  def initialize(name, invalid, valid); end
end

# Used when attempting to get embedded paths with incorrect root path set.
#
# source://mongoid//lib/mongoid/errors/invalid_path.rb#6
class Mongoid::Errors::InvalidPath < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   InvalidPath.new(Address)
  # @param klass [Class] The document class.
  # @return [InvalidPath] a new instance of InvalidPath
  # @since 3.0.14
  #
  # source://mongoid//lib/mongoid/errors/invalid_path.rb#16
  def initialize(klass); end
end

# Raised when invalid options are used to create a persistence context.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/errors/invalid_persistence_option.rb#8
class Mongoid::Errors::InvalidPersistenceOption < ::Mongoid::Errors::MongoidError
  # Instantiate the persistence context option error.
  #
  # @example Create the error.
  #   InvalidPersistenceOption.new(:invalid_option, [ :connect_timeout, :database ])
  # @param invalid [Symbol] The invalid option.
  # @param valid [Array<Symbol>] The allowed options.
  # @return [InvalidPersistenceOption] a new instance of InvalidPersistenceOption
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_persistence_option.rb#19
  def initialize(invalid, valid); end
end

# This error is raised when trying to create a relation that conflicts with
# an already defined method.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/errors/invalid_relation.rb#9
class Mongoid::Errors::InvalidRelation < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   InvalidRelation.new(person, :crazy_relation_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [InvalidRelation] a new instance of InvalidRelation
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_relation.rb#18
  def initialize(klass, name); end

  private

  # Get the location of the relation definition.
  #
  # @example Get the location of the method on the filesystem.
  #   error.location(Person, :crazy_method_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [Array<String, Integer>] The location of the method.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_relation.rb#60
  def location(klass, name); end

  # Get the queryable of the method.
  #
  # @example Get the originating class or module.
  #   error.queryable(Person, :crazy_method_name)
  # @param klass [Class] The document class.
  # @param name [Symbol] The method name.
  # @return [Class, Module] The originating class or module.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_relation.rb#45
  def origin(klass, name); end
end

# Raised when an option provided for a relation is invalid.
#
# source://mongoid//lib/mongoid/errors/invalid_relation_option.rb#6
class Mongoid::Errors::InvalidRelationOption < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   InvalidRelationOption.new(Person, invalid_option: 'make_me_a_sandwich')
  # @param klass [Class] The model class.
  # @param name [String, Symbol] The relation name.
  # @param option [Symbol] The invalid option.
  # @param valid_options [Array<Symbol>] The valid option.
  # @return [InvalidRelationOption] a new instance of InvalidRelationOption
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_relation_option.rb#19
  def initialize(klass, name, option, valid_options); end
end

# This error is raised when defining a scope of an invalid type.
#
# source://mongoid//lib/mongoid/errors/invalid_scope.rb#6
class Mongoid::Errors::InvalidScope < ::Mongoid::Errors::MongoidError
  # Create the error.
  #
  # @example Create the error.
  #   InvalidScope.new(Band, {})
  # @param klass [Class] The model class.
  # @param value [Object] The attempted scope value.
  # @return [InvalidScope] a new instance of InvalidScope
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_scope.rb#17
  def initialize(klass, value); end
end

# This error is raised when a session is attempted to be used with a model whose client cannot use it, if
#   sessions are nested, or if the mongodb deployment doesn't support sessions.
#
# @since 6.4.0
#
# source://mongoid//lib/mongoid/errors/invalid_session_use.rb#9
class Mongoid::Errors::InvalidSessionUse < ::Mongoid::Errors::MongoidError
  # Create the error.
  #
  # @example Create the error.
  #   InvalidSessionUse.new(:invalid_session_use)
  # @param error_type [:invalid_sesion_use, :invalid_session_nesting] The type of session misuse.
  # @return [InvalidSessionUse] a new instance of InvalidSessionUse
  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_session_use.rb#19
  def initialize(error_type); end
end

# Raised when trying to set a polymorphic "references in" relation to a
# model with multiple "references many/one" relations pointing to that
# first model.
#
# @example Invalid setting of a polymorphic relation.
#   class Face
#   include Mongoid::Document
#
#   has_one :left_eye, class_name: "Eye", as: :eyeable
#   has_one :right_eye, class_name: "Eye", as: :eyeable
#   end
#
#   class Eye
#   include Mongoid::Document
#
#   belongs_to :eyeable, polymorphic: true
#   end
#
#   eye = Eye.new
#   face = Face.new
#   eye.eyeable = face # Raises error
#
# source://mongoid//lib/mongoid/errors/invalid_set_polymorphic_relation.rb#27
class Mongoid::Errors::InvalidSetPolymorphicRelation < ::Mongoid::Errors::MongoidError
  # Create the new invalid set polymorphic relation error.
  #
  # @example Create the error.
  #   InvalidSetPolymorphicRelation.new
  # @return [InvalidSetPolymorphicRelation] a new instance of InvalidSetPolymorphicRelation
  #
  # source://mongoid//lib/mongoid/errors/invalid_set_polymorphic_relation.rb#33
  def initialize(name, klass, other_klass); end
end

# Raised when options provided to :store_in are invalid.
#
# source://mongoid//lib/mongoid/errors/invalid_storage_options.rb#6
class Mongoid::Errors::InvalidStorageOptions < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   InvalidStorageOptions.new(Person, invalid_option: 'name')
  # @param klass [Class] The model class.
  # @param options [Hash, String, Symbol] The provided options.
  # @return [InvalidStorageOptions] a new instance of InvalidStorageOptions
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_storage_options.rb#17
  def initialize(klass, options); end
end

# Raised when calling store_in in a sub-class of Mongoid::Document
#
# source://mongoid//lib/mongoid/errors/invalid_storage_parent.rb#6
class Mongoid::Errors::InvalidStorageParent < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   InvalidStorageParent.new(Person)
  # @param klass [Class] The model class.
  # @return [InvalidStorageParent] a new instance of InvalidStorageParent
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/errors/invalid_storage_parent.rb#16
  def initialize(klass); end
end

# This exception is raised when a bad value is attempted to be converted to
# a date or time.
#
# source://mongoid//lib/mongoid/errors/invalid_time.rb#7
class Mongoid::Errors::InvalidTime < ::Mongoid::Errors::MongoidError
  # Create the new invalid date error.
  #
  # @example Create the new invalid date error.
  #   InvalidTime.new("this is not a time")
  # @param value [Object] The value that was attempted.
  # @return [InvalidTime] a new instance of InvalidTime
  # @since 2.3.1
  #
  # source://mongoid//lib/mongoid/errors/invalid_time.rb#17
  def initialize(value); end
end

# This error is raised when trying to set an attribute with an invalid value.
# For example when try to set an Array value to a Hash attribute.
#
# source://mongoid//lib/mongoid/errors/invalid_value.rb#8
class Mongoid::Errors::InvalidValue < ::Mongoid::Errors::MongoidError
  # @return [InvalidValue] a new instance of InvalidValue
  #
  # source://mongoid//lib/mongoid/errors/invalid_value.rb#9
  def initialize(field_class, value_class); end
end

# Raised when no inverse_of definition can be found when needed.
#
# source://mongoid//lib/mongoid/errors/inverse_not_found.rb#6
class Mongoid::Errors::InverseNotFound < ::Mongoid::Errors::MongoidError
  # Create then new error.
  #
  # @example Create the new error.
  #   InverseNotFound.new(Town, :citizens, Person, :town_id)
  # @param base [Class] The base class.
  # @param name [Symbol] The name of the relation.
  # @param klass [Class] The child class.
  # @param inverse [Symbol] The attempted inverse key.
  # @return [InverseNotFound] a new instance of InverseNotFound
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/inverse_not_found.rb#19
  def initialize(base, name, klass, inverse); end
end

# This error is raised when a client configuration contains both a uri and
# other standard options.
#
# source://mongoid//lib/mongoid/errors/mixed_client_configuration.rb#7
class Mongoid::Errors::MixedClientConfiguration < ::Mongoid::Errors::MongoidError
  # Initialize the error.
  #
  # @example Initialize the error.
  #   MixedClientConfiguration.new(:name, {})
  # @param name [Symbol] The name of the client config.
  # @param config [Hash] The configuration options.
  # @return [MixedClientConfiguration] a new instance of MixedClientConfiguration
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/mixed_client_configuration.rb#18
  def initialize(name, config); end
end

# This error is raised when trying to reference an embedded document from
# a document in another collection that is not its parent.
#
# @example An illegal reference to an embedded document.
#   class Post
#   include Mongoid::Document
#   references_many :addresses
#   end
#
#   class Address
#   include Mongoid::Document
#   embedded_in :person
#   referenced_in :post
#   end
# @since 2.0.0
#
# source://mongoid//lib/mongoid/errors/mixed_relations.rb#21
class Mongoid::Errors::MixedRelations < ::Mongoid::Errors::MongoidError
  # @return [MixedRelations] a new instance of MixedRelations
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/errors/mixed_relations.rb#22
  def initialize(root_klass, embedded_klass); end
end

# Default parent Mongoid error for all custom errors. This handles the base
# key for the translations and provides the convenience method for
# translating the messages.
#
# source://mongoid//lib/mongoid/errors/mongoid_error.rb#8
class Mongoid::Errors::MongoidError < ::StandardError
  # Compose the message.
  #
  # @example Create the message
  #   error.compose_message
  # @return [String] The composed message.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#22
  def compose_message(key, attributes = T.unsafe(nil)); end

  # Returns the value of attribute problem.
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#10
  def problem; end

  # Returns the value of attribute resolution.
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#10
  def resolution; end

  # Returns the value of attribute summary.
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#10
  def summary; end

  private

  # Given the key of the specific error and the options hash, translate the
  # message.
  #
  # @example Translate the message.
  #   error.translate("errors", :key => value)
  # @param key [String] The key of the error in the locales.
  # @param options [Hash] The objects to pass to create the message.
  # @return [String] A localized error message string.
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#48
  def translate(key, options); end

  # Create the problem.
  #
  # @example Create the problem.
  #   error.problem("error", {})
  # @param key [String, Symbol] The error key.
  # @param attributes [Hash] The attributes to interpolate.
  # @return [String] The problem.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#63
  def translate_problem(key, attributes); end

  # Create the resolution.
  #
  # @example Create the resolution.
  #   error.resolution("error", {})
  # @param key [String, Symbol] The error key.
  # @param attributes [Hash] The attributes to interpolate.
  # @return [String] The resolution.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#93
  def translate_resolution(key, attributes); end

  # Create the summary.
  #
  # @example Create the summary.
  #   error.summary("error", {})
  # @param key [String, Symbol] The error key.
  # @param attributes [Hash] The attributes to interpolate.
  # @return [String] The summary.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/mongoid_error.rb#78
  def translate_summary(key, attributes); end
end

# source://mongoid//lib/mongoid/errors/mongoid_error.rb#12
Mongoid::Errors::MongoidError::BASE_KEY = T.let(T.unsafe(nil), String)

# This error is raised when metadata could not be found when defining
# nested attributes, or the name was incorrect.
#
# source://mongoid//lib/mongoid/errors/nested_attributes_metadata_not_found.rb#7
class Mongoid::Errors::NestedAttributesMetadataNotFound < ::Mongoid::Errors::MongoidError
  # Create the new metadata error.
  #
  # @example Create the new metadata error.
  #   NestedAttributesMetadataNotFound.new(klass, name)
  # @param klass [Class] The class of the document.
  # @param name [Symbol, String] The name of the relation
  # @return [NestedAttributesMetadataNotFound] a new instance of NestedAttributesMetadataNotFound
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/nested_attributes_metadata_not_found.rb#18
  def initialize(klass, name); end
end

# This error is raised when attempting to create a new client that does
# not have a named configuration.
#
# source://mongoid//lib/mongoid/errors/no_client_config.rb#7
class Mongoid::Errors::NoClientConfig < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   NoClientConfig.new(:secondary)
  # @param name [String, Symbol] The name of the client.
  # @return [NoClientConfig] a new instance of NoClientConfig
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_client_config.rb#17
  def initialize(name); end
end

# This error is raised when a client is configured without a database.
#
# source://mongoid//lib/mongoid/errors/no_client_database.rb#6
class Mongoid::Errors::NoClientDatabase < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   NoClientDatabase.new(:default, {}})
  # @param name [Symbol, String] The db config key.
  # @param config [Hash] The hash configuration options.
  # @return [NoClientDatabase] a new instance of NoClientDatabase
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_client_database.rb#17
  def initialize(name, config); end
end

# This error is raised when a client is configured without hosts.
#
# source://mongoid//lib/mongoid/errors/no_client_hosts.rb#6
class Mongoid::Errors::NoClientHosts < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   NoClientHosts.new(:default, {}})
  # @param name [Symbol, String] The db config key.
  # @param config [Hash] The hash configuration options.
  # @return [NoClientHosts] a new instance of NoClientHosts
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_client_hosts.rb#17
  def initialize(name, config); end
end

# This error is raised when no clients exists in the database
# configuration.
#
# source://mongoid//lib/mongoid/errors/no_clients_config.rb#7
class Mongoid::Errors::NoClientsConfig < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   NoClientsConfig.new
  # @return [NoClientsConfig] a new instance of NoClientsConfig
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_clients_config.rb#15
  def initialize; end
end

# This error is raised when a default client is not defined.
#
# source://mongoid//lib/mongoid/errors/no_default_client.rb#6
class Mongoid::Errors::NoDefaultClient < ::Mongoid::Errors::MongoidError
  # Create the new error with the defined client names.
  #
  # @example Create the new error.
  #   NoDefaultClient.new([ :secondary ])
  # @param keys [Array<Symbol>] The defined clients.
  # @return [NoDefaultClient] a new instance of NoDefaultClient
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_default_client.rb#16
  def initialize(keys); end
end

# Raised when trying to load configuration with no RACK_ENV set
#
# source://mongoid//lib/mongoid/errors/no_environment.rb#6
class Mongoid::Errors::NoEnvironment < ::Mongoid::Errors::MongoidError
  # Create the new no environment error.
  #
  # @example Create the new no environment error.
  #   NoEnvironment.new
  # @return [NoEnvironment] a new instance of NoEnvironment
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/errors/no_environment.rb#14
  def initialize; end
end

# Raised when executing a map/reduce without specifying the output
# location.
#
# source://mongoid//lib/mongoid/errors/no_map_reduce_output.rb#7
class Mongoid::Errors::NoMapReduceOutput < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   NoMapReduceOutput.new({ map: "" })
  # @param command [Hash] The map/reduce command.
  # @return [NoMapReduceOutput] a new instance of NoMapReduceOutput
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_map_reduce_output.rb#17
  def initialize(command); end
end

# Used when trying to persist data when metadata has not been set.
#
# source://mongoid//lib/mongoid/errors/no_metadata.rb#6
class Mongoid::Errors::NoMetadata < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the error.
  #   NoMetadata.new(Address)
  # @param klass [Class] The document class.
  # @return [NoMetadata] a new instance of NoMetadata
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_metadata.rb#16
  def initialize(klass); end
end

# This error is raised when trying to persist an embedded document
# when there is no parent set.
#
# source://mongoid//lib/mongoid/errors/no_parent.rb#7
class Mongoid::Errors::NoParent < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   NoParent.new(klass)
  # @param klass [Class] The class of the embedded document.
  # @return [NoParent] a new instance of NoParent
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/no_parent.rb#17
  def initialize(klass); end
end

# This error is raised when attempting the change the value of a readonly
# attribute after the document has been persisted.
#
# source://mongoid//lib/mongoid/errors/readonly_attribute.rb#7
class Mongoid::Errors::ReadonlyAttribute < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Create the new error.
  #   ReadonlyAttribute.new(:title, "mr")
  # @param name [Symbol, String] The name of the attribute.
  # @param value [Object] The attempted set value.
  # @return [ReadonlyAttribute] a new instance of ReadonlyAttribute
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/readonly_attribute.rb#18
  def initialize(name, value); end
end

# Raised when attempting to persist a document that was loaded from the
# database with partial fields.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/errors/readonly_document.rb#9
class Mongoid::Errors::ReadonlyDocument < ::Mongoid::Errors::MongoidError
  # Instnatiate the exception.
  #
  # @example Create the error.
  #   ReadonlyDocument.new(Band)
  # @param klass [Class] The document class.
  # @return [ReadonlyDocument] a new instance of ReadonlyDocument
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/errors/readonly_document.rb#19
  def initialize(klass); end
end

# This error is raised when trying to create a scope with an name already
# taken by another scope or method
#
# @example Create the error.
#   ScopeOverwrite.new(Person,'teenies')
#
# source://mongoid//lib/mongoid/errors/scope_overwrite.rb#10
class Mongoid::Errors::ScopeOverwrite < ::Mongoid::Errors::MongoidError
  # @return [ScopeOverwrite] a new instance of ScopeOverwrite
  #
  # source://mongoid//lib/mongoid/errors/scope_overwrite.rb#11
  def initialize(model_name, scope_name); end
end

# This error is raised when trying to create set nested records above the
# specified :limit
#
# @example Create the error.
#   TooManyNestedAttributeRecords.new('association', limit)
#
# source://mongoid//lib/mongoid/errors/too_many_nested_attribute_records.rb#9
class Mongoid::Errors::TooManyNestedAttributeRecords < ::Mongoid::Errors::MongoidError
  # @return [TooManyNestedAttributeRecords] a new instance of TooManyNestedAttributeRecords
  #
  # source://mongoid//lib/mongoid/errors/too_many_nested_attribute_records.rb#10
  def initialize(association, limit); end
end

# This error is raised when trying to set a value in Mongoid that is not
# already set with dynamic attributes or the field is not defined.
#
# source://mongoid//lib/mongoid/errors/unknown_attribute.rb#7
class Mongoid::Errors::UnknownAttribute < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Instantiate the error.
  #   UnknownAttribute.new(Person, "gender")
  # @param klass [Class] The model class.
  # @param name [String, Symbol] The name of the attribute.
  # @return [UnknownAttribute] a new instance of UnknownAttribute
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/unknown_attribute.rb#18
  def initialize(klass, name); end
end

# This error is raised when trying to instantiate a model object from the value in
# the '_type' field of a document and the class doesn't exist.
#
# source://mongoid//lib/mongoid/errors/unknown_model.rb#7
class Mongoid::Errors::UnknownModel < ::Mongoid::Errors::MongoidError
  # Create the new error.
  #
  # @example Instantiate the error.
  #   UnknownModel.new('InvalidClass', "invalid_class")
  # @param klass [String] The model class.
  # @param value [String] The value used to determine the (invalid) class.
  # @return [UnknownModel] a new instance of UnknownModel
  # @since 7.0.0
  #
  # source://mongoid//lib/mongoid/errors/unknown_model.rb#18
  def initialize(klass, value); end
end

# Raised when attempting to call create or create! through a
# references_many when the parent document has not been saved. This
# prevents the child from getting presisted and immediately being orphaned.
#
# source://mongoid//lib/mongoid/errors/unsaved_document.rb#8
class Mongoid::Errors::UnsavedDocument < ::Mongoid::Errors::MongoidError
  # @return [UnsavedDocument] a new instance of UnsavedDocument
  #
  # source://mongoid//lib/mongoid/errors/unsaved_document.rb#9
  def initialize(base, document); end
end

# Raised when Javascript criteria selector is passed for embedded document.
#
# source://mongoid//lib/mongoid/errors/unsupported_javascript.rb#6
class Mongoid::Errors::UnsupportedJavascript < ::Mongoid::Errors::MongoidError
  # Create the new error caused by using Javascript in embedded document criteria selector.
  #
  # @example Create the error.
  #   UnsupportedJavascriptSelector.new(Album, "this.name == '101'")
  # @param klass [Class] The embedded document class.
  # @param javascript [String] The javascript expression.
  # @return [UnsupportedJavascript] a new instance of UnsupportedJavascript
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/errors/unsupported_javascript.rb#17
  def initialize(klass, javascript); end
end

# Raised when a persistence method ending in ! fails validation. The message
# will contain the full error messages from the +Document+ in question.
#
# @example Create the error.
#   Validations.new(person.errors)
#
# source://mongoid//lib/mongoid/errors/validations.rb#10
class Mongoid::Errors::Validations < ::Mongoid::Errors::MongoidError
  # @return [Validations] a new instance of Validations
  #
  # source://mongoid//lib/mongoid/errors/validations.rb#14
  def initialize(document); end

  # Returns the value of attribute document.
  #
  # source://mongoid//lib/mongoid/errors/validations.rb#11
  def document; end

  # Returns the value of attribute document.
  #
  # source://mongoid//lib/mongoid/errors/validations.rb#11
  def record; end
end

# Contains behaviour specific to evolving for queryable queries.
#
# source://mongoid//lib/mongoid/evolvable.rb#5
module Mongoid::Evolvable
  # Evolve the document into an object id.
  #
  # @example Evolve the document.
  #   document.__evolve_object_id__
  # @return [Object] The document's id.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/evolvable.rb#15
  def __evolve_object_id__; end
end

# source://mongoid//lib/mongoid/extensions/array.rb#3
module Mongoid::Extensions; end

# source://mongoid//lib/mongoid/extensions/array.rb#4
module Mongoid::Extensions::Array
  # Evolve the array into an array of object ids.
  #
  # @example Evolve the array to object ids.
  #   [ id ].__evolve_object_id__
  # @return [Array<BSON::ObjectId>] The converted array.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#14
  def __evolve_object_id__; end

  # Get the array of args as arguments for a find query.
  #
  # @example Get the array as find args.
  #   [ 1, 2, 3 ].__find_args__
  # @return [Array] The array of args.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#27
  def __find_args__; end

  # Mongoize the array into an array of object ids.
  #
  # @example Evolve the array to object ids.
  #   [ id ].__mongoize_object_id__
  # @return [Array<BSON::ObjectId>] The converted array.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#39
  def __mongoize_object_id__; end

  # Converts the array for storing as a time.
  #
  # @example Convert the array to a time.
  #   [ 2010, 1, 1 ].__mongoize_time__
  # @return [Time] The time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#52
  def __mongoize_time__; end

  # Check if the array is part of a blank relation criteria.
  #
  # @example Is the array blank criteria?
  #   [].blank_criteria?
  # @return [true, false] If the array is blank criteria.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#64
  def blank_criteria?; end

  # Delete the first object in the array that is equal to the supplied
  # object and return it. This is much faster than performing a standard
  # delete for large arrays ince it attempt to delete multiple in the
  # other.
  #
  # @example Delete the first object.
  #   [ "1", "2", "1" ].delete_one("1")
  # @param object [Object] The object to delete.
  # @return [Object] The deleted object.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#106
  def delete_one(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   object.mongoize
  # @return [Array] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#89
  def mongoize; end

  # Is the array a set of multiple arguments in a method?
  #
  # @example Is this multi args?
  #   [ 1, 2, 3 ].multi_arged?
  # @return [true, false] If the array is multi args.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#76
  def multi_arged?; end

  # Is the object's size changable?
  #
  # @example Is the object resizable?
  #   object.resizable?
  # @return [true] true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#119
  def resizable?; end
end

# source://mongoid//lib/mongoid/extensions/array.rb#123
module Mongoid::Extensions::Array::ClassMethods
  # Convert the provided object to a proper array of foreign keys.
  #
  # @example Mongoize the object.
  #   Array.__mongoize_fk__(constraint, object)
  # @param association [Association] The association metadata.
  # @param object [Object] The object to convert.
  # @return [Array] The array of ids.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#136
  def __mongoize_fk__(association, object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Array.mongoize([ 1, 2, 3 ])
  # @param object [Object] The object to mongoize.
  # @return [Array] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#155
  def mongoize(object); end

  # Is the object's size changable?
  #
  # @example Is the object resizable?
  #   Array.resizable?
  # @return [true] true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/array.rb#171
  def resizable?; end
end

# source://mongoid//lib/mongoid/extensions/big_decimal.rb#4
module Mongoid::Extensions::BigDecimal
  # Convert the big decimal to an $inc-able value.
  #
  # @example Convert the big decimal.
  #   bd.__to_inc__
  # @return [Float] The big decimal as a float.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/extensions/big_decimal.rb#14
  def __to_inc__; end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   object.mongoize
  # @return [Object] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/big_decimal.rb#27
  def mongoize; end

  # Is the BigDecimal a number?
  #
  # @example Is the object a number?.
  #   object.numeric?
  # @return [true] Always true.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/extensions/big_decimal.rb#39
  def numeric?; end
end

# source://mongoid//lib/mongoid/extensions/big_decimal.rb#43
module Mongoid::Extensions::BigDecimal::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Object.demongoize(object)
  # @param object [Object] The object to demongoize.
  # @return [BigDecimal, nil] A BigDecimal derived from the object or nil.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/big_decimal.rb#55
  def demongoize(object); end

  # Mongoize an object of any type to how it's stored in the db as a String.
  #
  # @example Mongoize the object.
  #   BigDecimal.mongoize(123)
  # @param object [Object] The object to Mongoize
  # @return [String, nil] A String representing the object or nil.
  # @since 3.0.7
  #
  # source://mongoid//lib/mongoid/extensions/big_decimal.rb#69
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/date.rb#4
module Mongoid::Extensions::Date
  # Convert the date into a time.
  #
  # @example Convert the date to a time.
  #   date.__mongoize_time__
  # @return [Time] The converted time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date.rb#20
  def __mongoize_time__; end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   date.mongoize
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date.rb#33
  def mongoize; end
end

# source://mongoid//lib/mongoid/extensions/date.rb#37
module Mongoid::Extensions::Date::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Date.demongoize(object)
  # @param object [Time] The time from Mongo.
  # @return [Date] The object as a date.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date.rb#49
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Date.mongoize("2012-1-1")
  # @param object [Object] The object to mongoize.
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date.rb#64
  def mongoize(object); end
end

# Constant for epoch - used when passing invalid times.
#
# @deprecated No longer used as a return value from #mongoize passed
#   an invalid date string.
#
# source://mongoid//lib/mongoid/extensions/date.rb#10
Mongoid::Extensions::Date::EPOCH = T.let(T.unsafe(nil), Date)

# source://mongoid//lib/mongoid/extensions/date_time.rb#4
module Mongoid::Extensions::DateTime
  # Mongoize the date time into a time.
  #
  # @example Mongoize the date time.
  #   date_time.__mongoize_time__
  # @return [Time] The mongoized time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date_time.rb#14
  def __mongoize_time__; end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   date_time.mongoize
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date_time.rb#33
  def mongoize; end
end

# source://mongoid//lib/mongoid/extensions/date_time.rb#37
module Mongoid::Extensions::DateTime::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   DateTime.demongoize(object)
  # @param object [Time] The time from Mongo.
  # @return [DateTime] The object as a date.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date_time.rb#49
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   DateTime.mongoize("2012-1-1")
  # @param object [Object] The object to convert.
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/date_time.rb#64
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/decimal128.rb#4
module Mongoid::Extensions::Decimal128
  # Evolve the decimal128.
  #
  # @example Evolve the decimal128.
  #   decimal128.__evolve_decimal128__
  # @return [BSON::Decimal128] self.
  # @since 6.1.0
  #
  # source://mongoid//lib/mongoid/extensions/decimal128.rb#14
  def __evolve_decimal128__; end
end

# source://mongoid//lib/mongoid/extensions/decimal128.rb#18
module Mongoid::Extensions::Decimal128::ClassMethods
  # Evolve the object into a mongo-friendly value to query with.
  #
  # @example Evolve the object.
  #   Decimal128.evolve(dec)
  # @param object [Object] The object to evolve.
  # @return [BSON::Decimal128] The decimal128.
  # @since 6.1.0
  #
  # source://mongoid//lib/mongoid/extensions/decimal128.rb#30
  def evolve(object); end
end

# source://mongoid//lib/mongoid/extensions/false_class.rb#4
module Mongoid::Extensions::FalseClass
  # Get the value of the object as a mongo friendy sort value.
  #
  # @example Get the object as sort criteria.
  #   object.__sortable__
  # @return [Integer] 0.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/false_class.rb#14
  def __sortable__; end

  # Is the passed value a boolean?
  #
  # @example Is the value a boolean type?
  #   false.is_a?(Boolean)
  # @param other [Class] The class to check.
  # @return [true, false] If the other is a boolean.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/false_class.rb#28
  def is_a?(other); end
end

# source://mongoid//lib/mongoid/extensions/float.rb#4
module Mongoid::Extensions::Float
  # Convert the float into a time.
  #
  # @example Convert the float into a time.
  #   1335532685.117847.__mongoize_time__
  # @return [Time] The float as a time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/float.rb#14
  def __mongoize_time__; end

  # Is the float a number?
  #
  # @example Is the object a number?.
  #   object.numeric?
  # @return [true] Always true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/float.rb#26
  def numeric?; end
end

# source://mongoid//lib/mongoid/extensions/float.rb#30
module Mongoid::Extensions::Float::ClassMethods
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Float.mongoize("123.11")
  # @param object [Object] The object to mongoize.
  # @return [String] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/float.rb#43
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Float.mongoize("123.11")
  # @param object [Object] The object to mongoize.
  # @return [String] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/float.rb#43
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/hash.rb#4
module Mongoid::Extensions::Hash
  # Consolidate the key/values in the hash under an atomic $set.
  #
  # @example Consolidate the hash.
  #   { name: "Placebo" }.__consolidate__
  # @return [Hash] A new consolidated hash.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#42
  def __consolidate__(klass); end

  # Evolves each value in the hash to an object id if it is convertable.
  #
  # @example Convert the hash values.
  #   { field: id }.__evolve_object_id__
  # @return [Hash] The converted hash.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#14
  def __evolve_object_id__; end

  # Mongoizes each value in the hash to an object id if it is convertable.
  #
  # @example Convert the hash values.
  #   { field: id }.__mongoize_object_id__
  # @return [Hash] The converted hash.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#26
  def __mongoize_object_id__; end

  # Fetch a nested value via dot syntax.
  #
  # @example Fetch a nested value via dot syntax.
  #   { "name" => { "en" => "test" }}.__nested__("name.en")
  # @param string [String] the dot syntax string.
  # @return [Object] The matching value.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#106
  def __nested__(string); end

  # Check if the hash is part of a blank relation criteria.
  #
  # @example Is the hash blank criteria?
  #   {}.blank_criteria?
  # @return [true, false] If the hash is blank criteria.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#67
  def blank_criteria?; end

  # Deletes an id value from the hash.
  #
  # @example Delete an id value.
  #   {}.delete_id
  # @return [Object] The deleted value, or nil.
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#79
  def delete_id; end

  # Get the id attribute from this hash, whether it's prefixed with an
  # underscore or is a symbol.
  #
  # @example Extract the id.
  #   { :_id => 1 }.extract_id
  # @return [Object] The value of the id.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#92
  def extract_id; end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   object.mongoize
  # @return [Hash] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#129
  def mongoize; end

  # Can the size of this object change?
  #
  # @example Is the hash resizable?
  #   {}.resizable?
  # @return [true] true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#141
  def resizable?; end

  # Convert this hash to a criteria. Will iterate over each keys in the
  # hash which must correspond to method on a criteria object. The hash
  # must also include a "klass" key.
  #
  # @example Convert the hash to a criteria.
  #   { klass: Band, where: { name: "Depeche Mode" }.to_criteria
  # @return [Criteria] The criteria.
  # @since 3.0.7
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#155
  def to_criteria; end

  private

  # Mongoize for the klass, key and value.
  #
  # @api private
  # @example Mongoize for the klass, field and value.
  #   {}.mongoize_for("$push", Band, "name", "test")
  # @param klass [Class] The model class.
  # @param value [Object] The value to mongoize.
  # @param key [String, Symbol] The field key.
  # @param operator [String] The operator.
  # @return [Object] The mongoized value.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#180
  def mongoize_for(operator, klass, key, value); end
end

# source://mongoid//lib/mongoid/extensions/hash.rb#193
module Mongoid::Extensions::Hash::ClassMethods
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Hash.mongoize([ 1, 2, 3 ])
  # @param object [Object] The object to mongoize.
  # @return [Hash] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#206
  def mongoize(object); end

  # Can the size of this object change?
  #
  # @example Is the hash resizable?
  #   {}.resizable?
  # @return [true] true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/hash.rb#219
  def resizable?; end
end

# source://mongoid//lib/mongoid/extensions/integer.rb#4
module Mongoid::Extensions::Integer
  # Returns the integer as a time.
  #
  # @example Convert the integer to a time.
  #   1335532685.__mongoize_time__
  # @return [Time] The converted time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/integer.rb#14
  def __mongoize_time__; end

  # Is the integer a number?
  #
  # @example Is the object a number?.
  #   object.numeric?
  # @return [true] Always true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/integer.rb#26
  def numeric?; end

  # Is the object not to be converted to bson on criteria creation?
  #
  # @example Is the object unconvertable?
  #   object.unconvertable_to_bson?
  # @return [true] If the object is unconvertable.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/extensions/integer.rb#38
  def unconvertable_to_bson?; end
end

# source://mongoid//lib/mongoid/extensions/integer.rb#42
module Mongoid::Extensions::Integer::ClassMethods
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   BigDecimal.mongoize("123.11")
  # @return [String] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/integer.rb#53
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   BigDecimal.mongoize("123.11")
  # @return [String] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/integer.rb#53
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/module.rb#4
module Mongoid::Extensions::Module
  # Redefine the method. Will undef the method if it exists or simply
  # just define it.
  #
  # @example Redefine the method.
  #   Object.re_define_method("exists?") do
  #   self
  #   end
  # @param name [String, Symbol] The name of the method.
  # @param block [Proc] The method body.
  # @return [Method] The new method.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/module.rb#20
  def re_define_method(name, &block); end
end

# source://mongoid//lib/mongoid/extensions/nil_class.rb#4
module Mongoid::Extensions::NilClass
  # Try to form a setter from this object.
  #
  # @example Try to form a setter.
  #   object.__setter__
  # @return [nil] Always nil.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/nil_class.rb#14
  def __setter__; end

  # Get the name of a nil collection.
  #
  # @example Get the nil name.
  #   nil.collectionize
  # @return [String] A blank string.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/nil_class.rb#26
  def collectionize; end
end

# source://mongoid//lib/mongoid/extensions/object.rb#4
module Mongoid::Extensions::Object
  # Evolve a plain object into an object id.
  #
  # @example Evolve the object.
  #   object.__evolve_object_id__
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#14
  def __evolve_object_id__; end

  # Convert the object to args for a find query.
  #
  # @example Convert the object to args.
  #   object.__find_args__
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#27
  def __find_args__; end

  # Evolve a plain object into an object id.
  #
  # @example Evolve the object.
  #   object.__evolve_object_id__
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#14
  def __mongoize_object_id__; end

  # Mongoize a plain object into a time.
  #
  # @example Mongoize the object.
  #   object.__mongoize_time__
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#39
  def __mongoize_time__; end

  # Try to form a setter from this object.
  #
  # @example Try to form a setter.
  #   object.__setter__
  # @return [String] The object as a string plus =.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#51
  def __setter__; end

  # Get the value of the object as a mongo friendy sort value.
  #
  # @example Get the object as sort criteria.
  #   object.__sortable__
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#63
  def __sortable__; end

  # Conversion of an object to an $inc-able value.
  #
  # @example Convert the object.
  #   1.__to_inc__
  # @return [Object] The object.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#75
  def __to_inc__; end

  # Check if the object is part of a blank relation criteria.
  #
  # @example Is the object blank criteria?
  #   "".blank_criteria?
  # @return [true, false] If the object is blank criteria.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#87
  def blank_criteria?; end

  # Do or do not, there is no try. -- Yoda.
  #
  # @example Do or do not.
  #   object.do_or_do_not(:use, "The Force")
  # @param name [String, Symbol] The method name.
  # @param args [Array] The arguments.
  # @return [Object, nil] The result of the method call or nil if the
  #   method does not exist.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#103
  def do_or_do_not(name, *args); end

  # Get the value for an instance variable or false if it doesn't exist.
  #
  # @example Get the value for an instance var.
  #   document.ivar("person")
  # @param name [String] The name of the variable.
  # @return [Object, false] The value or false.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#117
  def ivar(name); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   object.mongoize
  # @return [Object] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#135
  def mongoize; end

  # Is the object multi args.
  #
  # @example Is the object multi args?
  #   object.multi_arged?
  # @return [false] false.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#147
  def multi_arged?; end

  # Is the object a number?
  #
  # @example Is the object a number?.
  #   object.numeric?
  # @return [false] Always false.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#159
  def numeric?; end

  # Remove the instance variable for the provided name.
  #
  # @example Remove the instance variable
  #   document.remove_ivar("person")
  # @param name [String] The name of the variable.
  # @return [true, false] If the variable was defined.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#173
  def remove_ivar(name); end

  # Is the object's size changable? Only returns true for arrays and hashes
  # currently.
  #
  # @example Is the object resizable?
  #   object.resizable?
  # @return [false] false.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#190
  def resizable?; end

  # Get the substitutable version of an object.
  #
  # @example Get the substitutable.
  #   object.substitutable
  # @return [Object] self.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#202
  def substitutable; end

  # You must unlearn what you have learned. -- Yoda
  #
  # @example You must perform this execution.
  #   object.you_must(:use, "The Force")
  # @param name [String, Symbol] The method name.
  # @param args [Array] The arguments.
  # @return [Object, nil] The result of the method call or nil if the
  #   method does not exist. Nil if the object is frozen.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#218
  def you_must(name, *args); end
end

# source://mongoid//lib/mongoid/extensions/object.rb#222
module Mongoid::Extensions::Object::ClassMethods
  # Convert the provided object to a foreign key, given the metadata key
  # contstraint.
  #
  # @example Convert the object to a fk.
  #   Object.__mongoize_fk__(association, object)
  # @param association [Association] The association metadata.
  # @param object [Object] The object to convert.
  # @return [Object] The converted object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#236
  def __mongoize_fk__(association, object); end

  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Object.demongoize(object)
  # @param object [Object] The object to demongoize.
  # @return [Object] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#251
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Object.mongoize("123.11")
  # @param object [Object] The object to mongoize.
  # @return [Object] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object.rb#266
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/object_id.rb#4
module Mongoid::Extensions::ObjectId
  # Evolve the object id.
  #
  # @example Evolve the object id.
  #   object_id.__evolve_object_id__
  # @return [BSON::ObjectId] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object_id.rb#14
  def __evolve_object_id__; end

  # Evolve the object id.
  #
  # @example Evolve the object id.
  #   object_id.__evolve_object_id__
  # @return [BSON::ObjectId] self.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object_id.rb#14
  def __mongoize_object_id__; end
end

# source://mongoid//lib/mongoid/extensions/object_id.rb#19
module Mongoid::Extensions::ObjectId::ClassMethods
  # Evolve the object into a mongo-friendly value to query with.
  #
  # @example Evolve the object.
  #   ObjectId.evolve(id)
  # @param object [Object] The object to evolve.
  # @return [BSON::ObjectId] The object id.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object_id.rb#31
  def evolve(object); end

  # Convert the object into a mongo-friendly value to store.
  #
  # @example Convert the object.
  #   ObjectId.mongoize(id)
  # @param object [Object] The object to convert.
  # @return [BSON::ObjectId] The object id.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/object_id.rb#45
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/range.rb#4
module Mongoid::Extensions::Range
  # Get the range as arguments for a find.
  #
  # @example Get the range as find args.
  #   range.__find_args__
  # @return [Array] The range as an array.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/range.rb#14
  def __find_args__; end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   range.mongoize
  # @return [Hash] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/range.rb#27
  def mongoize; end

  # Is this a resizable object.
  #
  # @example Is this resizable?
  #   range.resizable?
  # @return [true] True.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/range.rb#39
  def resizable?; end
end

# source://mongoid//lib/mongoid/extensions/range.rb#43
module Mongoid::Extensions::Range::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Range.demongoize({ "min" => 1, "max" => 5 })
  # @param object [Hash] The object to demongoize.
  # @return [Range] The range.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/range.rb#55
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Range.mongoize(1..3)
  # @param object [Range] The object to mongoize.
  # @return [Hash] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/range.rb#70
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/regexp.rb#4
module Mongoid::Extensions::Regexp; end

# source://mongoid//lib/mongoid/extensions/regexp.rb#6
module Mongoid::Extensions::Regexp::ClassMethods
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Regexp.mongoize(/\A[abc]/)
  # @param object [Regexp, String] The object to mongoize.
  # @return [Regexp] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/regexp.rb#19
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/set.rb#4
module Mongoid::Extensions::Set
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   set.mongoize
  # @return [Array] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/set.rb#15
  def mongoize; end
end

# source://mongoid//lib/mongoid/extensions/set.rb#19
module Mongoid::Extensions::Set::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Set.demongoize([1, 2, 3])
  # @param object [Array] The object to demongoize.
  # @return [Set] The set.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/set.rb#31
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Set.mongoize(Set.new([1,2,3]))
  # @param object [Set] The object to mongoize.
  # @return [Array] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/set.rb#46
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/string.rb#4
module Mongoid::Extensions::String
  # Evolve the string into an object id if possible.
  #
  # @example Evolve the string.
  #   "test".__evolve_object_id__
  # @return [String, BSON::ObjectId] The evolved string.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#17
  def __evolve_object_id__; end

  # Mongoize the string into an object id if possible.
  #
  # @example Evolve the string.
  #   "test".__mongoize_object_id__
  # @return [String, BSON::ObjectId, nil] The mongoized string.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#29
  def __mongoize_object_id__; end

  # Mongoize the string for storage.
  #
  # @example Mongoize the string.
  #   "2012-01-01".__mongoize_time__
  # @note The extra parse from Time is because ActiveSupport::TimeZone
  #   either returns nil or Time.now if the string is empty or invalid,
  #   which is a regression from pre-3.0 and also does not agree with
  #   the core Time API.
  # @return [Time] The time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#46
  def __mongoize_time__; end

  # Does the string end with _before_type_cast?
  #
  # @example Is the string a setter method?
  #   "price_before_type_cast".before_type_cast?
  # @return [true, false] If the string ends with "_before_type_cast"
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#134
  def before_type_cast?; end

  # Convert the string to a collection friendly name.
  #
  # @example Collectionize the string.
  #   "namespace/model".collectionize
  # @return [String] The string in collection friendly form.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#59
  def collectionize; end

  # Is the string a valid value for a Mongoid id?
  #
  # @example Is the string an id value?
  #   "_id".mongoid_id?
  # @return [true, false] If the string is id or _id.
  # @since 2.3.1
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#71
  def mongoid_id?; end

  # Is the string a number? The literals "NaN", "Infinity", and "-Infinity"
  # are counted as numbers.
  #
  # @example Is the string a number.
  #   "1234.23".numeric?
  # @return [true, false] If the string is a number.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#84
  def numeric?; end

  # Get the string as a getter string.
  #
  # @example Get the reader/getter
  #   "model=".reader
  # @return [String] The string stripped of "=".
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#98
  def reader; end

  # Returns the value of attribute unconvertable_to_bson.
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#7
  def unconvertable_to_bson; end

  # Sets the attribute unconvertable_to_bson
  #
  # @param value the value to set the attribute unconvertable_to_bson to.
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#7
  def unconvertable_to_bson=(_arg0); end

  # Is the object not to be converted to bson on criteria creation?
  #
  # @example Is the object unconvertable?
  #   object.unconvertable_to_bson?
  # @return [true, false] If the object is unconvertable.
  # @since 2.2.1
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#146
  def unconvertable_to_bson?; end

  # Is this string a valid_method_name?
  #
  # @example Is the string a valid Ruby idenfier for use as a method name
  #   "model=".valid_method_name?
  # @return [true, false] If the string contains a valid Ruby identifier.
  # @since 3.0.15
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#122
  def valid_method_name?; end

  # Is this string a writer?
  #
  # @example Is the string a setter method?
  #   "model=".writer?
  # @return [true, false] If the string contains "=".
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#110
  def writer?; end

  private

  # If the string is a legal object id, convert it.
  #
  # @api private
  # @example Convert to the object id.
  #   string.convert_to_object_id
  # @return [String, BSON::ObjectId] The string or the id.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#162
  def convert_to_object_id; end
end

# source://mongoid//lib/mongoid/extensions/string.rb#166
module Mongoid::Extensions::String::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   String.demongoize(object)
  # @param object [Object] The object to demongoize.
  # @return [String] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#178
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   String.mongoize("123.11")
  # @param object [Object] The object to mongoize.
  # @return [String] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/string.rb#193
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/symbol.rb#4
module Mongoid::Extensions::Symbol
  # Is the symbol a valid value for a Mongoid id?
  #
  # @example Is the string an id value?
  #   :_id.mongoid_id?
  # @return [true, false] If the symbol is :id or :_id.
  # @since 2.3.1
  #
  # source://mongoid//lib/mongoid/extensions/symbol.rb#14
  def mongoid_id?; end
end

# source://mongoid//lib/mongoid/extensions/symbol.rb#18
module Mongoid::Extensions::Symbol::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Symbol.demongoize(object)
  # @param object [Object] The object to demongoize.
  # @return [Symbol] The object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/symbol.rb#30
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Symbol.mongoize("123.11")
  # @param object [Object] The object to mongoize.
  # @return [Symbol] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/symbol.rb#45
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/time.rb#4
module Mongoid::Extensions::Time
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   time.mongoize
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time.rb#21
  def mongoize; end
end

# source://mongoid//lib/mongoid/extensions/time.rb#25
module Mongoid::Extensions::Time::ClassMethods
  # Get the configured time to use when converting - either the time zone
  # or the time.
  #
  # @example Get the configured time.
  #   ::Time.configured
  # @return [Time] The configured time.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time.rb#36
  def configured; end

  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   Time.demongoize(object)
  # @param object [Time] The time from Mongo.
  # @return [Time] The object as a date.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time.rb#50
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   Time.mongoize("2012-1-1")
  # @param object [Object] The object to mongoize.
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time.rb#70
  def mongoize(object); end
end

# Constant for epoch - used when passing invalid times.
#
# @deprecated No longer used as a return value from #mongoize passed
#   an invalid time string.
#
# source://mongoid//lib/mongoid/extensions/time.rb#10
Mongoid::Extensions::Time::EPOCH = T.let(T.unsafe(nil), Time)

# source://mongoid//lib/mongoid/extensions/time_with_zone.rb#4
module Mongoid::Extensions::TimeWithZone
  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   date_time.mongoize
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time_with_zone.rb#15
  def mongoize; end
end

# source://mongoid//lib/mongoid/extensions/time_with_zone.rb#19
module Mongoid::Extensions::TimeWithZone::ClassMethods
  # Convert the object from its mongo friendly ruby type to this type.
  #
  # @example Demongoize the object.
  #   TimeWithZone.demongoize(object)
  # @param object [Time] The time from Mongo.
  # @return [TimeWithZone] The object as a date.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time_with_zone.rb#31
  def demongoize(object); end

  # Turn the object from the ruby type we deal with to a Mongo friendly
  # type.
  #
  # @example Mongoize the object.
  #   TimeWithZone.mongoize("2012-1-1")
  # @param object [Object] The object to convert.
  # @return [Time] The object mongoized.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/time_with_zone.rb#47
  def mongoize(object); end
end

# source://mongoid//lib/mongoid/extensions/true_class.rb#4
module Mongoid::Extensions::TrueClass
  # Get the value of the object as a mongo friendy sort value.
  #
  # @example Get the object as sort criteria.
  #   object.__sortable__
  # @return [Integer] 1.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/extensions/true_class.rb#14
  def __sortable__; end

  # Is the passed value a boolean?
  #
  # @example Is the value a boolean type?
  #   true.is_a?(Boolean)
  # @param other [Class] The class to check.
  # @return [true, false] If the other is a boolean.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/extensions/true_class.rb#28
  def is_a?(other); end
end

# Instantiates documents that came from the database.
#
# source://mongoid//lib/mongoid/factory.rb#5
module Mongoid::Factory
  extend ::Mongoid::Factory

  # Builds a new +Document+ from the supplied attributes.
  #
  # @example Build the document.
  #   Mongoid::Factory.build(Person, { "name" => "Durran" })
  # @param klass [Class] The class to instantiate from if _type is not present.
  # @param attributes [Hash] The document attributes.
  # @return [Document] The instantiated document.
  #
  # source://mongoid//lib/mongoid/factory.rb#19
  def build(klass, attributes = T.unsafe(nil)); end

  # Builds a new +Document+ from the supplied attributes loaded from the
  # database.
  #
  # @example Build the document.
  #   Mongoid::Factory.from_db(Person, { "name" => "Durran" })
  # @param klass [Class] The class to instantiate from if _type is not present.
  # @param attributes [Hash] The document attributes.
  # @param selected_fields [Array] If instantiated from a criteria using
  #   #only we give the document a list of the selected fields.
  # @return [Document] The instantiated document.
  #
  # source://mongoid//lib/mongoid/factory.rb#41
  def from_db(klass, attributes = T.unsafe(nil), criteria = T.unsafe(nil)); end
end

# source://mongoid//lib/mongoid/factory.rb#8
Mongoid::Factory::TYPE = T.let(T.unsafe(nil), String)

# This module defines behaviour for fields.
#
# source://mongoid//lib/mongoid/fields/standard.rb#3
module Mongoid::Fields
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Fields::ClassMethods

  # Applies a single default value for the given name.
  #
  # @example Apply a single default.
  #   model.apply_default("name")
  # @param name [String] The name of the field.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#100
  def apply_default(name); end

  # Apply all the defaults at once.
  #
  # @example Apply all the defaults.
  #   model.apply_defaults
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#118
  def apply_defaults; end

  # Apply all default values to the document which are procs.
  #
  # @example Apply all the proc defaults.
  #   model.apply_post_processed_defaults
  # @return [Array<String ] The names of the proc defaults.] Array<String ] The names of the proc defaults.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#86
  def apply_post_processed_defaults; end

  # Apply all default values to the document which are not procs.
  #
  # @example Apply all the non-proc defaults.
  #   model.apply_pre_processed_defaults
  # @return [Array<String ] The names of the non-proc defaults.] Array<String ] The names of the non-proc defaults.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#72
  def apply_pre_processed_defaults; end

  # Returns an array of names for the attributes available on this object.
  #
  # Provides the field names in an ORM-agnostic way. Rails v3.1+ uses this
  # method to automatically wrap params in JSON requests.
  #
  # @example Get the field names
  #   docment.attribute_names
  # @return [Array<String>] The field names
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields.rb#134
  def attribute_names; end

  # Get the name of the provided field as it is stored in the database.
  # Used in determining if the field is aliased or not.
  #
  # @example Get the database field name.
  #   model.database_field_name(:authorization)
  # @param name [String, Symbol] The name to get.
  # @return [String] The name of the field as it's stored in the db.
  # @since 3.0.7
  #
  # source://mongoid//lib/mongoid/fields.rb#149
  def database_field_name(name); end

  # Is the provided field a lazy evaluation?
  #
  # @example If the field is lazy settable.
  #   doc.lazy_settable?(field, nil)
  # @param field [Field] The field.
  # @param value [Object] The current value.
  # @return [true, false] If we set the field lazily.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/fields.rb#164
  def lazy_settable?(field, value); end

  # Is the document using object ids?
  #
  # @example Is the document using object ids?
  #   model.using_object_ids?
  # @note Refactored from using delegate for class load performance.
  # @return [true, false] Using object ids.
  #
  # source://mongoid//lib/mongoid/fields.rb#176
  def using_object_ids?; end

  class << self
    # Stores the provided block to be run when the option name specified is
    # defined on a field.
    #
    # No assumptions are made about what sort of work the handler might
    # perform, so it will always be called if the `option_name` key is
    # provided in the field definition -- even if it is false or nil.
    #
    # @example
    #   Mongoid::Fields.option :required do |model, field, value|
    #   model.validates_presence_of field if value
    #   end
    # @param option_name [Symbol] the option name to match against
    # @param block [Proc] the handler to execute when the option is
    #   provided.
    # @since 2.1.0
    #
    # source://mongoid//lib/mongoid/fields.rb#199
    def option(option_name, &block); end

    # Return a map of custom option names to their handlers.
    #
    # @example
    #   Mongoid::Fields.options
    #   # => { :required => #<Proc:0x00000100976b38> }
    # @return [Hash] the option map
    # @since 2.1.0
    #
    # source://mongoid//lib/mongoid/fields.rb#212
    def options; end
  end

  module GeneratedClassMethods
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
  end

  module GeneratedInstanceMethods
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
  end
end

# source://mongoid//lib/mongoid/fields.rb#217
module Mongoid::Fields::ClassMethods
  # Returns an array of names for the attributes available on this object.
  #
  # Provides the field names in an ORM-agnostic way. Rails v3.1+ uses this
  # method to automatically wrap params in JSON requests.
  #
  # @example Get the field names
  #   Model.attribute_names
  # @return [Array<String>] The field names
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields.rb#230
  def attribute_names; end

  # Get the name of the provided field as it is stored in the database.
  # Used in determining if the field is aliased or not.
  #
  # @example Get the database field name.
  #   Model.database_field_name(:authorization)
  # @param name [String, Symbol] The name to get.
  # @return [String] The name of the field as it's stored in the db.
  # @since 3.0.7
  #
  # source://mongoid//lib/mongoid/fields.rb#245
  def database_field_name(name); end

  # Defines all the fields that are accessible on the Document
  # For each field that is defined, a getter and setter will be
  # added as an instance method to the Document.
  #
  # @example Define a field.
  #   field :score, :type => Integer, :default => 0
  # @option options
  # @option options
  # @option options
  # @param name [Symbol] The name of the field.
  # @param options [Hash] The options to pass to the field.
  # @return [Field] The generated field
  #
  # source://mongoid//lib/mongoid/fields.rb#266
  def field(name, options = T.unsafe(nil)); end

  # Replace a field with a new type.
  #
  # @example Replace the field.
  #   Model.replace_field("_id", String)
  # @param name [String] The name of the field.
  # @param type [Class] The new type of field.
  # @return [Serializable] The new field.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/fields.rb#287
  def replace_field(name, type); end

  # Convenience method for determining if we are using +BSON::ObjectIds+ as
  # our id.
  #
  # @example Does this class use object ids?
  #   person.using_object_ids?
  # @return [true, false] If the class uses BSON::ObjectIds for the id.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/fields.rb#301
  def using_object_ids?; end

  protected

  # Add the defaults to the model. This breaks them up between ones that
  # are procs and ones that are not.
  #
  # @example Add to the defaults.
  #   Model.add_defaults(field)
  # @param field [Field] The field to add for.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#316
  def add_defaults(field); end

  # Define a field attribute for the +Document+.
  #
  # @example Set the field.
  #   Person.add_field(:name, :default => "Test")
  # @param name [Symbol] The name of the field.
  # @param options [Hash] The hash of options.
  #
  # source://mongoid//lib/mongoid/fields.rb#335
  def add_field(name, options = T.unsafe(nil)); end

  # Create the field accessors.
  #
  # @example Generate the accessors.
  #   Person.create_accessors(:name, "name")
  #   person.name #=> returns the field
  #   person.name = "" #=> sets the field
  #   person.name? #=> Is the field present?
  #   person.name_before_type_cast #=> returns the field before type cast
  # @param name [Symbol] The name of the field.
  # @param meth [Symbol] The name of the accessor.
  # @param options [Hash] The options.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/fields.rb#386
  def create_accessors(name, meth, options = T.unsafe(nil)); end

  # Create the check method for the provided field.
  #
  # @example Create the check.
  #   Model.create_field_check("name", "name")
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#480
  def create_field_check(name, meth); end

  # Create the getter method for the provided field.
  #
  # @example Create the getter.
  #   Model.create_field_getter("name", "name", field)
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @param field [Field] The field.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#411
  def create_field_getter(name, meth, field); end

  # Create the getter_before_type_cast method for the provided field. If
  # the attribute has been assigned, return the attribute before it was
  # type cast. Otherwise, delegate to the getter.
  #
  # @example Create the getter_before_type_cast.
  #   Model.create_field_getter_before_type_cast("name", "name")
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/fields.rb#437
  def create_field_getter_before_type_cast(name, meth); end

  # Create the setter method for the provided field.
  #
  # @example Create the setter.
  #   Model.create_field_setter("name", "name")
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @param field [Field] The field.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#459
  def create_field_setter(name, meth, field); end

  # Create the translation getter method for the provided field.
  #
  # @example Create the translation getter.
  #   Model.create_translations_getter("name", "name")
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#498
  def create_translations_getter(name, meth); end

  # Create the translation setter method for the provided field.
  #
  # @example Create the translation setter.
  #   Model.create_translations_setter("name", "name")
  # @param name [String] The name of the attribute.
  # @param meth [String] The name of the method.
  # @param field [Field] The field.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#518
  def create_translations_setter(name, meth, field); end

  # source://mongoid//lib/mongoid/fields.rb#562
  def field_for(name, options); end

  # Include the field methods as a module, so they can be overridden.
  #
  # @example Include the fields.
  #   Person.generated_methods
  # @return [Module] The module of generated methods.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/fields.rb#541
  def generated_methods; end

  # Run through all custom options stored in Mongoid::Fields.options and
  # execute the handler if the option is provided.
  #
  # @example
  #   Mongoid::Fields.option :custom do
  #   puts "called"
  #   end
  #
  #   field = Mongoid::Fields.new(:test, :custom => true)
  #   Person.process_options(field)
  #   # => "called"
  # @param field [Field] the field to process
  #
  # source://mongoid//lib/mongoid/fields.rb#362
  def process_options(field); end

  # Remove the default keys for the provided name.
  #
  # @example Remove the default keys.
  #   Model.remove_defaults(name)
  # @param name [String] The field name.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields.rb#557
  def remove_defaults(name); end

  # source://mongoid//lib/mongoid/fields.rb#571
  def unmapped_type(options); end
end

# source://mongoid//lib/mongoid/fields/foreign_key.rb#4
class Mongoid::Fields::ForeignKey < ::Mongoid::Fields::Standard
  # Adds the atomic changes for this type of resizable field.
  #
  # @todo: Durran: Refactor, big time.
  #
  # @example Add the atomic changes.
  #   field.add_atomic_changes(doc, "key", {}, [], [])
  # @param document [Document] The document to add to.
  # @param name [String] The name of the field.
  # @param key [String] The atomic location of the field.
  # @param new_elements [Array] The new elements to add.
  # @param old_elements [Array] The old elements getting removed.
  # @param mods [Hash] The current modifications.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#21
  def add_atomic_changes(document, name, key, mods, new_elements, old_elements); end

  # Evolve the object into an id compatible object.
  #
  # @example Evolve the object.
  #   field.evolve(object)
  # @param object [Object] The object to evolve.
  # @return [Object] The evolved object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#64
  def evolve(object); end

  # Is this field a foreign key?
  #
  # @example Is the field a foreign key?
  #   field.foreign_key?
  # @return [true, false] If the field is a foreign key.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#50
  def foreign_key?; end

  # Does this field do lazy default evaluation?
  #
  # @example Is the field lazy?
  #   field.lazy?
  # @return [true, false] If the field is lazy.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#84
  def lazy?; end

  # Mongoize the object into the Mongo friendly value.
  #
  # @example Mongoize the object.
  #   field.mongoize(object)
  # @param object [Object] The object to Mongoize.
  # @return [Object] The mongoized object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#98
  def mongoize(object); end

  # Is the field a BSON::ObjectId?
  #
  # @example Is the field a BSON::ObjectId?
  #   field.object_id_field?
  # @return [true, false] If the field is a BSON::ObjectId.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#114
  def object_id_field?; end

  # Returns true if an array, false if not.
  #
  # @example Is the field resizable?
  #   field.resizable?
  # @return [true, false] If the field is resizable.
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#127
  def resizable?; end

  private

  # Evaluate the default proc. In some cases we need to instance exec,
  # in others we don't.
  #
  # @example Eval the default proc.
  #   field.evaluate_default_proc(band)
  # @param doc [Document] The document.
  # @return [Object] The called proc.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#144
  def evaluate_default_proc(doc); end

  # Get the id field of the relation.
  #
  # @api private
  # @example Get the related id field.
  #   field.related_id_field
  # @return [Fields::Standard] The field.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#158
  def related_id_field; end

  # This is used when default values need to be serialized. Most of the
  # time just return the object.
  #
  # @api private
  # @example Serialize the default value.
  #   field.serialize_default(obj)
  # @param object [Object] The default.
  # @return [Object] The serialized default.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/foreign_key.rb#175
  def serialize_default(object); end
end

# Constant for all names of the id field in a document.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/fields.rb#38
Mongoid::Fields::IDS = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/fields/localized.rb#4
class Mongoid::Fields::Localized < ::Mongoid::Fields::Standard
  # Demongoize the object based on the current locale. Will look in the
  # hash for the current locale.
  #
  # @example Get the demongoized value.
  #   field.demongoize({ "en" => "testing" })
  # @param object [Hash] The hash of translations.
  # @return [Object] The value for the current locale.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/fields/localized.rb#17
  def demongoize(object); end

  # Is the field localized or not?
  #
  # @example Is the field localized?
  #   field.localized?
  # @return [true, false] If the field is localized.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/fields/localized.rb#31
  def localized?; end

  # Convert the provided string into a hash for the locale.
  #
  # @example Serialize the value.
  #   field.mongoize("testing")
  # @param object [String] The string to convert.
  # @return [Hash] The locale with string translation.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/fields/localized.rb#45
  def mongoize(object); end

  private

  # Are fallbacks being used for this localized field.
  #
  # @api private
  # @example Should fallbacks be used.
  #   field.fallbacks?
  # @return [true, false] If fallbacks should be used.
  # @since 5.1.0
  #
  # source://mongoid//lib/mongoid/fields/localized.rb#61
  def fallbacks?; end

  # Lookup the value from the provided object.
  #
  # @api private
  # @example Lookup the value.
  #   field.lookup({ "en" => "test" })
  # @param object [Hash] The localized object.
  # @return [Object] The object for the locale.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/localized.rb#78
  def lookup(object); end
end

# source://mongoid//lib/mongoid/fields/standard.rb#4
class Mongoid::Fields::Standard
  # Create the new field with a name and optional additional options.
  #
  # @example Create the new field.
  #   Field.new(:name, :type => String)
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The field options.
  # @return [Standard] a new instance of Standard
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#72
  def initialize(name, options = T.unsafe(nil)); end

  # Adds the atomic changes for this type of resizable field.
  #
  # field.add_atomic_changes(doc, "key", {}, [], [])
  #
  # @example Add the atomic changes.
  # @param document [Document] The document to add to.
  # @param name [String] The name of the field.
  # @param key [String] The atomic location of the field.
  # @param new [Array] The new elements to add.
  # @param old [Array] The old elements getting removed.
  # @param mods [Hash] The current modifications.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#25
  def add_atomic_changes(document, name, key, mods, new, old); end

  # Get the metadata for the field if its a foreign key.
  #
  # @example Get the metadata.
  #   field.metadata
  # @return [Metadata] The relation metadata.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#118
  def association; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def default_val; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def default_val=(_arg0); end

  # source://mongoid//lib/mongoid/fields/standard.rb#10
  def demongoize(*_arg0, **_arg1, &_arg2); end

  # Evaluate the default value and return it. Will handle the
  # serialization, proc calls, and duplication if necessary.
  #
  # @example Evaluate the default value.
  #   field.eval_default(document)
  # @param doc [Document] The document the field belongs to.
  # @return [Object] The serialized default value.
  # @since 2.1.8
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#40
  def eval_default(doc); end

  # source://mongoid//lib/mongoid/fields/standard.rb#10
  def evolve(*_arg0, **_arg1, &_arg2); end

  # Is this field a foreign key?
  #
  # @example Is the field a foreign key?
  #   field.foreign_key?
  # @return [true, false] If the field is a foreign key.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#56
  def foreign_key?; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def label; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def label=(_arg0); end

  # Does this field do lazy default evaluation?
  #
  # @example Is the field lazy?
  #   field.lazy?
  # @return [true, false] If the field is lazy.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#94
  def lazy?; end

  # Is the field localized or not?
  #
  # @example Is the field localized?
  #   field.localized?
  # @return [true, false] If the field is localized.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#106
  def localized?; end

  # source://mongoid//lib/mongoid/fields/standard.rb#10
  def mongoize(*_arg0, **_arg1, &_arg2); end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def name; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def name=(_arg0); end

  # Is the field a BSON::ObjectId?
  #
  # @example Is the field a BSON::ObjectId?
  #   field.object_id_field?
  # @return [true, false] If the field is a BSON::ObjectId.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#130
  def object_id_field?; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def options; end

  # Defines the behaviour for defined fields in the document.
  # Set readers for the instance variables.
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#8
  def options=(_arg0); end

  # Does the field pre-process its default value?
  #
  # @example Does the field pre-process the default?
  #   field.pre_processed?
  # @return [true, false] If the field's default is pre-processed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#142
  def pre_processed?; end

  # Get the type of this field - inferred from the class name.
  #
  # @example Get the type.
  #   field.type
  # @return [Class] The name of the class.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#155
  def type; end

  private

  # Get the name of the default method for this field.
  #
  # @api private
  # @example Get the default name.
  #   field.default_name
  # @return [String] The method name.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#171
  def default_name; end

  # Define the method for getting the default on the document.
  #
  # @api private
  # @example Define the method.
  #   field.define_default_method(doc)
  # @note Ruby's instance_exec was just too slow.
  # @param object [Class, Module] The class or module the field is
  #   defined on.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#188
  def define_default_method(object); end

  # Evaluate the default proc. In some cases we need to instance exec,
  # in others we don't.
  #
  # @example Eval the default proc.
  #   field.evaluate_default_proc(band)
  # @param doc [Document] The document.
  # @return [Object] The called proc.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#239
  def evaluate_default_proc(doc); end

  # Get the evaluated default.
  #
  # @example Get the evaluated default.
  #   field.evaluated_default.
  # @param doc [Document] The doc being applied to.
  # @return [Object] The default value.
  # @since 2.4.4
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#220
  def evaluated_default(doc); end

  # Is the field included in the fields that were returned from the
  # database? We can apply the default if:
  #   1. The field is included in an only limitation (field: 1)
  #   2. The field is not excluded in a without limitation (field: 0)
  #
  # @example Is the field included?
  #   field.included?(fields)
  # @param fields [Hash] The field limitations.
  # @return [true, false] If the field was included.
  # @since 2.4.4
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#205
  def included?(fields); end

  # This is used when default values need to be serialized. Most of the
  # time just return the object.
  #
  # @api private
  # @example Serialize the default value.
  #   field.serialize_default(obj)
  # @param object [Object] The default.
  # @return [Object] The serialized default.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/standard.rb#256
  def serialize_default(object); end
end

# For fields defined with symbols use the correct class.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/fields.rb#16
Mongoid::Fields::TYPE_MAPPINGS = T.let(T.unsafe(nil), ActiveSupport::HashWithIndifferentAccess)

# source://mongoid//lib/mongoid/fields/validators/macro.rb#4
module Mongoid::Fields::Validators; end

# Validates the params passed to the field macro.
#
# source://mongoid//lib/mongoid/fields/validators/macro.rb#7
module Mongoid::Fields::Validators::Macro
  extend ::Mongoid::Fields::Validators::Macro

  # Validate the field definition.
  #
  # @example Validate the field definition.
  #   Macro.validate(Model, :name, { localized: true })
  # @param klass [Class] The model class.
  # @param name [Symbol] The field name.
  # @param options [Hash] The provided options.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/validators/macro.rb#34
  def validate(klass, name, options); end

  # Validate the relation definition.
  #
  # @example Validate the relation definition.
  #   Macro.validate(Model, :name)
  # @param klass [Class] The model class.
  # @param name [Symbol] The field name.
  # @param options [Hash] The provided options.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/fields/validators/macro.rb#49
  def validate_relation(klass, name, options = T.unsafe(nil)); end

  private

  # Determine if the field name is allowed, if not raise an error.
  #
  # @api private
  # @example Check the field name.
  #   Macro.validate_name(Model, :name)
  # @param klass [Class] The model class.
  # @param name [Symbol] The field name.
  # @raise [Errors::InvalidField] If the name is not allowed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/validators/macro.rb#72
  def validate_name(klass, name, options); end

  # Validate that the field options are allowed.
  #
  # @api private
  # @example Validate the field options.
  #   Macro.validate_options(Model, :name, { localized: true })
  # @param klass [Class] The model class.
  # @param name [Symbol] The field name.
  # @param options [Hash] The provided options.
  # @raise [Errors::InvalidFieldOption] If an option is invalid.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/fields/validators/macro.rb#102
  def validate_options(klass, name, options); end
end

# source://mongoid//lib/mongoid/fields/validators/macro.rb#10
Mongoid::Fields::Validators::Macro::OPTIONS = T.let(T.unsafe(nil), Array)

# This module defines the finder methods that hang off the document at the
# class level.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/findable.rb#8
module Mongoid::Findable
  extend ::Mongoid::Criteria::Queryable::Forwardable

  # source://mongoid//lib/mongoid/findable.rb#15
  def aggregates(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def all(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def all_in(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def all_of(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def and(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def any_in(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def any_of(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def asc(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def ascending(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def avg(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def batch_size(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def between(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def collation(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def comment(*args, &block); end

  # Returns a count of records in the database.
  # If you want to specify conditions use where.
  #
  # @example Get the count of matching documents.
  #   Person.count
  #   Person.where(title: "Sir").count
  # @return [Integer] The number of matching documents.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#54
  def count; end

  # source://mongoid//lib/mongoid/findable.rb#15
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def cursor_type(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def desc(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def descending(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def each(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def each_with_index(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def elem_match(*args, &block); end

  # Returns true if count is zero
  #
  # @example Are there no saved documents for this model?
  #   Person.empty?
  # @return [true, false] If the collection is empty.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#64
  def empty?; end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def excludes(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def exists(*args, &block); end

  # Returns true if there are on document in database based on the
  # provided arguments.
  #
  # @example Do any documents exist for the conditions?
  #   Person.exists?
  # @return [true, false] If any documents exist for the conditions.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#75
  def exists?; end

  # source://mongoid//lib/mongoid/findable.rb#15
  def extras(*_arg0, **_arg1, &_arg2); end

  # Find a +Document+ in several different ways.
  #
  # If a +String+ is provided, it will be assumed that it is a
  # representation of a Mongo::ObjectID and will attempt to find a single
  # +Document+ based on that id. If a +Symbol+ and +Hash+ is provided then
  # it will attempt to find either a single +Document+ or multiples based
  # on the conditions provided and the first parameter.
  #
  # @example Find a single document by an id.
  #   Person.find(BSON::ObjectId)
  # @param args [Array] An assortment of finder options.
  # @return [Document, nil, Criteria] A document or matching documents.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#93
  def find(*args); end

  # Find the first +Document+ given the conditions.
  # If a matching Document is not found and
  # Mongoid.raise_not_found_error is true it raises
  # Mongoid::Errors::DocumentNotFound, return null nil elsewise.
  #
  # and Mongoid.raise_not_found_error is true.
  #
  # @example Find the document by attribute other than id
  #   Person.find_by(:username => "superuser")
  # @param attrs [Hash] The attributes to check.
  # @raise [Errors::DocumentNotFound] If no document found
  # @return [Document, nil] A matching document.
  # @since 3.0.0
  # @yield [result]
  #
  # source://mongoid//lib/mongoid/findable.rb#113
  def find_by(attrs = T.unsafe(nil)); end

  # Find the first +Document+ given the conditions, or raises
  # Mongoid::Errors::DocumentNotFound
  #
  # @example Find the document by attribute other than id
  #   Person.find_by(:username => "superuser")
  # @param attrs [Hash] The attributes to check.
  # @raise [Errors::DocumentNotFound] If no document found.
  # @return [Document] A matching document.
  # @since 4.0.0
  # @yield [result]
  #
  # source://mongoid//lib/mongoid/findable.rb#134
  def find_by!(attrs = T.unsafe(nil)); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_one_and_delete(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_one_and_replace(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_one_and_update(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_or_create_by(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_or_create_by!(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def find_or_initialize_by(*_arg0, **_arg1, &_arg2); end

  # Find the first +Document+ given the conditions.
  #
  # @example Find the first document.
  #   Person.first
  # @return [Document] The first matching document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#147
  def first; end

  # source://mongoid//lib/mongoid/findable.rb#15
  def first_or_create(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def first_or_create!(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def first_or_initialize(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def for_js(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def geo_near(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def geo_spacial(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def gt(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def gte(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def hint(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def in(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def includes(*_arg0, **_arg1, &_arg2); end

  # Find the last +Document+ given the conditions.
  #
  # @example Find the last document.
  #   Person.last
  # @return [Document] The last matching document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#158
  def last; end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def limit(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def lt(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def lte(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def map_reduce(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def max(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def max_distance(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def max_scan(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def max_time_ms(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def min(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def mod(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def ne(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def near(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def near_sphere(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def nin(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def no_timeout(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def none(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def nor(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def not(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def not_in(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def offset(*args, &block); end

  # Find the first +Document+ given the conditions.
  #
  # @example Find the first document.
  #   Person.first
  # @return [Document] The first matching document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/findable.rb#147
  def one; end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def only(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def or(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def order(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def order_by(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def read(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def reorder(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def skip(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def slice(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def snapshot(*args, &block); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def sum(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def text_search(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def update(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/findable.rb#15
  def update_all(*_arg0, **_arg1, &_arg2); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def where(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def with_size(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def with_type(*args, &block); end

  # source://mongoid//lib/mongoid/criteria/queryable/forwardable.rb#50
  def without(*args, &block); end
end

# Encapsulates behaviour around defining indexes.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/indexable/specification.rb#3
module Mongoid::Indexable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Indexable::ClassMethods
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/indexable.rb#19
module Mongoid::Indexable::ClassMethods
  # Add the default indexes to the root document if they do not already
  # exist. Currently this is only _type.
  #
  # @example Add Mongoid internal indexes.
  #   Person.add_indexes
  # @return [true] If the operation succeeded.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#82
  def add_indexes; end

  # Send the actual index creation comments to the MongoDB driver
  #
  # @example Create the indexes for the class.
  #   Person.create_indexes
  # @return [true] If the operation succeeded.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#29
  def create_indexes; end

  # Adds an index definition for the provided single or compound keys.
  #
  # @example Create a basic index.
  #   class Person
  #   include Mongoid::Document
  #   field :name, type: String
  #   index({ name: 1 }, { background: true })
  #   end
  # @param spec [Symbol] The index spec.
  # @param options [Hash] The index options.
  # @return [Hash] The index options.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#104
  def index(spec, options = T.unsafe(nil)); end

  # Get an index specification for the provided key.
  #
  # @example Get the index specification.
  #   Model.index_specification(name: 1)
  # @param index_hash [Hash] The index key/direction pair.
  # @param index_name [String] The index name.
  # @return [Specification] The found specification.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#122
  def index_specification(index_hash, index_name = T.unsafe(nil)); end

  # Send the actual index removal comments to the MongoDB driver,
  # but lets _id untouched.
  #
  # @example Remove the indexes for the class.
  #   Person.remove_indexes
  # @return [true] If the operation succeeded.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#55
  def remove_indexes; end

  private

  # Gets a list of index specification keys.
  #
  # @api private
  # @example Get the specification key list.
  #   Model.index_keys
  # @return [Array<Hash>] The specification keys.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#158
  def index_keys; end

  # Get the names of all databases for this model that have index
  # definitions.
  #
  # @api private
  # @example Get the indexed database names.
  #   Model.indexed_database_names
  # @return [Array<String>] The names.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/indexable.rb#142
  def indexed_database_names; end
end

# Encapsulates behaviour around an index specification.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/indexable/specification.rb#8
class Mongoid::Indexable::Specification
  # Instantiate a new index specification.
  #
  # @example Create the new specification.
  #   Specification.new(Band, { name: 1 }, background: true)
  # @param klass [Class] The class the index is defined on.
  # @param key [Hash] The hash of name/direction pairs.
  # @param opts [Hash] the index options.
  # @return [Specification] a new instance of Specification
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#50
  def initialize(klass, key, opts = T.unsafe(nil)); end

  # Is this index specification equal to another?
  #
  # @example Check equality of the specifications.
  #   specification == other
  # @param other [Specification] The spec to compare against.
  # @return [true, false] If the specs are equal.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#36
  def ==(other); end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#24
  def fields; end

  # @return [Hash] The index key.
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#24
  def key; end

  # @return [Class] The class the index is defined on.
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#24
  def klass; end

  # Get the index name, generated using the index key.
  #
  # @example Get the index name.
  #   specification.name
  # @return [String] name The index name.
  # @since 5.0.2
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#67
  def name; end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#24
  def options; end

  private

  # Normalize the spec, in case aliased fields are provided.
  #
  # @api private
  # @example Normalize the spec.
  #   specification.normalize_key(name: 1)
  # @param key [Hash] The index key(s).
  # @return [Hash] The normalized specification.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#87
  def normalize_key(key); end

  # Normalize the index options, if any are provided.
  #
  # @api private
  # @example Normalize the index options.
  #   specification.normalize_options(drop_dups: true)
  # @param opts [Hash] The index options.
  # @return [Hash] The normalized options.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/indexable/specification.rb#107
  def normalize_options(opts); end
end

# The mappings of nice Ruby-style names to the corresponding driver
# option name.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/indexable/specification.rb#14
Mongoid::Indexable::Specification::MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://mongoid//lib/mongoid/indexable/validators/options.rb#4
module Mongoid::Indexable::Validators; end

# Validates the options passed to the index macro.
#
# source://mongoid//lib/mongoid/indexable/validators/options.rb#7
module Mongoid::Indexable::Validators::Options
  extend ::Mongoid::Indexable::Validators::Options

  # Validate the index specification.
  #
  # @example Validate the index spec.
  #   Options.validate(Band, name: 1)
  # @param klass [Class] The model class.
  # @param spec [Hash] The index specification.
  # @param options [Hash] The index options.
  # @raise [Errors::InvalidIndex] If validation failed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/indexable/validators/options.rb#56
  def validate(klass, spec, options); end

  private

  # Validates the options of the index spec.
  #
  # @api private
  # @example Validate the options.
  #   Options.validate_options(Band, name: 1)
  # @param klass [Class] The model class.
  # @param spec [Hash] The index specification.
  # @param options [Hash] The index options.
  # @raise [Errors::InvalidIndex] If validation failed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/indexable/validators/options.rb#77
  def validate_options(klass, spec, options); end

  # Validates the index spec.
  #
  # @api private
  # @example Validate the spec.
  #   Options.validate_spec(Band, name: 1)
  # @param klass [Class] The model class.
  # @param spec [Hash] The index specification.
  # @param options [Hash] The index options.
  # @raise [Errors::InvalidIndex] If validation failed.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/indexable/validators/options.rb#99
  def validate_spec(klass, spec, options); end
end

# source://mongoid//lib/mongoid/indexable/validators/options.rb#10
Mongoid::Indexable::Validators::Options::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# source://mongoid//lib/mongoid/indexable/validators/options.rb#34
Mongoid::Indexable::Validators::Options::VALID_TYPES = T.let(T.unsafe(nil), Array)

# Contains the bahviour around inspecting documents via inspect.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/inspectable.rb#7
module Mongoid::Inspectable
  # Returns the class name plus its attributes. If using dynamic fields will
  # include those as well.
  #
  # @example Inspect the document.
  #   person.inspect
  # @return [String] A nice pretty string to look at.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/inspectable.rb#18
  def inspect; end

  private

  # Get an array of inspected dynamic fields for the document.
  #
  # @api private
  # @example Inspect the dynamic fields.
  #   document.inspect_dynamic_fields
  # @return [String] An array of pretty printed dynamic field values.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/inspectable.rb#55
  def inspect_dynamic_fields; end

  # Get an array of inspected fields for the document.
  #
  # @api private
  # @example Inspect the defined fields.
  #   document.inspect_fields
  # @return [String] An array of pretty printed field values.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/inspectable.rb#36
  def inspect_fields; end
end

# This module contains all the callback hooks for Mongoid.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/interceptable.rb#7
module Mongoid::Interceptable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods

  # Is the provided type of callback executable by this document?
  #
  # @example Is the callback executable?
  #   document.callback_executable?(:save)
  # @param kind [Symbol] The type of callback.
  # @return [true, false] If the callback can be executed.
  # @since 3.0.6
  #
  # source://mongoid//lib/mongoid/interceptable.rb#54
  def callback_executable?(kind); end

  # Is the document currently in a state that could potentially require
  # callbacks to be executed?
  #
  # @example Is the document in a callback state?
  #   document.in_callback_state?(:update)
  # @param kind [Symbol] The callback kind.
  # @return [true, false] If the document is in a callback state.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#69
  def in_callback_state?(kind); end

  # Run only the after callbacks for the specific event.
  #
  # @example Run only the after save callbacks.
  #   model.run_after_callbacks(:save)
  # @note ActiveSupport does not allow this type of behaviour by default, so
  #   Mongoid has to get around it and implement itself.
  # @param kinds [Array<Symbol>] The events that are occurring.
  # @return [Object] The result of the chain executing.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#86
  def run_after_callbacks(*kinds); end

  # Run only the before callbacks for the specific event.
  #
  # @example Run only the before save callbacks.
  #   model.run_before_callbacks(:save, :create)
  # @note ActiveSupport does not allow this type of behaviour by default, so
  #   Mongoid has to get around it and implement itself.
  # @param kinds [Array<Symbol>] The events that are occurring.
  # @return [Object] The result of the chain executing.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#105
  def run_before_callbacks(*kinds); end

  # Run the callbacks for the document. This overrides active support's
  # functionality to cascade callbacks to embedded documents that have been
  # flagged as such.
  #
  # @example Run the callbacks.
  #   run_callbacks :save do
  #   save!
  #   end
  # @param kind [Symbol] The type of callback to execute.
  # @param args [Array] Any options.
  # @return [Document] The document
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#126
  def run_callbacks(kind, *args, &block); end

  private

  # We need to hook into this for autosave, since we don't want it firing if
  # the before callbacks were halted.
  #
  # @api private
  # @example Was a before callback halted?
  #   document.before_callback_halted?
  # @return [true, false] If a before callback was halted.
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/interceptable.rb#148
  def before_callback_halted?; end

  # Determine if the child should fire the callback.
  #
  # @example Should the child fire the callback?
  #   document.cascadable_child?(:update, doc)
  # @param kind [Symbol] The type of callback.
  # @param child [Document] The child document.
  # @return [true, false] If the child should fire the callback.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#192
  def cascadable_child?(kind, child, association); end

  # Get all the child embedded documents that are flagged as cascadable.
  #
  # @example Get all the cascading children.
  #   document.cascadable_children(:update)
  # @param kind [Symbol] The type of callback.
  # @return [Array<Document>] The children.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#162
  def cascadable_children(kind, children = T.unsafe(nil)); end

  # Get the name of the callback that the child should fire. This changes
  # depending on whether or not the child is new. A persisted parent with a
  # new child would fire :update from the parent, but needs to fire :create
  # on the child.
  #
  # @example Get the callback type.
  #   document.child_callback_type(:update, doc)
  # @param kind [Symbol] The type of callback.
  # @param child [Document] The child document
  # @return [Symbol] The name of the callback.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#212
  def child_callback_type(kind, child); end

  # We need to hook into this for autosave, since we don't want it firing if
  # the before callbacks were halted.
  #
  # @api private
  # @example Hook into the halt.
  #   document.halted_callback_hook(filter)
  # @param filter [Symbol] The callback that halted.
  # @param name [Symbol] The name of the callback that was halted
  #   (requires Rails 6.1+)
  # @since 3.0.3
  #
  # source://mongoid//lib/mongoid/interceptable.rb#235
  def halted_callback_hook(filter, name = T.unsafe(nil)); end

  # Run only the callbacks for the target location (before, after, around)
  # and kind (save, update, create).
  #
  # @example Run the targeted callbacks.
  #   model.run_targeted_callbacks(:before, :save)
  # @param place [Symbol] The time to run, :before, :after, :around.
  # @param kind [Symbol] The type of callback, :save, :create, :update.
  # @return [Object] The result of the chain execution.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/interceptable.rb#251
  def run_targeted_callbacks(place, kind); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/interceptable.rb#10
Mongoid::Interceptable::CALLBACKS = T.let(T.unsafe(nil), Array)

# Contains logging behaviour.
#
# source://mongoid//lib/mongoid/loggable.rb#5
module Mongoid::Loggable
  # Get the logger.
  #
  # @example Get the logger.
  #   Loggable.logger
  # @note Will try to grab Rails' logger first before creating a new logger
  #   with stdout.
  # @return [Logger] The logger.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/loggable.rb#18
  def logger; end

  # Set the logger.
  #
  # @example Set the logger.
  #   Loggable.logger = Logger.new($stdout)
  # @param logger [Logger] The logger to set.
  # @return [Logger] The new logger.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/loggable.rb#33
  def logger=(logger); end

  private

  # Gets the default Mongoid logger - stdout.
  #
  # @api private
  # @example Get the default logger.
  #   Loggable.default_logger
  # @return [Logger] The default logger.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/loggable.rb#49
  def default_logger; end

  # Get the Rails logger if it's defined.
  #
  # @api private
  # @example Get Rails' logger.
  #   Loggable.rails_logger
  # @return [Logger] The Rails logger.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/loggable.rb#65
  def rails_logger; end
end

# The minimum MongoDB version supported.
#
# source://mongoid//lib/mongoid.rb#46
Mongoid::MONGODB_VERSION = T.let(T.unsafe(nil), String)

# This module contains all the behavior for Ruby implementations of MongoDB
# selectors.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/matchable/default.rb#3
module Mongoid::Matchable
  extend ::ActiveSupport::Concern

  # Determines if this document has the attributes to match the supplied
  # MongoDB selector. Used for matching on embedded associations.
  #
  # @example Does the document match?
  #   document._matches?(:title => { "$in" => [ "test" ] })
  # @param selector [Hash] The MongoDB selector.
  # @return [true, false] True if matches, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/matchable.rb#61
  def _matches?(selector); end

  private

  # Get the matcher for the supplied key and value. Will determine the class
  # name from the key.
  #
  # @api private
  # @example Get the matcher.
  #   document.matcher(:title, { "$in" => [ "test" ] })
  # @param key [Symbol, String] The field name.
  # @param value [Object, Hash] The value or selector.
  # @return [Matcher] The matcher.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/matchable.rb#94
  def matcher(key, value); end

  class << self
    # Get the matcher for the supplied key and value. Will determine the class
    # name from the key.
    #
    # @api private
    # @example Get the matcher.
    #   Matchable.matcher(document, :title, { "$in" => [ "test" ] })
    # @param document [Document] The document to check.
    # @param key [Symbol, String] The field name.
    # @param value [Object, Hash] The value or selector.
    # @return [Matcher] The matcher.
    # @since 2.0.0.rc.7
    #
    # source://mongoid//lib/mongoid/matchable.rb#115
    def matcher(document, key, value); end

    private

    # Extract the attribute from the key, being smarter about dot notation.
    #
    # @api private
    # @api private
    # @example Extract the attribute.
    #   strategy.extract_attribute(doc, "info.field")
    # @param document [Document] The document.
    # @param key [String] The key.
    # @return [Object] The value of the attribute.
    # @since 2.2.1
    #
    # source://mongoid//lib/mongoid/matchable.rb#151
    def extract_attribute(document, key); end
  end
end

# Checks that all values match.
#
# source://mongoid//lib/mongoid/matchable/all.rb#6
class Mongoid::Matchable::All < ::Mongoid::Matchable::Default
  # Return true if the attribute and first value in the hash are equal.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param condition [Hash] The condition to evaluate. This must be
  #   a one-element hash like {'$gt' => 1}.
  # @return [true, false] If the values match.
  #
  # source://mongoid//lib/mongoid/matchable/all.rb#17
  def _matches?(condition); end
end

# Defines behavior for handling $and expressions in embedded documents.
#
# source://mongoid//lib/mongoid/matchable/and.rb#6
class Mongoid::Matchable::And < ::Mongoid::Matchable::Default
  # Does the supplied query match the attribute?
  #
  # @example Does this match?
  #   matcher._matches?([ { field => value } ])
  # @param conditions [Array] The or expression.
  # @return [true, false] True if matches, false if not.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/matchable/and.rb#18
  def _matches?(conditions); end
end

# Contains all the default behavior for checking for matching documents
# given MongoDB expressions.
#
# source://mongoid//lib/mongoid/matchable/default.rb#7
class Mongoid::Matchable::Default
  # Creating a new matcher only requires the value.
  #
  # @example Create a new matcher.
  #   Default.new("attribute")
  # @param attribute [Object] The current attribute to check against.
  # @return [Default] a new instance of Default
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#19
  def initialize(attribute, document = T.unsafe(nil)); end

  # Checks whether the attribute matches the value, using the default
  # MongoDB matching logic (i.e., when no operator is specified in the
  # criteria).
  #
  # If attribute and value are both of basic types like string or number,
  # this method returns true if and only if the attribute equals the value.
  #
  # Value can also be of a type like Regexp or Range which defines
  # more complex matching/inclusion behavior via the === operator.
  # If so, and attribute is still of a basic type like string or number,
  # this method returns true if and only if the value's === operator
  # returns true for the attribute. For example, this method returns true
  # if attribute is a string and value is a Regexp and attribute matches
  # the value, of if attribute is a number and value is a Range and
  # the value includes the attribute.
  #
  # If attribute is an array and value is not an array, the checks just
  # described (i.e. the === operator invocation) are performed on each item
  # of the attribute array. If any of the items in the attribute match
  # the value according to the value type's === operator, this method
  # returns true.
  #
  # If attribute and value are both arrays, this method returns true if and
  # only if the arrays are equal (including the order of the elements).
  #
  # @param value [Object] The value to check.
  # @return [true, false] True if attribute matches the value, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#53
  def _matches?(value); end

  # Returns the value of attribute attribute.
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#9
  def attribute; end

  # Sets the attribute attribute
  #
  # @param value the value to set the attribute attribute to.
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#9
  def attribute=(_arg0); end

  # Returns the value of attribute document.
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#9
  def document; end

  # Sets the attribute document
  #
  # @param value the value to set the attribute document to.
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#9
  def document=(_arg0); end

  protected

  # Given a condition, which is a one-element hash consisting of an
  # operator and a value like {'$gt' => 1}, return the value.
  #
  # @example Get the condition value.
  #   matcher.condition_value({'$gt' => 1})
  #   # => 1
  # @param condition [Hash] The condition.
  # @return [Object] The value of the condition.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#75
  def condition_value(condition); end

  # Determines whether the attribute value stored in this matcher
  # satisfies the provided condition using the provided operator.
  #
  # For example, given an instance of Gt matcher with the @attribute of
  # 2, the matcher is set up to answer whether the attribute is
  # greater than some input value. This input value is provided in
  # the condition, which could be {"$gt" => 1}, and the operator is
  # provided (somewhat in a duplicate fashion) in the operator argument,
  # in this case :>.
  #
  # @example
  #   matcher = Matchable::Gt.new(2)
  #   matcher.determine({'$gt' => 1}, :>)
  #   # => true
  # @param condition [Hash] The condition to evaluate. This must be
  #   a one-element hash; the key is ignored, and the value is passed
  #   as the argument to the operator.
  # @param operator [Symbol, String] The comparison operator or method.
  #   The operator is invoked on the attribute stored in the matcher
  #   instance.
  # @return [true, false] Result of condition evaluation.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/matchable/default.rb#112
  def determine(condition, operator); end
end

# source://mongoid//lib/mongoid/matchable/elem_match.rb#5
class Mongoid::Matchable::ElemMatch < ::Mongoid::Matchable::Default
  # Return true if a given predicate matches a sub document entirely
  #
  # @example Do the values match?
  #   matcher._matches?({"$elemMatch" => {"a" => 1, "b" => 2}})
  # @param value [Hash] The values to check.
  # @return [true, false] If the values match.
  #
  # source://mongoid//lib/mongoid/matchable/elem_match.rb#15
  def _matches?(value); end
end

# Performs equivalency checks.
#
# source://mongoid//lib/mongoid/matchable/eq.rb#7
class Mongoid::Matchable::Eq < ::Mongoid::Matchable::Default
  # Return true if the attribute and first value are equal.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] True if matches, false if not.
  #
  # source://mongoid//lib/mongoid/matchable/eq.rb#17
  def _matches?(value); end
end

# Checks for existence.
#
# source://mongoid//lib/mongoid/matchable/exists.rb#6
class Mongoid::Matchable::Exists < ::Mongoid::Matchable::Default
  # Return true if the attribute exists and checking for existence or
  # return true if the attribute does not exist and checking for
  # non-existence.
  #
  # @example Does anything exist?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/exists.rb#18
  def _matches?(value); end
end

# Performs Greater Than matching.
#
# source://mongoid//lib/mongoid/matchable/gt.rb#6
class Mongoid::Matchable::Gt < ::Mongoid::Matchable::Default
  # Return true if the attribute is greater than the value.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/gt.rb#16
  def _matches?(value); end
end

# Performs Greater than or equal to matching.
#
# source://mongoid//lib/mongoid/matchable/gte.rb#6
class Mongoid::Matchable::Gte < ::Mongoid::Matchable::Default
  # Return true if the attribute is greater than or equal to the value.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/gte.rb#16
  def _matches?(value); end
end

# Performs matching for any value in an array.
#
# source://mongoid//lib/mongoid/matchable/in.rb#6
class Mongoid::Matchable::In < ::Mongoid::Matchable::Default
  # Return true if the attribute is in the values.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/in.rb#16
  def _matches?(value); end
end

# Performs less than matching.
#
# source://mongoid//lib/mongoid/matchable/lt.rb#6
class Mongoid::Matchable::Lt < ::Mongoid::Matchable::Default
  # Return true if the attribute is less than the value.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/lt.rb#16
  def _matches?(value); end
end

# Performs less than or equal to matching.
#
# source://mongoid//lib/mongoid/matchable/lte.rb#6
class Mongoid::Matchable::Lte < ::Mongoid::Matchable::Default
  # Return true if the attribute is less than or equal to the value.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/lte.rb#16
  def _matches?(value); end
end

# Hash lookup for the matcher for a specific operation.
#
# @since 1.0.0
#
# source://mongoid//lib/mongoid/matchable.rb#32
Mongoid::Matchable::MATCHERS = T.let(T.unsafe(nil), ActiveSupport::HashWithIndifferentAccess)

# Performs non-equivalency checks.
#
# source://mongoid//lib/mongoid/matchable/ne.rb#6
class Mongoid::Matchable::Ne < ::Mongoid::Matchable::Default
  # Return true if the attribute and first value are not equal.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] True if matches, false if not.
  #
  # source://mongoid//lib/mongoid/matchable/ne.rb#16
  def _matches?(value); end
end

# Performs not in checking.
#
# source://mongoid//lib/mongoid/matchable/nin.rb#6
class Mongoid::Matchable::Nin < ::Mongoid::Matchable::Default
  # Return true if the attribute is not in the value list.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/nin.rb#16
  def _matches?(value); end
end

# Defines behavior for handling $nor expressions in embedded documents.
#
# source://mongoid//lib/mongoid/matchable/nor.rb#7
class Mongoid::Matchable::Nor < ::Mongoid::Matchable::Default
  # Does the supplied query match the attribute?
  #
  # Note: an empty array as an argument to $nor is prohibited by
  # MongoDB server. Mongoid does allow this and returns false in this case.
  #
  # @example Does this match?
  #   matcher._matches?("$nor" => [ { field => value } ])
  # @param conditions [Array] The or expression.
  # @return [true, false] True if matches, false if not.
  # @since 6.4.2/7.0.2/7.1.0
  #
  # source://mongoid//lib/mongoid/matchable/nor.rb#22
  def _matches?(conditions); end
end

# Defines behavior for handling $or expressions in embedded documents.
#
# source://mongoid//lib/mongoid/matchable/or.rb#6
class Mongoid::Matchable::Or < ::Mongoid::Matchable::Default
  # Does the supplied query match the attribute?
  #
  # @example Does this match?
  #   matcher._matches?("$or" => [ { field => value } ])
  # @param conditions [Array] The or expression.
  # @return [true, false] True if matches, false if not.
  # @since 2.0.0.rc.7
  #
  # source://mongoid//lib/mongoid/matchable/or.rb#18
  def _matches?(conditions); end
end

# Defines behavior for handling regular expressions in embedded documents.
#
# source://mongoid//lib/mongoid/matchable/regexp.rb#5
class Mongoid::Matchable::Regexp < ::Mongoid::Matchable::Default
  # Does the supplied query match the attribute?
  #
  # @example Does this match?
  #   matcher._matches?(/\AEm/)
  #   matcher._matches?(BSON::Regex::Raw.new("\\AEm"))
  # @param regexp [BSON::Regexp::Raw, Regexp] The regular expression object.
  # @return [true, false] True if matches, false if not.
  # @since 5.2.1
  #
  # source://mongoid//lib/mongoid/matchable/regexp.rb#18
  def _matches?(regexp); end
end

# Performs size checking.
#
# source://mongoid//lib/mongoid/matchable/size.rb#6
class Mongoid::Matchable::Size < ::Mongoid::Matchable::Default
  # Return true if the attribute size is equal to the first value.
  #
  # @example Do the values match?
  #   matcher._matches?({ :key => 10 })
  # @param value [Hash] The values to check.
  # @return [true, false] If a value exists.
  #
  # source://mongoid//lib/mongoid/matchable/size.rb#16
  def _matches?(value); end
end

# A string added to the platform details of Ruby driver client handshake documents.
#
# @since 6.1.0
#
# source://mongoid//lib/mongoid.rb#43
Mongoid::PLATFORM_DETAILS = T.let(T.unsafe(nil), String)

# Contains general behaviour for persistence operations.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/persistable/creatable.rb#3
module Mongoid::Persistable
  include ::Mongoid::Positional
  include ::Mongoid::Persistable::Savable
  include ::Mongoid::Persistable::Updatable
  include ::Mongoid::Persistable::Upsertable
  extend ::ActiveSupport::Concern
  include ::Mongoid::Persistable::Creatable
  include ::Mongoid::Persistable::Deletable
  include ::Mongoid::Persistable::Destroyable
  include ::Mongoid::Persistable::Incrementable
  include ::Mongoid::Persistable::Logical
  include ::Mongoid::Persistable::Poppable
  include ::Mongoid::Persistable::Pullable
  include ::Mongoid::Persistable::Pushable
  include ::Mongoid::Persistable::Renamable
  include ::Mongoid::Persistable::Settable
  include ::Mongoid::Persistable::Unsettable

  mixes_in_class_methods ::Mongoid::Persistable::Creatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Deletable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Destroyable::ClassMethods

  # Execute operations atomically (in a single database call) for everything
  # that would happen inside the block.
  #
  # @example Execute the operations atomically.
  #   document.atomically do
  #   document.set(name: "Tool").inc(likes: 10)
  #   end
  # @return [true, false] If the operation succeeded.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#56
  def atomically; end

  # Raise an error if a callback failed.
  #
  # @example Raise the callback error.
  #   Person.fail_due_to_callback!(person, :create!)
  # @param method [Symbol] The method being called.
  # @raise [Errors::Callback] The callback error.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#89
  def fail_due_to_callback!(method); end

  # Raise an error if validation failed.
  #
  # @example Raise the validation error.
  #   Person.fail_due_to_validation!(person)
  # @raise [Errors::Validations] The validation error.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#75
  def fail_due_to_validation!; end

  private

  # Are we executing an atomically block on the current document?
  #
  # @api private
  # @example Are we executing atomically?
  #   document.executing_atomically?
  # @return [true, false] If we are current executing atomically.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#105
  def executing_atomically?; end

  # Persist the atomic operations.
  #
  # @api private
  # @example Persist the atomic operations.
  #   persist_atomic_operations(ops)
  # @param operations [Hash] The atomic operations.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#203
  def persist_atomic_operations(operations); end

  # If we are in an atomically block, add the operations to the delayed group,
  # otherwise persist immediately.
  #
  # @api private
  # @example Persist immediately or delay the operations.
  #   document.persist_or_delay_atomic_operation(ops)
  # @param operation [Hash] The operation.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#182
  def persist_or_delay_atomic_operation(operation); end

  # Post process the persistence operation.
  #
  # @api private
  # @example Post process the persistence operation.
  #   document.post_process_persist(true)
  # @param result [Object] The result of the operation.
  # @param options [Hash] The options.
  # @return [true] true.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#122
  def post_process_persist(result, options = T.unsafe(nil)); end

  # Prepare an atomic persistence operation. Yields an empty hash to be sent
  # to the update.
  #
  # @api private
  # @example Prepare the atomic operation.
  #   document.prepare_atomic_operation do |coll, selector, opts|
  #   ...
  #   end
  # @return [Object] The result of the operation.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#141
  def prepare_atomic_operation; end

  # Process the atomic operations - this handles the common behaviour of
  # iterating through each op, getting the aliased field name, and removing
  # appropriate dirty changes.
  #
  # @api private
  # @example Process the atomic operations.
  #   document.process_atomic_operations(pulls) do |field, value|
  #   ...
  #   end
  # @param operations [Hash] The atomic operations.
  # @return [Hash] The operations.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable.rb#163
  def process_atomic_operations(operations); end
end

# Defines behaviour for persistence operations that create new documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/creatable.rb#8
module Mongoid::Persistable::Creatable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Persistable::Creatable::ClassMethods

  # Insert a new document into the database. Will return the document
  # itself whether or not the save was successful.
  #
  # @example Insert a document.
  #   document.insert
  # @param options [Hash] Options to pass to insert.
  # @return [Document] The persisted document.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#22
  def insert(options = T.unsafe(nil)); end

  private

  # Get the atomic insert for embedded documents, either a push or set.
  #
  # @api private
  # @example Get the inserts.
  #   document.inserts
  # @return [Hash] The insert ops.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#44
  def atomic_inserts; end

  # Insert the embedded document.
  #
  # @api private
  # @example Insert the document as embedded.
  #   document.insert_as_embedded
  # @raise [Errors::NoParent]
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#58
  def insert_as_embedded; end

  # Insert the root document.
  #
  # @api private
  # @example Insert the document as root.
  #   document.insert_as_root
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#80
  def insert_as_root; end

  # Post process an insert, which sets the new record attribute to false
  # and flags all the children as persisted.
  #
  # @api private
  # @example Post process the insert.
  #   document.post_process_insert
  # @return [true] true.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#95
  def post_process_insert; end

  # Prepare the insert for execution. Validates and runs callbacks, etc.
  #
  # @api private
  # @example Prepare for insertion.
  #   document.prepare_insert do
  #   collection.insert(as_document)
  #   end
  # @param options [Hash] The options.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#115
  def prepare_insert(options = T.unsafe(nil)); end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/creatable.rb#127
module Mongoid::Persistable::Creatable::ClassMethods
  # Create a new document. This will instantiate a new document and
  # insert it in a single call. Will always return the document
  # whether save passed or not.
  #
  # @example Create a new document.
  #   Person.create(:title => "Mr")
  # @example Create multiple new documents.
  #   Person.create({ title: "Mr" }, { title: "Mrs" })
  # @param attributes [Hash, Array] The attributes to create with, or an
  #   Array of multiple attributes for multiple documents.
  # @return [Document, Array<Document>] The newly created document(s).
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#145
  def create(attributes = T.unsafe(nil), &block); end

  # Create a new document. This will instantiate a new document and
  # insert it in a single call. Will always return the document
  # whether save passed or not, and if validation fails an error will be
  # raise.
  #
  # @example Create a new document.
  #   Person.create!(:title => "Mr")
  # @example Create multiple new documents.
  #   Person.create!({ title: "Mr" }, { title: "Mrs" })
  # @param attributes [Hash, Array] The attributes to create with, or an
  #   Array of multiple attributes for multiple documents.
  # @return [Document, Array<Document>] The newly created document(s).
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/creatable.rb#174
  def create!(attributes = T.unsafe(nil), &block); end
end

# Defines behaviour for persistence operations that delete documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/deletable.rb#8
module Mongoid::Persistable::Deletable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Persistable::Deletable::ClassMethods

  # Remove the document from the database.
  #
  # @example Remove the document.
  #   document.remove
  # @param options [Hash] Options to pass to remove.
  # @raise [Errors::ReadonlyDocument]
  # @return [TrueClass] True.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#21
  def delete(options = T.unsafe(nil)); end

  # Remove the document from the database.
  #
  # @example Remove the document.
  #   document.remove
  # @param options [Hash] Options to pass to remove.
  # @raise [Errors::ReadonlyDocument]
  # @return [TrueClass] True.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#21
  def remove(options = T.unsafe(nil)); end

  private

  # Get the atomic deletes for the operation.
  #
  # @api private
  # @example Get the atomic deletes.
  #   document.atomic_deletes
  # @return [Hash] The atomic deletes.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#47
  def atomic_deletes; end

  # Delete the embedded document.
  #
  # @api private
  # @example Delete the embedded document.
  #   document.delete_as_embedded
  # @param options [Hash] The deletion options.
  # @return [true] If the operation succeeded.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#63
  def delete_as_embedded(options = T.unsafe(nil)); end

  # Delete the root document.
  #
  # @api private
  # @example Delete the root document.
  #   document.delete_as_root
  # @return [true] If the document was removed.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#84
  def delete_as_root; end

  # Are we needing to notify the parent document of the deletion.
  #
  # @api private
  # @example Are we notifying the parent.
  #   document.notifying_parent?(suppress: true)
  # @param options [Hash] The delete options.
  # @return [true, false] If the parent should be notified.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#101
  def notifying_parent?(options = T.unsafe(nil)); end

  # Prepare the delete operation.
  #
  # @api private
  # @example Prepare the delete operation.
  #   document.prepare_delete do
  #   collection.find(atomic_selector).remove
  #   end
  # @return [Object] The result of the block.
  # @since 4.0.0
  # @yield [_self]
  # @yieldparam _self [Mongoid::Persistable::Deletable] the object that the method was called on
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#117
  def prepare_delete; end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/deletable.rb#124
module Mongoid::Persistable::Deletable::ClassMethods
  # Delete all documents given the supplied conditions. If no conditions
  # are passed, the entire collection will be dropped for performance
  # benefits. Does not fire any callbacks.
  #
  # @example Delete matching documents from the collection.
  #   Person.delete_all({ :title => "Sir" })
  # @example Delete all documents from the collection.
  #   Person.delete_all
  # @param conditions [Hash] Optional conditions to delete by.
  # @return [Integer] The number of documents deleted.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/deletable.rb#141
  def delete_all(conditions = T.unsafe(nil)); end
end

# Defines behaviour for persistence operations that destroy documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/destroyable.rb#8
module Mongoid::Persistable::Destroyable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Persistable::Destroyable::ClassMethods

  # Remove the document from the database with callbacks.
  #
  # @example Destroy a document.
  #   document.destroy
  # @param options [Hash] Options to pass to destroy.
  # @raise [Errors::ReadonlyDocument]
  # @return [true, false] True if successful, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/destroyable.rb#21
  def destroy(options = T.unsafe(nil)); end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/destroyable.rb#29
  def destroy!(options = T.unsafe(nil)); end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/destroyable.rb#33
module Mongoid::Persistable::Destroyable::ClassMethods
  # Delete all documents given the supplied conditions. If no conditions
  # are passed, the entire collection will be dropped for performance
  # benefits. Fires the destroy callbacks if conditions were passed.
  #
  # @example Destroy matching documents from the collection.
  #   Person.destroy_all({ :title => "Sir" })
  # @example Destroy all documents from the collection.
  #   Person.destroy_all
  # @param conditions [Hash] Optional conditions to destroy by.
  # @return [Integer] The number of documents destroyed.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/destroyable.rb#50
  def destroy_all(conditions = T.unsafe(nil)); end
end

# Defines behaviour for $inc operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/incrementable.rb#8
module Mongoid::Persistable::Incrementable
  extend ::ActiveSupport::Concern

  # Increment the provided fields by the corresponding values. Values can
  # be positive or negative, and if no value exists for the field it will
  # be set with the provided value.
  #
  # @example Increment the fields.
  #   document.inc(score: 10, place: 1, lives: -10)
  # @param increments [Hash] The field/inc increment pairs.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/incrementable.rb#23
  def inc(increments); end
end

# The atomic operations that deal with arrays or sets in the db.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable.rb#43
Mongoid::Persistable::LIST_OPERATIONS = T.let(T.unsafe(nil), Array)

# Defines behaviour for logical bitwise operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/logical.rb#8
module Mongoid::Persistable::Logical
  extend ::ActiveSupport::Concern

  # Performs an atomic $bit operation on the field with the provided hash
  # of bitwise ops to execute in order.
  #
  # @example Execute the bitwise operations.
  #   person.bit(age: { :and => 12 }, val: { and: 10, or: 12 })
  # @param operations [Hash] The bitwise operations.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/logical.rb#22
  def bit(operations); end
end

# Defines behaviour for $pop operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/poppable.rb#8
module Mongoid::Persistable::Poppable
  extend ::ActiveSupport::Concern

  # Pop or shift items from arrays using the $pop operator.
  #
  # @example Pop items from an array.
  #   document.pop(aliases: 1)
  # @example Shift items in the array.
  #   document.pop(aliases: -1)
  # @example Multiple pops in one call.
  #   document.pop(names: 1, aliases: 1)
  # @param pops [Hash] The field/value pop operations.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/poppable.rb#27
  def pop(pops); end
end

# Defines behaviour for $pull and $pullAll operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/pullable.rb#8
module Mongoid::Persistable::Pullable
  extend ::ActiveSupport::Concern

  # Pull single values from the provided arrays.
  #
  # @example Pull a value from the array.
  #   document.pull(names: "Jeff", levels: 5)
  # @note If duplicate values are found they will all be pulled.
  # @param pulls [Hash] The field/value pull pairs.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/pullable.rb#23
  def pull(pulls); end

  # Pull multiple values from the provided array fields.
  #
  # @example Pull values from the arrays.
  #   document.pull_all(names: [ "Jeff", "Bob" ], levels: [ 5, 6 ])
  # @param pulls [Hash] The pull all operations.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/pullable.rb#43
  def pull_all(pulls); end
end

# Defines behaviour for $push and $addToSet operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/pushable.rb#8
module Mongoid::Persistable::Pushable
  extend ::ActiveSupport::Concern

  # Add the single values to the arrays only if the value does not already
  # exist in the array.
  #
  # @example Add the values to the sets.
  #   document.add_to_set(names: "James", aliases: "Bond")
  # @param adds [Hash] The field/value pairs to add.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/pushable.rb#22
  def add_to_set(adds); end

  # Push a single value or multiple values onto arrays.
  #
  # @example Push a single value onto arrays.
  #   document.push(names: "James", aliases: "007")
  # @example Push multiple values onto arrays.
  #   document.push(names: [ "James", "Bond" ])
  # @param pushes [Hash] The $push operations.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/pushable.rb#55
  def push(pushes); end
end

# Defines behaviour for $rename operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/renamable.rb#8
module Mongoid::Persistable::Renamable
  extend ::ActiveSupport::Concern

  # Rename fields from one value to another via $rename.
  #
  # @example Rename the fields.
  #   document.rename(title: "salutation", name: "nombre")
  # @note This does not work for fields in embeds many relations.
  # @param renames [Hash] The rename pairs of old name/new name.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/renamable.rb#23
  def rename(renames); end
end

# Defines behaviour for persistence operations that save documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/savable.rb#8
module Mongoid::Persistable::Savable
  # Save the document - will perform an insert if the document is new, and
  # update if not.
  #
  # @example Save the document.
  #   document.save
  # @param options [Hash] Options to pass to the save.
  # @return [true, false] True is success, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/savable.rb#21
  def save(options = T.unsafe(nil)); end

  # Save the document - will perform an insert if the document is new, and
  # update if not. If a validation error occurs an error will get raised.
  #
  # @example Save the document.
  #   document.save!
  # @param options [Hash] Options to pass to the save.
  # @raise [Errors::Validations] If validation failed.
  # @raise [Errors::Callback] If a callback returns false.
  # @return [true, false] True if validation passed.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/savable.rb#43
  def save!(options = T.unsafe(nil)); end
end

# Defines behaviour for $set operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/settable.rb#8
module Mongoid::Persistable::Settable
  extend ::ActiveSupport::Concern

  # Perform a $set operation on the provided field/value pairs and set the
  # values in the document in memory.
  #
  # The key can be a dotted sequence of keys, in which case the
  # top level field is treated as a nested hash and any missing keys
  # are created automatically:
  #
  # Performing a nested set like this merges values of intermediate keys:
  #
  # If the top level field was not a hash, its original value is discarded
  # and the field is replaced with a hash.
  #
  # Note that unlike MongoDB's $set, Mongoid's set writes out the entire
  # field even when setting a subset of the field via the nested hash
  # semantics. This means performing a $set with nested hash semantics
  # can overwrite other hash keys within the top level field in the database.
  #
  # @example Set the values.
  #   document.set(title: "sir", dob: Date.new(1970, 1, 1))
  # @example Set the values using nested hash semantics.
  #   document.set('author.title' => 'Sir')
  #   # => document.author == {'title' => 'Sir'}
  # @example Nested hash value merging.
  #   document.set('author.title' => 'Sir')
  #   document.set('author.name' => 'Linus Torvalds')
  #   # => document.author == {'title' => 'Sir', 'name' => 'Linus Torvalds'}
  # @example Nested hash overwriting a non-hash value.
  #   document.set('author' => 'John Doe')
  #   document.set('author.title' => 'Sir')
  #   # => document.author == {'title' => 'Sir'}
  # @param setters [Hash] The field/value pairs to set.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/settable.rb#50
  def set(setters); end
end

# Defines behaviour for $unset operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/unsettable.rb#8
module Mongoid::Persistable::Unsettable
  extend ::ActiveSupport::Concern

  # Perform an $unset operation on the provided fields and in the
  # values in the document in memory.
  #
  # @example Unset the values.
  #   document.unset(:first_name, :last_name, :middle)
  # @param fields [Array<String, Symbol>] The names of the fields to
  #   unset.
  # @return [Document] The document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/unsettable.rb#23
  def unset(*fields); end
end

# Defines behaviour for persistence operations that update existing
# documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/updatable.rb#9
module Mongoid::Persistable::Updatable
  # Update the document attributes in the database.
  #
  # @example Update the document's attributes
  #   document.update(:title => "Sir")
  # @param attributes [Hash] The attributes to update.
  # @return [true, false] True if validation passed, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#44
  def update(attributes = T.unsafe(nil)); end

  # Update the document attributes in the database and raise an error if
  # validation failed.
  #
  # @example Update the document's attributes.
  #   document.update!(:title => "Sir")
  # @param attributes [Hash] The attributes to update.
  # @raise [Errors::Validations] If validation failed.
  # @raise [Errors::Callbacks] If a callback returns false.
  # @return [true, false] True if validation passed.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#64
  def update!(attributes = T.unsafe(nil)); end

  # Update a single attribute and persist the entire document.
  # This skips validation but fires the callbacks.
  #
  # @example Update the attribute.
  #   person.update_attribute(:title, "Sir")
  # @param name [Symbol, String] The name of the attribute.
  # @param value [Object] The new value of the attribute.a
  # @raise [Errors::ReadonlyAttribute] If the field cannot be changed due
  #   to being flagged as reaodnly.
  # @return [true, false] True if save was successfull, false if not.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#26
  def update_attribute(name, value); end

  # Update the document attributes in the database.
  #
  # @example Update the document's attributes
  #   document.update(:title => "Sir")
  # @param attributes [Hash] The attributes to update.
  # @return [true, false] True if validation passed, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#44
  def update_attributes(attributes = T.unsafe(nil)); end

  # Update the document attributes in the database and raise an error if
  # validation failed.
  #
  # @example Update the document's attributes.
  #   document.update!(:title => "Sir")
  # @param attributes [Hash] The attributes to update.
  # @raise [Errors::Validations] If validation failed.
  # @raise [Errors::Callbacks] If a callback returns false.
  # @return [true, false] True if validation passed.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#64
  def update_attributes!(attributes = T.unsafe(nil)); end

  private

  # Initialize the atomic updates.
  #
  # @api private
  # @example Initialize the atomic updates.
  #   document.init_atomic_updates
  # @return [Array<Hash>] The updates and conflicts.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#86
  def init_atomic_updates; end

  # Prepare the update for execution. Validates and runs callbacks, etc.
  #
  # @api private
  # @example Prepare for update.
  #   document.prepare_update do
  #   collection.update(atomic_selector)
  #   end
  # @param options [Hash] The options.
  # @return [true, false] The result of the update.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#106
  def prepare_update(options = T.unsafe(nil)); end

  # Update the document in the database.
  #
  # @example Update an existing document.
  #   document.update
  # @option options
  # @param options [Hash] Options to pass to update.
  # @return [true, false] True if succeeded, false if not.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/persistable/updatable.rb#131
  def update_document(options = T.unsafe(nil)); end
end

# Defines behaviour for persistence operations that upsert documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/persistable/upsertable.rb#8
module Mongoid::Persistable::Upsertable
  # Perform an upsert of the document. If the document does not exist in the
  # database, then Mongo will insert a new one, otherwise the fields will get
  # overwritten with new values on the existing document.
  #
  # @example Upsert the document.
  #   document.upsert
  # @param options [Hash] The validation options.
  # @return [true] True.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/persistable/upsertable.rb#22
  def upsert(options = T.unsafe(nil)); end

  private

  # Prepare the upsert for execution.
  #
  # @api private
  # @example Prepare the upsert
  #   document.prepare_upsert do
  #   collection.find(selector).update(as_document)
  #   end
  # @param options [Hash] The options hash.
  # @return [true, false] If the operation succeeded.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/persistable/upsertable.rb#45
  def prepare_upsert(options = T.unsafe(nil)); end
end

# Object encapsulating logic for setting/getting a collection and database name
# and a client with particular options to use when persisting models.
#
# @since 6.0.0
#
# source://mongoid//lib/mongoid/persistence_context.rb#7
class Mongoid::PersistenceContext
  extend ::Forwardable

  # Initialize the persistence context object.
  #
  # @example Create a new persistence context.
  #   PersistenceContext.new(model, collection: 'other')
  # @param object [Object] The class or model instance for which a persistence context
  #   should be created.
  # @param opts [Hash] The persistence context options.
  # @return [PersistenceContext] a new instance of PersistenceContext
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#52
  def initialize(object, opts = T.unsafe(nil)); end

  # Determine if this persistence context is equal to another.
  #
  # @example Compare two persistence contexts.
  #   context == other_context
  # @param other [Object] The object to be compared with this one.
  # @return [true, false] Whether the two persistence contexts are equal.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#135
  def ==(other); end

  # Get the client for this persistence context.
  #
  # @example Get the client for this persistence context.
  #   context.client
  # @return [Mongo::Client] The client for this persistence
  #   context.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#109
  def client; end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#119
  def client_name; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # Get the collection for this persistence context.
  #
  # @example Get the collection for this persistence context.
  #   context.collection
  # @param parent [Object] The parent object whose collection name is used
  #   instead of this persistence context's collection name.
  # @return [Mongo::Collection] The collection for this persistence
  #   context.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#69
  def collection(parent = T.unsafe(nil)); end

  # Get the collection name for this persistence context.
  #
  # @example Get the collection name for this persistence context.
  #   context.collection_name
  # @return [String] The collection name for this persistence
  #   context.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#82
  def collection_name; end

  # Get the database name for this persistence context.
  #
  # @example Get the database name for this persistence context.
  #   context.database_name
  # @return [String] The database name for this persistence
  #   context.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#96
  def database_name; end

  # The options defining this persistence context.
  #
  # @return [Hash] The persistence context options.
  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#21
  def options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def storage_options(*args, **_arg1, &block); end

  private

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#151
  def __evaluate__(name); end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#156
  def client_options; end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#162
  def database_name_option; end

  # @since 6.0.0
  #
  # source://mongoid//lib/mongoid/persistence_context.rb#142
  def set_options!(opts); end

  class << self
    # Clear the persistence context for a particular class or model instance.
    #
    # @example Clear the persistence context for a class or model instance.
    #   PersistenceContext.clear(model)
    # @param object [Class, Object] The class or model instance.
    # @param cluster [Mongo::Cluster] The original cluster before this context was used.
    # @param original_context [Mongoid::PersistenceContext] The original persistence
    #   context that was set before this context was used.
    # @since 6.0.0
    #
    # source://mongoid//lib/mongoid/persistence_context.rb#226
    def clear(object, cluster = T.unsafe(nil), original_context = T.unsafe(nil)); end

    # Get the persistence context for a particular class or model instance.
    #
    # @example Get the persistence context for a class or model instance.
    #   PersistenceContext.get(model)
    # @param object [Object] The class or model instance.
    # @return [Mongoid::PersistenceContext] The persistence context for the object.
    # @since 6.0.0
    #
    # source://mongoid//lib/mongoid/persistence_context.rb#211
    def get(object); end

    # Set the persistence context for a particular class or model instance.
    #
    # If there already is a persistence context set, options in the existing
    # context are combined with options given to the set call.
    #
    # @example Set the persistence context for a class or model instance.
    #   PersistenceContext.set(model)
    # @param object [Object] The class or model instance.
    # @param options_or_context [Hash, Mongoid::PersistenceContext] The persistence
    #   options or a persistence context object.
    # @return [Mongoid::PersistenceContext] The persistence context for the object.
    # @since 6.0.0
    #
    # source://mongoid//lib/mongoid/persistence_context.rb#185
    def set(object, options_or_context); end
  end
end

# Extra options in addition to driver client options that determine the
# persistence context.
#
# @return [Array<Symbol>] The list of extra options besides client options
#   that determine the persistence context.
# @since 6.0.0
#
# source://mongoid//lib/mongoid/persistence_context.rb#30
Mongoid::PersistenceContext::EXTRA_OPTIONS = T.let(T.unsafe(nil), Array)

# The full list of valid persistence context options.
#
# @return [Array<Symbol>] The full list of options defining the persistence
#   context.
# @since 6.0.0
#
# source://mongoid//lib/mongoid/persistence_context.rb#40
Mongoid::PersistenceContext::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# This module is responsible for taking update selectors and switching out
# the indexes for the $ positional operator where appropriate.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/positional.rb#8
module Mongoid::Positional
  # Takes the provided selector and atomic operations and replaces the
  # indexes of the embedded documents with the positional operator when
  # needed.
  #
  # @example Process the operations.
  #   positionally(
  #   { "_id" => 1, "addresses._id" => 2 },
  #   { "$set" => { "addresses.0.street" => "hobrecht" }}
  #   )
  # @note The only time we can accurately know when to use the positional
  #   operator is at the exact time we are going to persist something. So
  #   we can tell by the selector that we are sending if it is actually
  #   possible to use the positional operator at all. For example, if the
  #   selector is: { "_id" => 1 }, then we could not use the positional
  #   operator for updating embedded documents since there would never be a
  #   match - we base whether we can based on the number of levels deep the
  #   selector goes, and if the id values are not nil.
  # @param selector [Hash] The selector.
  # @param operations [Hash] The update operations.
  # @param processed [Hash] The processed update operations.
  # @return [Hash] The new operations.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/positional.rb#36
  def positionally(selector, operations, processed = T.unsafe(nil)); end

  private

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/positional.rb#47
  def process_operations(keys, operations, processed); end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/positional.rb#54
  def process_updates(keys, update, updates = T.unsafe(nil)); end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/positional.rb#61
  def replace_index(keys, position); end
end

# A cache of database queries on a per-request basis.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#7
module Mongoid::QueryCache
  class << self
    # Execute the block while using the query cache.
    #
    # @example Execute with the cache.
    #   QueryCache.cache { collection.find }
    # @return [Object] The result of the block.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#66
    def cache; end

    # Get the cached queries.
    #
    # @example Get the cached queries from the current thread.
    #   QueryCache.cache_table
    # @return [Hash] The hash of cached queries.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#18
    def cache_table; end

    # Clear the query cache.
    #
    # @example Clear the cache.
    #   QueryCache.clear_cache
    # @return [nil] Always nil.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#30
    def clear_cache; end

    # Set whether the cache is enabled.
    #
    # @example Set if the cache is enabled.
    #   QueryCache.enabled = true
    # @param value [true, false] The enabled value.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#42
    def enabled=(value); end

    # Is the query cache enabled on the current thread?
    #
    # @example Is the query cache enabled?
    #   QueryCache.enabled?
    # @return [true, false] If the cache is enabled.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#54
    def enabled?; end

    # Execute the block with the query cache disabled.
    #
    # @example Execute without the cache.
    #   QueryCache.uncached { collection.find }
    # @return [Object] The result of the block.
    # @since 4.0.0
    #
    # source://mongoid//lib/mongoid/query_cache.rb#80
    def uncached; end
  end
end

# Included to add behaviour for clearing out the query cache on certain
# operations.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#180
module Mongoid::QueryCache::Base
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#182
  def alias_query_cache_clear(*method_names); end
end

# A Cursor that attempts to load documents from memory first before hitting
# the database if the same query has already been executed.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#128
class Mongoid::QueryCache::CachedCursor < ::Mongo::Cursor
  # We iterate over the cached documents if they exist already in the
  # cursor otherwise proceed as normal.
  #
  # @example Iterate over the documents.
  #   cursor.each do |doc|
  #   # ...
  #   end
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#139
  def each; end

  # Get a human-readable string representation of +Cursor+.
  #
  # @example Inspect the cursor.
  #   cursor.inspect
  # @return [String] A string representation of a +Cursor+ instance.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#157
  def inspect; end

  private

  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#163
  def process(result); end
end

# Adds behaviour to the query cache for collections.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#311
module Mongoid::QueryCache::Collection
  extend ::ActiveSupport::Concern
end

# Bypass the query cache when reloading a document.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#321
module Mongoid::QueryCache::Document
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#322
  def reload; end
end

# The middleware to be added to a rack application in order to activate the
# query cache.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#93
class Mongoid::QueryCache::Middleware
  # Instantiate the middleware.
  #
  # @example Create the new middleware.
  #   Middleware.new(app)
  # @param app [Object] The rack applciation stack.
  # @return [Middleware] a new instance of Middleware
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#103
  def initialize(app); end

  # Execute the request, wrapping in a query cache.
  #
  # @example Execute the request.
  #   middleware.call(env)
  # @param env [Object] The environment.
  # @return [Object] The result of the call.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#117
  def call(env); end
end

# Contains enhancements to the Mongo::Collection::View in order to get a
# cached cursor or a regular cursor on iteration.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/query_cache.rb#201
module Mongoid::QueryCache::View
  extend ::ActiveSupport::Concern

  # Override the default enumeration to handle if the cursor can be cached
  # or not.
  #
  # @example Iterate over the view.
  #   view.each do |doc|
  #   # ...
  #   end
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#225
  def each; end

  private

  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#293
  def cache_key; end

  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#265
  def cached_cursor; end

  # @return [Boolean]
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#301
  def driver_supports_cursor_sessions?; end

  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#273
  def get_cursor(result, server, session = T.unsafe(nil)); end

  # @return [Boolean]
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/query_cache.rb#297
  def system_collection?; end
end

# This module handles reloading behaviour of documents.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/reloadable.rb#7
module Mongoid::Reloadable
  # Reloads the +Document+ attributes from the database. If the document has
  # not been saved then an error will get raised if the configuration option
  # was set. This can reload root documents or embedded documents.
  #
  # @example Reload the document.
  #   person.reload
  # @raise [Errors::DocumentNotFound] If the document was deleted.
  # @return [Document] The document, reloaded.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/reloadable.rb#21
  def reload; end

  private

  # Reload the document, determining if it's embedded or not and what
  # behaviour to use.
  #
  # @example Reload the document.
  #   document._reload
  # @return [Hash] The reloaded attributes.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/reloadable.rb#48
  def _reload; end

  # Extract only the desired embedded document from the attributes.
  #
  # @example Extract the embedded document.
  #   document.extract_embedded_attributes(attributes)
  # @param attributes [Hash] The document in the db.
  # @return [Hash] The document's extracted attributes.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/reloadable.rb#88
  def extract_embedded_attributes(attributes); end

  # Reload the embedded document.
  #
  # @example Reload the document.
  #   document.reload_embedded_document
  # @return [Hash] The reloaded attributes.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/reloadable.rb#72
  def reload_embedded_document; end

  # Reload the root document.
  #
  # @example Reload the document.
  #   document.reload_root_document
  # @return [Hash] The reloaded attributes.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/reloadable.rb#60
  def reload_root_document; end
end

# This module contains behaviour for all Mongoid scoping - named scopes,
# default scopes, and criteria accessors via scoped and unscoped.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/scopable.rb#9
module Mongoid::Scopable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Mongoid::Scopable::ClassMethods

  private

  # Apply the default scoping to the attributes of the document, as long as
  # they are not complex queries.
  #
  # @api private
  # @example Apply the default scoping.
  #   document.apply_default_scoping
  # @return [true, false] If default scoping was applied.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#31
  def apply_default_scoping; end

  module GeneratedClassMethods
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
  end

  module GeneratedInstanceMethods
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
  end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/scopable.rb#39
module Mongoid::Scopable::ClassMethods
  # Get a criteria with the default scope applied, if possible.
  #
  # @example Get a criteria with the default scope.
  #   Model.with_default_scope
  # @return [Criteria] The criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#211
  def criteria; end

  # Is the class able to have the default scope applied?
  #
  # @example Can the default scope be applied?
  #   Band.default_scopable?
  # @return [true, false] If the default scope can be applied.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#104
  def default_scopable?; end

  # Add a default scope to the model. This scope will be applied to all
  # criteria unless #unscoped is specified.
  #
  # @example Define a default scope with a criteria.
  #   class Band
  #   include Mongoid::Document
  #   field :active, type: Boolean
  #   default_scope where(active: true)
  #   end
  # @example Define a default scope with a proc.
  #   class Band
  #   include Mongoid::Document
  #   field :active, type: Boolean
  #   default_scope ->{ where(active: true) }
  #   end
  # @param value [Proc, Criteria] The default scope.
  # @raise [Errors::InvalidScope] If the scope is not a proc or criteria.
  # @return [Proc] The default scope.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#90
  def default_scope(value = T.unsafe(nil)); end

  # Get a queryable, either the last one on the scope stack or a fresh one.
  #
  # @api private
  # @example Get a queryable.
  #   Model.queryable
  # @return [Criteria] The queryable.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#118
  def queryable; end

  # Create a scope that can be accessed from the class level or chained to
  # criteria by the provided name.
  #
  # @example Create named scopes.
  #
  #   class Person
  #   include Mongoid::Document
  #   field :active, type: Boolean
  #   field :count, type: Integer
  #
  #   scope :active, -> { where(active: true) }
  #   scope :at_least, ->(count){ where(:count.gt => count) }
  #   end
  # @param name [Symbol] The name of the scope.
  # @param value [Proc] The conditions of the scope.
  # @raise [Errors::InvalidScope] If the scope is not a proc.
  # @raise [Errors::ScopeOverwrite] If the scope name already exists.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#145
  def scope(name, value, &block); end

  # Get a criteria for the document with normal scoping.
  #
  # @example Get the criteria.
  #   Band.scoped(skip: 10)
  # @note This will force the default scope to be applied.
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Query options for the criteria.
  # @return [Criteria] A scoped criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#173
  def scoped(options = T.unsafe(nil)); end

  # Returns a hash of all the scopes defined for this class, including
  # scopes defined on ancestor classes.
  #
  # @example Get the defined scopes for a class
  #   class Band
  #   include Mongoid::Document
  #   field :active, type: Boolean
  #
  #   scope :active, -> { where(active: true) }
  #   end
  #   Band.scopes
  # @return [Hash] The scopes defined for this class
  # @since 3.1.4
  #
  # source://mongoid//lib/mongoid/scopable.rb#56
  def scopes; end

  # Get the criteria without the default scoping applied.
  #
  # @example Get the unscoped criteria.
  #   Band.unscoped
  # @example Yield to block with no default scoping.
  #   Band.unscoped do
  #   Band.where(name: "Depeche Mode")
  #   end
  # @note This will force the default scope to be removed.
  # @return [Criteria, Object] The unscoped criteria or result of the
  #   block.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#193
  def unscoped; end

  # Get a criteria with the default scope applied, if possible.
  #
  # @example Get a criteria with the default scope.
  #   Model.with_default_scope
  # @return [Criteria] The criteria.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#211
  def with_default_scope; end

  # Pushes the provided criteria onto the scope stack, and removes it after the
  # provided block is yielded.
  #
  # @example Yield to the criteria.
  #   Person.with_scope(criteria)
  # @param criteria [Criteria] The criteria to apply.
  # @return [Criteria] The yielded criteria.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#227
  def with_scope(criteria); end

  # Execute the block without applying the default scope.
  #
  # @example Execute without the default scope.
  #   Band.without_default_scope do
  #   Band.where(name: "Depeche Mode")
  #   end
  # @return [Object] The result of the block.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#246
  def without_default_scope; end

  private

  # Warns or raises exception if overriding another scope or method.
  #
  # @api private
  # @example Warn or raise error if name exists.
  #   Model.valid_scope_name?("test")
  # @param name [String, Symbol] The name of the scope.
  # @raise [Errors::ScopeOverwrite] If the name exists and configured to
  #   raise the error.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#268
  def check_scope_name(name); end

  # Checks if the intended scope is a valid object, either a criteria or
  # proc with a criteria.
  #
  # @api private
  # @example Check if the scope is valid.
  #   Model.check_scope_validity({})
  # @param value [Object] The intended scope.
  # @raise [Errors::InvalidScope] If the scope is not a valid object.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#296
  def check_scope_validity(value); end

  # Defines the actual class method that will execute the scope when
  # called.
  #
  # @api private
  # @example Define the scope class method.
  #   Model.define_scope_method(:active)
  # @param name [Symbol] The method/scope name.
  # @return [Method] The defined method.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/scopable.rb#315
  def define_scope_method(name); end

  # Process the default scope value. If one already exists, we merge the
  # new one into the old one.
  #
  # @api private
  # @example Process the default scope.
  #   Model.process_default_scope(value)
  # @param value [Criteria, Proc] The default scope value.
  # @since 3.0.5
  #
  # source://mongoid//lib/mongoid/scopable.rb#340
  def process_default_scope(value); end
end

# Provides behaviour for generating the selector for a specific document.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/selectable.rb#7
module Mongoid::Selectable
  extend ::ActiveSupport::Concern

  # Get the atomic selector for the document. This is a hash in the simplest
  # case { "_id" => id }, but can become more complex for embedded documents
  # and documents that use a shard key.
  #
  # @example Get the document's atomic selector.
  #   document.atomic_selector
  # @return [Hash] The document's selector.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/selectable.rb#20
  def atomic_selector; end

  private

  # Get the atomic selector for an embedded document.
  #
  # @api private
  # @example Get the embedded atomic selector.
  #   document.embedded_atomic_selector
  # @return [Hash] The embedded document selector.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/selectable.rb#37
  def embedded_atomic_selector; end

  # Get the atomic selector for a root document.
  #
  # @api private
  # @example Get the root atomic selector.
  #   document.root_atomic_selector
  # @return [Hash] The root document selector.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/selectable.rb#55
  def root_atomic_selector; end
end

# This module provides the extra behaviour for including relations in JSON
# and XML serialization.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/serializable.rb#8
module Mongoid::Serializable
  extend ::ActiveSupport::Concern

  # Gets the document as a serializable hash, used by ActiveModel's JSON
  # serializer.
  #
  # @example Get the serializable hash.
  #   document.serializable_hash
  # @example Get the serializable hash with options.
  #   document.serializable_hash(:include => :addresses)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options to pass.
  # @return [Hash] The document, ready to be serialized.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/serializable.rb#37
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # Get the names of all fields that will be serialized.
  #
  # @api private
  # @example Get all the field names.
  #   document.send(:field_names)
  # @return [Array<String>] The names of the fields.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/serializable.rb#68
  def field_names(options); end

  # Since the inclusions can be a hash, symbol, or array of symbols, this is
  # provided as a convenience to parse out the names.
  #
  # @example Get the relation names.
  #   document.relation_names(:include => [ :addresses ])
  # @param inclusions [Hash, Symbol, Array<Symbol>] The inclusions.
  # @return [Array<Symbol>] The names of the included relations.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/serializable.rb#146
  def relation_names(inclusions); end

  # Since the inclusions can be a hash, symbol, or array of symbols, this is
  # provided as a convenience to parse out the options.
  #
  # @example Get the relation options.
  #   document.relation_names(:include => [ :addresses ])
  # @param inclusions [Hash, Symbol, Array<Symbol>] The inclusions.
  # @param options [Hash] The options.
  # @param name [Symbol] The name of the relation.
  # @return [Hash] The options for the relation.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/serializable.rb#163
  def relation_options(inclusions, options, name); end

  # Serialize a single attribute. Handles relations, fields, and dynamic
  # attributes.
  #
  # @api private
  # @example Serialize the attribute.
  #   document.serialize_attribute({}, "id" , [ "id" ])
  # @param name [String] The attribute name.
  # @param options [Hash] The options.
  # @param names [Array<String>] The names of all attributes.
  # @param attrs [Hash] The attributes.
  # @return [Object] The attribute.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/serializable.rb#99
  def serialize_attribute(attrs, name, names, options); end

  # For each of the provided include options, get the relation needed and
  # provide it in the hash.
  #
  # @example Serialize the included relations.
  #   document.serialize_relations({}, :include => :addresses)
  # @option options
  # @option options
  # @option options
  # @param attributes [Hash] The attributes to serialize.
  # @param options [Hash] The serialization options.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/serializable.rb#124
  def serialize_relations(attributes = T.unsafe(nil), options = T.unsafe(nil)); end
end

# This module contains behaviour for adding shard key fields to updates.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/shardable.rb#7
module Mongoid::Shardable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Shardable::ClassMethods

  # Get the shard key fields.
  #
  # @example Get the shard key fields.
  #   model.shard_key_fields
  # @note Refactored from using delegate for class load performance.
  # @return [Array<String>] The shard key field names.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/shardable.rb#25
  def shard_key_fields; end

  # Get the document selector with the defined shard keys.
  #
  # @example Get the selector for the shard keys.
  #   person.shard_key_selector
  # @return [Hash] The shard key selector.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/shardable.rb#37
  def shard_key_selector; end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/shardable.rb#45
module Mongoid::Shardable::ClassMethods
  # Specifies a shard key with the field(s) specified.
  #
  # @example Specify the shard key.
  #
  #   class Person
  #   include Mongoid::Document
  #   field :first_name, :type => String
  #   field :last_name, :type => String
  #
  #   shard_key :first_name, :last_name
  #   end
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/shardable.rb#60
  def shard_key(*names); end
end

# This module contains the behaviour for getting the various states a
# document can transition through.
#
# source://mongoid//lib/mongoid/stateful.rb#6
module Mongoid::Stateful
  # Returns whether or not the document has been flagged for deletion, but
  # not destroyed yet. Used for atomic pulls of child documents.
  #
  # @example Is the document flagged?
  #   document.flagged_for_destroy?
  # @return [true, false] If the document is flagged.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/stateful.rb#42
  def _destroy; end

  # Sets the attribute destroyed
  #
  # @param value the value to set the attribute destroyed to.
  #
  # source://mongoid//lib/mongoid/stateful.rb#8
  def destroyed=(_arg0); end

  # Returns true if the +Document+ has been succesfully destroyed, and false
  # if it hasn't. This is determined by the variable @destroyed and NOT
  # by checking the database.
  #
  # @example Is the document destroyed?
  #   person.destroyed?
  # @return [true, false] True if destroyed, false if not.
  #
  # source://mongoid//lib/mongoid/stateful.rb#56
  def destroyed?; end

  # Sets the attribute flagged_for_destroy
  #
  # @param value the value to set the attribute flagged_for_destroy to.
  #
  # source://mongoid//lib/mongoid/stateful.rb#8
  def flagged_for_destroy=(_arg0); end

  # Returns whether or not the document has been flagged for deletion, but
  # not destroyed yet. Used for atomic pulls of child documents.
  #
  # @example Is the document flagged?
  #   document.flagged_for_destroy?
  # @return [true, false] If the document is flagged.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/stateful.rb#42
  def flagged_for_destroy?; end

  # Returns whether or not the document has been flagged for deletion, but
  # not destroyed yet. Used for atomic pulls of child documents.
  #
  # @example Is the document flagged?
  #   document.flagged_for_destroy?
  # @return [true, false] If the document is flagged.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/stateful.rb#42
  def marked_for_destruction?; end

  # Sets the attribute new_record
  #
  # @param value the value to set the attribute new_record to.
  #
  # source://mongoid//lib/mongoid/stateful.rb#8
  def new_record=(_arg0); end

  # Returns true if the +Document+ has not been persisted to the database,
  # false if it has. This is determined by the variable @new_record
  # and NOT if the object has an id.
  #
  # @example Is the document new?
  #   person.new_record?
  # @return [true, false] True if new, false if not.
  #
  # source://mongoid//lib/mongoid/stateful.rb#18
  def new_record?; end

  # Checks if the document has been saved to the database. Returns false
  # if the document has been destroyed.
  #
  # @example Is the document persisted?
  #   person.persisted?
  # @return [true, false] True if persisted, false if not.
  #
  # source://mongoid//lib/mongoid/stateful.rb#29
  def persisted?; end

  # Determine if the document can be pushed.
  #
  # @example Is this pushable?
  #   person.pushable?
  # @return [true, false] Is the document new and embedded?
  #
  # source://mongoid//lib/mongoid/stateful.rb#66
  def pushable?; end

  # Is the document readonly?
  #
  # @example Is the document readonly?
  #   document.readonly?
  # @return [true, false] If the document is readonly.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/stateful.rb#81
  def readonly?; end

  # Determine if the document can be set.
  #
  # @example Is this settable?
  #   person.settable?
  # @return [true, false] Is this document a new embeds one?
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/stateful.rb#93
  def settable?; end

  # Is the document updateable?
  #
  # @example Is the document updateable?
  #   person.updateable?
  # @return [true, false] If the document is changed and persisted.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/stateful.rb#105
  def updateable?; end

  private

  # source://mongoid//lib/mongoid/stateful.rb#111
  def reset_readonly; end
end

# source://mongoid//lib/mongoid/tasks/database.rb#3
module Mongoid::Tasks; end

# source://mongoid//lib/mongoid/tasks/database.rb#4
module Mongoid::Tasks::Database
  extend ::Mongoid::Tasks::Database

  # Create indexes for each model given the provided globs and the class is
  # not embedded.
  #
  # @example Create all the indexes.
  #   Mongoid::Tasks::Database.create_indexes
  # @return [Array<Class>] The indexed models.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/tasks/database.rb#16
  def create_indexes(models = T.unsafe(nil)); end

  # Remove indexes for each model given the provided globs and the class is
  # not embedded.
  #
  # @example Remove all the indexes.
  #   Mongoid::Tasks::Database.remove_indexes
  # @return [Array<Class>] The un-indexed models.
  #
  # source://mongoid//lib/mongoid/tasks/database.rb#97
  def remove_indexes(models = T.unsafe(nil)); end

  # Remove indexes that exist in the database but aren't specified on the
  # models.
  #
  # @example Remove undefined indexes.
  #   Mongoid::Tasks::Database.remove_undefined_indexes
  # @return [Hash{Class => Array(Hash)}] The list of indexes that were removed by model.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/tasks/database.rb#75
  def remove_undefined_indexes(models = T.unsafe(nil)); end

  # Return the list of indexes by model that exist in the database but aren't
  # specified on the models.
  #
  # @example Return the list of unused indexes.
  #   Mongoid::Tasks::Database.undefined_indexes
  # @return [Array<Hash>] The list of undefined indexes by model.
  #
  # source://mongoid//lib/mongoid/tasks/database.rb#41
  def undefined_indexes(models = T.unsafe(nil)); end

  private

  # source://mongoid//lib/mongoid/tasks/database.rb#111
  def logger; end
end

# This module contains logic for easy access to objects that have a lifecycle
# on the current thread.
#
# source://mongoid//lib/mongoid/threaded/lifecycle.rb#3
module Mongoid::Threaded
  extend ::Mongoid::Threaded

  # Is the document autosaved on the current thread?
  #
  # @example Is the document autosaved?
  #   Threaded.autosaved?(doc)
  # @param document [Document] The document to check.
  # @return [true, false] If the document is autosaved.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#296
  def autosaved?(document); end

  # Get all autosaves on the current thread.
  #
  # @example Get all autosaves.
  #   Threaded.autosaves
  # @return [Hash] The current autosaves.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#322
  def autosaves; end

  # Get all autosaves on the current thread for the class.
  #
  # @example Get all autosaves.
  #   Threaded.autosaves_for(Person)
  # @param klass [Class] The class to check.
  # @return [Array] The current autosaves.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#348
  def autosaves_for(klass); end

  # Begin autosaving a document on the current thread.
  #
  # @example Begin autosave.
  #   Threaded.begin_autosave(doc)
  # @param document [Document] The document to autosave.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#126
  def begin_autosave(document); end

  # Begin entry into a named thread local stack.
  #
  # @example Begin entry into the stack.
  #   Threaded.begin_execution(:create)
  # @param name [String] The name of the stack
  # @return [true] True.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#46
  def begin_execution(name); end

  # Begin validating a document on the current thread.
  #
  # @example Begin validation.
  #   Threaded.begin_validate(doc)
  # @param document [Document] The document to validate.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#138
  def begin_validate(document); end

  # Begin suppressing default scopes for given model on the current thread.
  #
  # @api private
  # @example Begin without default scope stack.
  #   Threaded.begin_without_default_scope(klass)
  # @param klass [Class] The model to suppress default scoping on.
  #
  # source://mongoid//lib/mongoid/threaded.rb#174
  def begin_without_default_scope(klass); end

  # Clear the cached session for this thread.
  #
  # @example Clear this thread's session.
  #   Threaded.clear_session
  # @return [nil]
  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#397
  def clear_session; end

  # Get the global client override.
  #
  # @example Get the global client override.
  #   Threaded.client_override
  # @return [String, Symbol] The override.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#198
  def client_override; end

  # Set the global client override.
  #
  # @example Set the global client override.
  #   Threaded.client_override = :testing
  # @param name [String, Symbol] The global override name.
  # @return [String, Symbol] The override.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#212
  def client_override=(name); end

  # Get the current Mongoid scope.
  #
  # @example Get the scope.
  #   Threaded.current_scope(klass)
  #   Threaded.current_scope
  # @param klass [Klass] The class type of the scope.
  # @return [Criteria] The scope.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#227
  def current_scope(klass = T.unsafe(nil)); end

  # Set the current Mongoid scope.
  #
  # @example Set the scope.
  #   Threaded.current_scope = scope
  # @param scope [Criteria] The current scope.
  # @return [Criteria] The scope.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#247
  def current_scope=(scope); end

  # Get the global database override.
  #
  # @example Get the global database override.
  #   Threaded.database_override
  # @return [String, Symbol] The override.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#58
  def database_override; end

  # Set the global database override.
  #
  # @example Set the global database override.
  #   Threaded.database_override = :testing
  # @param name [String, Symbol] The global override name.
  # @return [String, Symbol] The override.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#72
  def database_override=(name); end

  # Are in the middle of executing the named stack
  #
  # @example Are we in the stack execution?
  #   Threaded.executing?(:create)
  # @param name [Symbol] The name of the stack
  # @return [true] If the stack is being executed.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#86
  def executing?(name); end

  # Exit autosaving a document on the current thread.
  #
  # @example Exit autosave.
  #   Threaded.exit_autosave(doc)
  # @param document [Document] The document to autosave.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#150
  def exit_autosave(document); end

  # Exit from a named thread local stack.
  #
  # @example Exit from the stack.
  #   Threaded.exit_execution(:create)
  # @param name [Symbol] The name of the stack
  # @return [true] True.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#100
  def exit_execution(name); end

  # Exit validating a document on the current thread.
  #
  # @example Exit validation.
  #   Threaded.exit_validate(doc)
  # @param document [Document] The document to validate.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#162
  def exit_validate(document); end

  # Exit suppressing default scopes for given model on the current thread.
  #
  # @api private
  # @example Exit without default scope stack.
  #   Threaded.exit_without_default_scope(klass)
  # @param klass [Class] The model to unsuppress default scoping on.
  #
  # source://mongoid//lib/mongoid/threaded.rb#186
  def exit_without_default_scope(klass); end

  # Get the cached session for this thread.
  #
  # @example Get the session for this thread.
  #   Threaded.get_session
  # @return [Mongo::Session, nil] The session cached on this thread or nil.
  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#385
  def get_session; end

  # Set the current Mongoid scope. Safe for multi-model scope chaining.
  #
  # @example Set the scope.
  #   Threaded.current_scope(scope, klass)
  # @param scope [Criteria] The current scope.
  # @param klass [Class] The current model class.
  # @return [Criteria] The scope.
  # @since 5.0.1
  #
  # source://mongoid//lib/mongoid/threaded.rb#262
  def set_current_scope(scope, klass); end

  # Cache a session for this thread.
  #
  # @example Save a session for this thread.
  #   Threaded.set_session(session)
  # @param session [Mongo::Session] The session to save.
  # @since 6.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#373
  def set_session(session); end

  # Get the named stack.
  #
  # @example Get a stack by name
  #   Threaded.stack(:create)
  # @param name [Symbol] The name of the stack
  # @return [Array] The stack.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/threaded.rb#114
  def stack(name); end

  # Is the document validated on the current thread?
  #
  # @example Is the document validated?
  #   Threaded.validated?(doc)
  # @param document [Document] The document to check.
  # @return [true, false] If the document is validated.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#310
  def validated?(document); end

  # Get all validations on the current thread.
  #
  # @example Get all validations.
  #   Threaded.validations
  # @return [Hash] The current validations.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#334
  def validations; end

  # Get all validations on the current thread for the class.
  #
  # @example Get all validations.
  #   Threaded.validations_for(Person)
  # @param klass [Class] The class to check.
  # @return [Array] The current validations.
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/threaded.rb#361
  def validations_for(klass); end

  # Is the given klass' default scope suppressed on the current thread?
  #
  # @api private
  # @example Is the given klass' default scope suppressed?
  #   Threaded.without_default_scope?(klass)
  # @param klass [Class] The model to check for default scope suppression.
  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/threaded.rb#282
  def without_default_scope?(klass); end
end

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#5
Mongoid::Threaded::ASSIGN = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded.rb#27
Mongoid::Threaded::AUTOSAVES_KEY = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#4
Mongoid::Threaded::BIND = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#6
Mongoid::Threaded::BUILD = T.let(T.unsafe(nil), String)

# Constant for the key to store clients.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/threaded.rb#15
Mongoid::Threaded::CLIENTS_KEY = T.let(T.unsafe(nil), String)

# The key to override the client.
#
# @since 5.0.0
#
# source://mongoid//lib/mongoid/threaded.rb#20
Mongoid::Threaded::CLIENT_OVERRIDE_KEY = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#8
Mongoid::Threaded::CREATE = T.let(T.unsafe(nil), String)

# The key for the current thread's scope stack.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/threaded.rb#25
Mongoid::Threaded::CURRENT_SCOPE_KEY = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded.rb#10
Mongoid::Threaded::DATABASE_OVERRIDE_KEY = T.let(T.unsafe(nil), String)

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#7
Mongoid::Threaded::LOAD = T.let(T.unsafe(nil), String)

# This module contains convenience methods for document lifecycle that
# resides on thread locals.
#
# source://mongoid//lib/mongoid/threaded/lifecycle.rb#12
module Mongoid::Threaded::Lifecycle
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Threaded::Lifecycle::ClassMethods

  private

  # Begin the assignment of attributes. While in this block embedded
  # documents will not autosave themselves in order to allow the document to
  # be in a valid state.
  #
  # @example Execute the assignment.
  #   _assigning do
  #   person.attributes = { :addresses => [ address ] }
  #   end
  # @return [Object] The yielded value.
  # @since 2.2.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#29
  def _assigning; end

  # Is the current thread in assigning mode?
  #
  # @example Is the current thread in assigning mode?
  #   proxy._assigning?
  # @return [true, false] If the thread is assigning.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#44
  def _assigning?; end

  # Execute a block in binding mode.
  #
  # @example Execute in binding mode.
  #   binding do
  #   relation.push(doc)
  #   end
  # @return [Object] The return value of the block.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#58
  def _binding; end

  # Is the current thread in binding mode?
  #
  # @example Is the current thread in binding mode?
  #   proxy.binding?
  # @return [true, false] If the thread is binding.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#73
  def _binding?; end

  # Execute a block in building mode.
  #
  # @example Execute in building mode.
  #   _building do
  #   relation.push(doc)
  #   end
  # @return [Object] The return value of the block.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#87
  def _building; end

  # Is the current thread in building mode?
  #
  # @example Is the current thread in building mode?
  #   proxy._building?
  # @return [true, false] If the thread is building.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#102
  def _building?; end

  # Is the current thread in creating mode?
  #
  # @example Is the current thread in creating mode?
  #   proxy.creating?
  # @return [true, false] If the thread is creating.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#114
  def _creating?; end

  # Execute a block in loading mode.
  #
  # @example Execute in loading mode.
  #   _loading do
  #   relation.push(doc)
  #   end
  # @return [Object] The return value of the block.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#128
  def _loading; end

  # Is the current thread in loading mode?
  #
  # @example Is the current thread in loading mode?
  #   proxy._loading?
  # @return [true, false] If the thread is loading.
  # @since 2.3.2
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#143
  def _loading?; end
end

# source://mongoid//lib/mongoid/threaded/lifecycle.rb#147
module Mongoid::Threaded::Lifecycle::ClassMethods
  # Execute a block in creating mode.
  #
  # @example Execute in creating mode.
  #   creating do
  #   relation.push(doc)
  #   end
  # @return [Object] The return value of the block.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/threaded/lifecycle.rb#159
  def _creating; end
end

# source://mongoid//lib/mongoid/threaded.rb#30
Mongoid::Threaded::STACK_KEYS = T.let(T.unsafe(nil), Hash)

# source://mongoid//lib/mongoid/threaded.rb#28
Mongoid::Threaded::VALIDATIONS_KEY = T.let(T.unsafe(nil), String)

# This module handles the behaviour for setting up document created at and
# updated at timestamps.
#
# source://mongoid//lib/mongoid/timestamps/timeless.rb#3
module Mongoid::Timestamps
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless
  include ::Mongoid::Timestamps::Created
  include ::Mongoid::Timestamps::Updated

  mixes_in_class_methods ::Mongoid::Timestamps::Timeless::ClassMethods
end

# This module handles the behaviour for setting up document created at
# timestamp.
#
# source://mongoid//lib/mongoid/timestamps/created/short.rb#4
module Mongoid::Timestamps::Created
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless

  mixes_in_class_methods ::Mongoid::Timestamps::Timeless::ClassMethods

  # Update the created_at field on the Document to the current time. This is
  # only called on create.
  #
  # @example Set the created at time.
  #   person.set_created_at
  #
  # source://mongoid//lib/mongoid/timestamps/created.rb#23
  def set_created_at; end
end

# Adds a created_at timestamp to the document, but it is stored as c_at
# with a created_at alias.
#
# source://mongoid//lib/mongoid/timestamps/created/short.rb#8
module Mongoid::Timestamps::Created::Short
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless
  include ::Mongoid::Timestamps::Created
end

# source://mongoid//lib/mongoid/timestamps/short.rb#4
module Mongoid::Timestamps::Short
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless
  include ::Mongoid::Timestamps::Created
  include ::Mongoid::Timestamps::Updated

  mixes_in_class_methods ::Mongoid::Timestamps::Timeless::ClassMethods
end

# This module adds behaviour for turning off timestamping in single or
# multiple calls.
#
# source://mongoid//lib/mongoid/timestamps/timeless.rb#7
module Mongoid::Timestamps::Timeless
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Timestamps::Timeless::ClassMethods

  # Clears out the timeless option.
  #
  # @example Clear the timeless option.
  #   document.clear_timeless_option
  # @return [true] True.
  # @since 3.1.4
  #
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#18
  def clear_timeless_option; end

  # Begin an execution that should skip timestamping.
  #
  # @example Save a document but don't timestamp.
  #   person.timeless.save
  # @return [Document] The document this was called on.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#35
  def timeless; end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#40
  def timeless?; end

  class << self
    # source://mongoid//lib/mongoid/timestamps/timeless.rb#49
    def [](*_arg0, **_arg1, &_arg2); end

    # source://mongoid//lib/mongoid/timestamps/timeless.rb#49
    def []=(*_arg0, **_arg1, &_arg2); end

    # source://mongoid//lib/mongoid/timestamps/timeless.rb#46
    def timeless_table; end
  end
end

# source://mongoid//lib/mongoid/timestamps/timeless.rb#54
module Mongoid::Timestamps::Timeless::ClassMethods
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#72
  def clear_timeless_option; end

  # source://mongoid//lib/mongoid/timestamps/timeless.rb#80
  def clear_timeless_option_on_update; end

  # source://mongoid//lib/mongoid/timestamps/timeless.rb#88
  def set_timeless_counter(counter); end

  # Begin an execution that should skip timestamping.
  #
  # @example Create a document but don't timestamp.
  #   Person.timeless.create(:title => "Sir")
  # @return [Class] The class this was called on.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#64
  def timeless; end

  # @return [Boolean]
  #
  # source://mongoid//lib/mongoid/timestamps/timeless.rb#92
  def timeless?; end
end

# This module handles the behaviour for setting up document updated at
# timestamp.
#
# source://mongoid//lib/mongoid/timestamps/updated/short.rb#4
module Mongoid::Timestamps::Updated
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless

  mixes_in_class_methods ::Mongoid::Timestamps::Timeless::ClassMethods

  # Is the updated timestamp able to be set?
  #
  # @example Can the timestamp be set?
  #   document.able_to_set_updated_at?
  # @return [true, false] If the timestamp can be set.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/timestamps/updated.rb#40
  def able_to_set_updated_at?; end

  # Update the updated_at field on the Document to the current time.
  # This is only called on create and on save.
  #
  # @example Set the updated at time.
  #   person.set_updated_at
  #
  # source://mongoid//lib/mongoid/timestamps/updated.rb#24
  def set_updated_at; end
end

# Adds an updated_at timestamp to the document, but it is stored as u_at
# with an updated_at alias.
#
# source://mongoid//lib/mongoid/timestamps/updated/short.rb#8
module Mongoid::Timestamps::Updated::Short
  extend ::ActiveSupport::Concern
  include ::Mongoid::Timestamps::Timeless
  include ::Mongoid::Timestamps::Updated
end

# source://mongoid//lib/mongoid/touchable.rb#4
module Mongoid::Touchable
  extend ::Mongoid::Touchable

  # Add the association to the touchable relations if the touch option was
  # provided.
  #
  # @example Add the touchable.
  #   Model.define_touchable!(assoc)
  # @param association [Association] The association metadata.
  # @return [Class] The model class.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/touchable.rb#55
  def define_touchable!(association); end

  private

  # Define the method that will get called for touching belongs_to
  # relations.
  #
  # @api private
  # @example Define the touch relation.
  #   Model.define_relation_touch_method(:band)
  #   Model.define_relation_touch_method(:band, :band_updated_at)
  # @param name [Symbol] The name of the relation.
  # @param association [Association] The association metadata.
  # @return [Symbol] The method name.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/touchable.rb#82
  def define_relation_touch_method(name, association); end
end

# source://mongoid//lib/mongoid/touchable.rb#6
module Mongoid::Touchable::InstanceMethods
  # Touch the document, in effect updating its updated_at timestamp and
  # optionally the provided field to the current time. If any belongs_to
  # relations exist with a touch option, they will be updated as well.
  #
  # @example Update the updated_at timestamp.
  #   document.touch
  # @example Update the updated_at and provided timestamps.
  #   document.touch(:audited)
  # @note This will not autobuild relations if those options are set.
  # @param field [Symbol] The name of an additional field to update.
  # @return [true/false] false if record is new_record otherwise true.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/touchable.rb#25
  def touch(field = T.unsafe(nil)); end
end

# Provides behaviour around traversing the document graph.
#
# @since 4.0.0
#
# source://mongoid//lib/mongoid/traversable.rb#7
module Mongoid::Traversable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Mongoid::Traversable::ClassMethods

  # Get all child +Documents+ to this +Document+, going n levels deep if
  # necessary. This is used when calling update persistence operations from
  # the root document, where changes in the entire tree need to be
  # determined. Note that persistence from the embedded documents will
  # always be preferred, since they are optimized calls... This operation
  # can get expensive in domains with large hierarchies.
  #
  # @example Get all the document's children.
  #   person._children
  # @return [Array<Document>] All child documents in the hierarchy.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#29
  def _children; end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#10
  def _parent; end

  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#14
  def _parent=(p); end

  # Resets the memoized children on the object. Called internally when an
  # embedded array changes size.
  #
  # @api semiprivate
  # @example Reset the memoized children.
  #   document._reset_memoized_children!
  # @return [nil] nil.
  # @since 5.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#141
  def _reset_memoized_children!; end

  # Return the root document in the object graph. If the current document
  # is the root object in the graph it will return self.
  #
  # @example Get the root document in the hierarchy.
  #   document._root
  # @return [Document] The root document in the hierarchy.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#153
  def _root; end

  # Is this document the root document of the hierarchy?
  #
  # @example Is the document the root?
  #   document._root?
  # @return [true, false] If the document is the root.
  # @since 3.1.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#167
  def _root?; end

  # Collect all the children of this document.
  #
  # @example Collect all the children.
  #   document.collect_children
  # @return [Array<Document>] The children.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#41
  def collect_children; end

  # Marks all children as being persisted.
  #
  # @example Flag all the children.
  #   document.flag_children_persisted
  # @return [Array<Document>] The flagged children.
  # @since 3.0.7
  #
  # source://mongoid//lib/mongoid/traversable.rb#63
  def flag_children_persisted; end

  # Determines if the document is a subclass of another document.
  #
  # @example Check if the document is a subclass
  #   Square.new.hereditary?
  # @return [true, false] True if hereditary, false if not.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#75
  def hereditary?; end

  # Sets up a child/parent association. This is used for newly created
  # objects so they can be properly added to the graph.
  #
  # @example Set the parent document.
  #   document.parentize(parent)
  # @param document [Document] The parent document.
  # @return [Document] The parent document.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#88
  def parentize(document); end

  # Remove a child document from this parent. If an embeds one then set to
  # nil, otherwise remove from the embeds many.
  #
  # This is called from the +RemoveEmbedded+ persistence command.
  #
  # @example Remove the child.
  #   document.remove_child(child)
  # @param child [Document] The child (embedded) document to remove.
  # @since 2.0.0.beta.1
  #
  # source://mongoid//lib/mongoid/traversable.rb#103
  def remove_child(child); end

  # After children are persisted we can call this to move all their changes
  # and flag them as persisted in one call.
  #
  # @example Reset the children.
  #   document.reset_persisted_children
  # @return [Array<Document>] The children.
  # @since 2.1.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#122
  def reset_persisted_children; end
end

# @since 4.0.0
#
# source://mongoid//lib/mongoid/traversable.rb#171
module Mongoid::Traversable::ClassMethods
  # Determines if the document is a subclass of another document.
  #
  # @example Check if the document is a subclass.
  #   Square.hereditary?
  # @return [true, false] True if hereditary, false if not.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/traversable.rb#179
  def hereditary?; end

  # When inheriting, we want to copy the fields from the parent class and
  # set the on the child to start, mimicking the behaviour of the old
  # class_inheritable_accessor that was deprecated in Rails edge.
  #
  # @example Inherit from this class.
  #   Person.inherited(Doctor)
  # @param subclass [Class] The inheriting class.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/traversable.rb#193
  def inherited(subclass); end
end

# source://mongoid//lib/mongoid/version.rb#4
Mongoid::VERSION = T.let(T.unsafe(nil), String)

# This module provides additional validations that ActiveModel does not
# provide: validates_associated and validates_uniqueness_of.
#
# source://mongoid//lib/mongoid/validatable/macros.rb#3
module Mongoid::Validatable
  extend ::ActiveSupport::Concern
  include ::Mongoid::Validatable::Macros

  mixes_in_class_methods ::Mongoid::Validatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::Macros

  # Begin the associated validation.
  #
  # @example Begin validation.
  #   document.begin_validate
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/validatable.rb#29
  def begin_validate; end

  # Exit the associated validation.
  #
  # @example Exit validation.
  #   document.exit_validate
  # @since 2.1.9
  #
  # source://mongoid//lib/mongoid/validatable.rb#39
  def exit_validate; end

  # Given the provided options, are we performing validations?
  #
  # @example Are we performing validations?
  #   document.performing_validations?(validate: true)
  # @param options [Hash] The options to check.
  # @return [true, false] If we are validating.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/validatable.rb#53
  def performing_validations?(options = T.unsafe(nil)); end

  # Overrides the default ActiveModel behaviour since we need to handle
  # validations of relations slightly different than just calling the
  # getter.
  #
  # @example Read the value.
  #   person.read_attribute_for_validation(:addresses)
  # @param attr [Symbol] The name of the field or relation.
  # @return [Object] The value of the field or the relation.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/validatable.rb#69
  def read_attribute_for_validation(attr); end

  # Determine if the document is valid.
  #
  # @example Is the document valid?
  #   person.valid?
  # @example Is the document valid in a context?
  #   person.valid?(:create)
  # @param context [Symbol] The optional validation context.
  # @return [true, false] True if valid, false if not.
  # @since 2.0.0.rc.6
  #
  # source://mongoid//lib/mongoid/validatable.rb#96
  def valid?(context = T.unsafe(nil)); end

  # Used to prevent infinite loops in associated validations.
  #
  # @example Is the document validated?
  #   document.validated?
  # @return [true, false] Has the document already been validated?
  # @since 2.0.0.rc.2
  #
  # source://mongoid//lib/mongoid/validatable.rb#108
  def validated?; end

  # Are we currently performing a validation that has a query?
  #
  # @example Are we validating with a query?
  #   document.validating_with_query?
  # @return [true, false] If we are validating with a query.
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/validatable.rb#120
  def validating_with_query?; end
end

# Validates whether or not an association is valid or not. Will correctly
# handle has one and has many associations.
#
# @example Set up the association validations.
#
#   class Person
#   include Mongoid::Document
#   embeds_one :name
#   embeds_many :addresses
#
#   validates_associated :name, :addresses
#   end
#
# source://mongoid//lib/mongoid/validatable/associated.rb#17
class Mongoid::Validatable::AssociatedValidator < ::ActiveModel::EachValidator
  # Validates that the associations provided are either all nil or all
  # valid. If neither is true then the appropriate errors will be added to
  # the parent document.
  #
  # @example Validate the association.
  #   validator.validate_each(document, :name, name)
  # @param document [Document] The document to validate.
  # @param attribute [Symbol] The relation to validate.
  # @param value [Object] The value of the relation.
  # @since 2.0.0
  #
  # source://mongoid//lib/mongoid/validatable/associated.rb#31
  def validate_each(document, attribute, value); end
end

# source://mongoid//lib/mongoid/validatable.rb#124
module Mongoid::Validatable::ClassMethods
  # Adds an associated validator for the relation if the validate option
  # was not provided or set to true.
  #
  # @example Set up validation.
  #   Person.validates_relation(association)
  # @param association [Association] The association metadata.
  # @since 2.0.0.rc.1
  #
  # source://mongoid//lib/mongoid/validatable.rb#135
  def validates_relation(association); end

  # Add validation with the supplied validators forthe provided fields
  # with options.
  #
  # @example Validate with a specific validator.
  #   validates_with MyValidator, on: :create
  # @note See ActiveModel::Validations::With for full options. This is
  #   overridden to add autosave functionality when presence validation is
  #   added.
  # @param args [Class<Array>, Hash] The validator classes and options.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/validatable.rb#154
  def validates_with(*args, &block); end

  # Are we currently performing a validation that has a query?
  #
  # @example Are we validating with a query?
  #   Model.validating_with_query?
  # @return [true, false] If we are validating with a query.
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/validatable.rb#174
  def validating_with_query?; end
end

# Validates that the specified attributes do or do not match a certain
# regular expression.
#
# @example Set up the format validator.
#
#   class Person
#   include Mongoid::Document
#   field :website
#
#   validates_format_of :website, :with => URI.regexp
#   end
#
# source://mongoid//lib/mongoid/validatable/format.rb#16
class Mongoid::Validatable::FormatValidator < ::ActiveModel::Validations::FormatValidator
  include ::Mongoid::Validatable::Localizable
end

# Validates that the specified attributes do or do not match a certain
# length.
#
# @example Set up the length validator.
#
#   class Person
#   include Mongoid::Document
#   field :website
#
#   validates_length_of :website, in: 1..10
#   end
#
# source://mongoid//lib/mongoid/validatable/length.rb#16
class Mongoid::Validatable::LengthValidator < ::ActiveModel::Validations::LengthValidator
  include ::Mongoid::Validatable::Localizable
end

# Adds localization support to validations.
#
# source://mongoid//lib/mongoid/validatable/localizable.rb#6
module Mongoid::Validatable::Localizable
  # Validates each for localized fields.
  #
  # @example Validate localized fields.
  #   validator.validate_each(model, :name, "value")
  # @param document [Document] The document.
  # @param attribute [Symbol, String] The attribute to validate.
  # @param value [Object] The attribute value.
  # @since 2.4.2
  #
  # source://mongoid//lib/mongoid/validatable/localizable.rb#18
  def validate_each(document, attribute, value); end
end

# source://mongoid//lib/mongoid/validatable/macros.rb#4
module Mongoid::Validatable::Macros
  extend ::ActiveSupport::Concern

  # Validates whether or not an association is valid or not. Will correctly
  # handle has one and has many associations.
  #
  # @example
  #
  #   class Person
  #   include Mongoid::Document
  #   embeds_one :name
  #   embeds_many :addresses
  #
  #   validates_associated :name, :addresses
  #   end
  # @param args [Array] The arguments to pass to the validator.
  #
  # source://mongoid//lib/mongoid/validatable/macros.rb#22
  def validates_associated(*args); end

  # Validates the format of a field.
  #
  # @example
  #   class Person
  #   include Mongoid::Document
  #   field :title
  #
  #   validates_format_of :title, with: /\A[a-z0-9 \-_]*\z/i
  #   end
  # @param args [Array] The names of the fields to validate.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/validatable/macros.rb#57
  def validates_format_of(*args); end

  # Validates the length of a field.
  #
  # @example
  #   class Person
  #   include Mongoid::Document
  #   field :title
  #
  #   validates_length_of :title, minimum: 100
  #   end
  # @param args [Array] The names of the fields to validate.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/validatable/macros.rb#74
  def validates_length_of(*args); end

  # Validates whether or not a field is present - meaning nil or empty.
  #
  # @example
  #   class Person
  #   include Mongoid::Document
  #   field :title
  #
  #   validates_presence_of :title
  #   end
  # @param args [Array] The names of the fields to validate.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/validatable/macros.rb#91
  def validates_presence_of(*args); end

  # Validates whether or not a field is unique against the documents in the
  # database.
  #
  # @example
  #
  #   class Person
  #   include Mongoid::Document
  #   field :title
  #
  #   validates_uniqueness_of :title
  #   end
  # @param args [Array] The arguments to pass to the validator.
  #
  # source://mongoid//lib/mongoid/validatable/macros.rb#40
  def validates_uniqueness_of(*args); end
end

# Validates that the specified attributes are not blank (as defined by
# Object#blank?).
#
# @example Define the presence validator.
#
#   class Person
#   include Mongoid::Document
#   field :title
#
#   validates_presence_of :title
#   end
#
# source://mongoid//lib/mongoid/validatable/presence.rb#16
class Mongoid::Validatable::PresenceValidator < ::ActiveModel::EachValidator
  # Validate the document for the attribute and value.
  #
  # @example Validate the document.
  #   validator.validate_each(doc, :title, "")
  # @param document [Document] The document to validate.
  # @param attribute [Symbol] The attribute name.
  # @param value [Object] The current value of the field.
  # @since 2.4.0
  #
  # source://mongoid//lib/mongoid/validatable/presence.rb#28
  def validate_each(document, attribute, value); end

  private

  # For guarding against false values.
  #
  # @api private
  # @example Is the value not present?
  #   validator.not_present?(value)
  # @param value [Object] The value.
  # @return [true, false] If the value is not present.
  # @since 3.0.5
  #
  # source://mongoid//lib/mongoid/validatable/presence.rb#81
  def not_present?(value); end

  # Returns true if the relation is blank or the foreign key is blank.
  #
  # @api private
  # @example Check is the relation or fk is blank.
  #   validator.relation_or_fk_mising(doc, :name, "")
  # @param doc [Document] The document.
  # @param attr [Symbol] The attribute.
  # @param value [Object] The value.
  # @return [true, false] If the doc is missing.
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/validatable/presence.rb#63
  def relation_or_fk_missing?(doc, attr, value); end
end

# source://mongoid//lib/mongoid/validatable/queryable.rb#4
module Mongoid::Validatable::Queryable
  # Wrap the validation inside the an execution block that alert's the
  # client not to clear its persistence options.
  #
  # @example Execute the validation with a query.
  #   with_query(document) do
  #   #...
  #   end
  # @param document [Document] The document being validated.
  # @return [Object] The result of the yield.
  # @since 3.0.2
  #
  # source://mongoid//lib/mongoid/validatable/queryable.rb#19
  def with_query(document); end
end

# Validates whether or not a field is unique against the documents in the
# database.
#
# It is also possible to limit the uniqueness constraint to a set of
# records matching certain conditions:
#   class Person
#     include Mongoid::Document
#     field :title
#     field :active, type: Boolean
#
#     validates_uniqueness_of :title, conditions: -> {where(active: true)}
#   end
#
# @example Define the uniqueness validator.
#
#   class Person
#   include Mongoid::Document
#   field :title
#
#   validates_uniqueness_of :title
#   end
#
# source://mongoid//lib/mongoid/validatable/uniqueness.rb#26
class Mongoid::Validatable::UniquenessValidator < ::ActiveModel::EachValidator
  include ::Mongoid::Validatable::Queryable

  # Validate the document for uniqueness violations.
  #
  # @example Validate the document.
  #   validate_each(person, :title, "Sir")
  # @param document [Document] The document to validate.
  # @param attribute [Symbol] The field to validate on.
  # @param value [Object] The value of the field.
  # @return [Errors] The errors.
  # @since 1.0.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#41
  def validate_each(document, attribute, value); end

  private

  # Add the error to the document.
  #
  # @api private
  # @example Add the error.
  #   validator.add_error(doc, :name, "test")
  # @param document [Document] The document to validate.
  # @param attribute [Symbol] The name of the attribute.
  # @param value [Object] The value of the object.
  # @since 2.4.10
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#67
  def add_error(document, attribute, value); end

  # Should the uniqueness validation be case sensitive?
  #
  # @api private
  # @example Is the validation case sensitive?
  #   validator.case_sensitive?
  # @return [true, false] If the validation is case sensitive.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#83
  def case_sensitive?; end

  # Create the validation criteria.
  #
  # @api private
  # @example Create the criteria.
  #   validator.create_criteria(User, user, :name, "syd")
  # @param document [Document] The document to validate.
  # @param value [Object] The value of the object.
  # @param attribute [Symbol] The name of the attribute.
  # @param base [Class, Proxy] The base to execute the criteria from.
  # @return [Criteria] The criteria.
  # @since 2.4.10
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#102
  def create_criteria(base, document, attribute, value); end

  # Get the default criteria for checking uniqueness.
  #
  # @api private
  # @example Get the criteria.
  #   validator.criterion(person, :title, "Sir")
  # @param document [Document] The document to validate.
  # @param attribute [Symbol] The name of the attribute.
  # @param value [Object] The value of the object.
  # @return [Criteria] The uniqueness criteria.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#122
  def criterion(document, attribute, value); end

  # Filter the value based on whether the check is case sensitive or not.
  #
  # @api private
  # @example Filter the value.
  #   validator.filter("testing")
  # @param value [Object] The value to filter.
  # @return [Object, Regexp] The value, filtered or not.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#150
  def filter(value); end

  # Is the attribute localized?
  #
  # @api private
  # @example Is the attribute localized?
  #   validator.localized?(doc, :field)
  # @param document [Document] The document getting validated.
  # @param attribute [Symbol] The attribute to validate.
  # @return [true, false] If the attribute is localized.
  # @since 4.0.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#311
  def localized?(document, attribute); end

  # Scope the criteria to the scope options provided.
  #
  # @api private
  # @example Scope the criteria.
  #   validator.scope(criteria, document)
  # @param criteria [Criteria] The criteria to scope.
  # @param document [Document] The document being validated.
  # @return [Criteria] The scoped criteria.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#167
  def scope(criteria, document, _attribute); end

  # Scope reference has changed?
  #
  # @api private
  # @example Has scope reference changed?
  #   validator.scope_value_changed?(doc)
  # @param document [Document] The embedded document.
  # @return [true, false] If the scope reference has changed.
  # @since
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#203
  def scope_value_changed?(document); end

  # Should validation be skipped?
  #
  # @api private
  # @example Should the validation be skipped?
  #   validator.skip_validation?(doc)
  # @param document [Document] The embedded document.
  # @return [true, false] If the validation should be skipped.
  # @since 2.3.0
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#187
  def skip_validation?(document); end

  # Get the name of the field and the value to validate. This is for the
  # case when we validate a relation via the relation name and not the key,
  # we need to send the key name and value to the db, not the relation
  # object.
  #
  # @api private
  # @example Get the name and key to validate.
  #   validator.to_validate(doc, :parent, Parent.new)
  # @param document [Document] The doc getting validated.
  # @param attribute [Symbol] The attribute getting validated.
  # @param value [Object] The value of the attribute.
  # @return [Array<Object, Object>] The field and value.
  # @since 2.4.4
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#226
  def to_validate(document, attribute, value); end

  # Validate an embedded document.
  #
  # @api private
  # @example Validate the embedded document.
  #   validator.validate_embedded(doc, :name, "test")
  # @param document [Document] The document.
  # @param attribute [Symbol] The attribute name.
  # @param value [Object] The value.
  # @since 2.4.10
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#247
  def validate_embedded(document, attribute, value); end

  # Validate a root document.
  #
  # @api private
  # @example Validate the root document.
  #   validator.validate_root(doc, :name, "test")
  # @param document [Document] The document.
  # @param attribute [Symbol] The attribute name.
  # @param value [Object] The value.
  # @since 2.4.10
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#267
  def validate_root(document, attribute, value); end

  # Are we required to validate the document?
  #
  # @example Is validation needed?
  #   validator.validation_required?(doc, :field)
  # @param document [Document] The document getting validated.
  # @param attribute [Symbol] The attribute to validate.
  # @return [true, false] If we need to validate.
  # @since 2.4.4
  #
  # source://mongoid//lib/mongoid/validatable/uniqueness.rb#292
  def validation_required?(document, attribute); end
end

class NilClass
  include ::BSON::Specialized
  include ::Mongoid::Extensions::NilClass
  include ::Mongoid::Criteria::Queryable::Extensions::NilClass
end

class Object < ::BasicObject
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Mongoid::Extensions::Object
  include ::Mongoid::Criteria::Queryable::Extensions::Object
  extend ::Mongoid::Extensions::Object::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Object::ClassMethods

  private

  # source://mongoid//lib/support/ruby_version.rb#9
  def invalid_version?; end

  # source://mongoid//lib/support/ruby_version.rb#3
  def raise_version_error(message); end
end

# source://mongoid//lib/rails/mongoid.rb#2
module Rails
  class << self
    # source://railties/6.1.3.2/lib/rails.rb#38
    def app_class; end

    # source://railties/6.1.3.2/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/6.1.3.2/lib/rails.rb#39
    def application; end

    # source://railties/6.1.3.2/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/6.1.3.2/lib/rails.rb#112
    def autoloaders; end

    # source://railties/6.1.3.2/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/6.1.3.2/lib/rails.rb#38
    def cache; end

    # source://railties/6.1.3.2/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/6.1.3.2/lib/rails.rb#46
    def configuration; end

    # source://railties/6.1.3.2/lib/rails.rb#72
    def env; end

    # source://railties/6.1.3.2/lib/rails.rb#79
    def env=(environment); end

    # source://railties/6.1.3.2/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/6.1.3.2/lib/rails.rb#92
    def groups(*groups); end

    # source://railties/6.1.3.2/lib/rails.rb#43
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/6.1.3.2/lib/rails.rb#43
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/6.1.3.2/lib/rails.rb#38
    def logger; end

    # source://railties/6.1.3.2/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/6.1.3.2/lib/rails.rb#108
    def public_path; end

    # source://railties/6.1.3.2/lib/rails.rb#63
    def root; end

    # source://railties/6.1.3.2/lib/rails/version.rb#7
    def version; end
  end
end

# source://mongoid//lib/rails/mongoid.rb#3
module Rails::Mongoid
  extend ::Rails::Mongoid

  # Use the application configuration to get every model and require it, so
  # that indexing and inheritance work in both development and production
  # with the same results.
  #
  # @example Load all the application models.
  #   Rails::Mongoid.load_models(app)
  # @param app [Application] The rails application.
  #
  # source://mongoid//lib/rails/mongoid.rb#14
  def load_models(app); end

  # Conditionally calls `Rails::Mongoid.load_models(app)` if the
  # `::Mongoid.preload_models` is `true`.
  #
  # @param app [Application] The rails application.
  #
  # source://mongoid//lib/rails/mongoid.rb#33
  def preload_models(app); end

  private

  # I don't want to mock out kernel for unit testing purposes, so added this
  # method as a convenience.
  #
  # @example Load the model.
  #   Mongoid.load_model("/mongoid/behaviour")
  # @param file [String] The base filename.
  # @since 2.0.0.rc.3
  #
  # source://mongoid//lib/rails/mongoid.rb#48
  def load_model(file); end
end

# Hooks Mongoid into Rails 3 and higher.
#
# @since 2.0.0
#
# source://mongoid//lib/mongoid/railtie.rb#11
class Rails::Mongoid::Railtie < ::Rails::Railtie
  # Rails runs all initializers first before getting into any generator
  # code, so we have no way in the intitializer to know if we are
  # generating a mongoid.yml. So instead of failing, we catch all the
  # errors and print them out.
  #
  # @since 3.0.0
  #
  # source://mongoid//lib/mongoid/railtie.rb#101
  def handle_configuration_error(e); end

  class << self
    # Mapping of rescued exceptions to HTTP responses
    #
    # @ return [Hash] rescued responses
    #
    # @example
    #   railtie.rescue_responses
    # @since 2.4.3
    #
    # source://mongoid//lib/mongoid/railtie.rb#21
    def rescue_responses; end
  end
end

class Range
  include ::Enumerable
  include ::Mongoid::Extensions::Range
  include ::Mongoid::Criteria::Queryable::Extensions::Range
  extend ::Mongoid::Extensions::Range::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Range::ClassMethods
end

class Regexp
  include ::BSON::JSON
  include ::Mongoid::Criteria::Queryable::Extensions::Regexp
  extend ::Mongoid::Extensions::Regexp::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Regexp::ClassMethods
end

class Set
  include ::Enumerable
  include ::Mongoid::Extensions::Set
  extend ::Mongoid::Extensions::Set::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Set::ClassMethods
end

class String
  include ::Comparable
  include ::Mongoid::Extensions::String
  include ::Mongoid::Criteria::Queryable::Extensions::String
  extend ::Mongoid::Extensions::String::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::String::ClassMethods
end

class Symbol
  include ::Comparable
  include ::Mongoid::Extensions::Symbol
  include ::Mongoid::Criteria::Queryable::Extensions::Symbol
  extend ::Mongoid::Extensions::Symbol::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Symbol::ClassMethods
end

class Time
  include ::Comparable
  include ::Mongoid::Extensions::Time
  include ::Mongoid::Criteria::Queryable::Extensions::Time
  extend ::Mongoid::Extensions::Time::ClassMethods
  extend ::Mongoid::Criteria::Queryable::Extensions::Time::ClassMethods
end

class TrueClass
  include ::Mongoid::Extensions::TrueClass
end
